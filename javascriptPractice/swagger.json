{
  "openapi": "3.1.0",
  "info": {
    "title": "TollGuru Toll API",
    "description": "<p>You can download the TollGuru API spec using the download link above and import collections in Postman for testing. Here is <b><b><a href='https://learning.postman.com/docs/integrations/available-integrations/working-with-openAPI/'>how to import collections in Postman.</b></a></b></p>\n\n<h2>Introduction</h2>\n<p>You can use TollGuru Toll API service to</p>\n<ul>\n  <li>Calculate tolls for your route.</li>\n  <li>Calculate other costs for your route (such as fuel expenses, driver expenses).</li>\n  <li>Calculate the cheapest, the fastest and other other optimal routes.</li>\n</ul>\n\n<p>By integrating our API with your application or website, you can provide your users with a powerful tool for efficient and cost-effective route planning.</p>\n\n<h2>How to use TollGuru API</h2>\n<p>With the Toll API you can calculate tolls, fuel costs and optimal routes for: </p>\n<p><b>Pre-trip planning</b></p>\n<ul>\n  <li>Specify origin, destination and waypoints, if any</li>\n  <li>Specify pre-trip route polyline or shape (latitude, longitude coordinates) from any mapping service including <b><a href=\"https://developers.google.com/maps/documentation/directions/intro?hl=en\" >Google</b></a>, <b><a href=\"https://docs.microsoft.com/en-us/bingmaps/v8-web-control/map-control-concepts/directions-module-examples/?redirectedfrom=MSDN\" >Bing</b></a>, <b><a href=\"https://docs.mapbox.com/api/\" >MapBox</b></a>, <b><a href=\"https://developer.apple.com/documentation/mapkit/mkdirections\" >Apple Map</b></a>, <b><a href=\"https://developer.here.com/documentation#routing_and_navigation_section\" >HERE</b></a>, <b><a href=\"https://developer.tomtom.com/routing-api\" >TomTom</b></a>, <b><a href=\"https://developers.google.com/waze/intro-transport\" >Waze</b></a>, <b><a href=\"https://developers.arcgis.com/features/directions/\" >ESRI</b></a>, <b><a href=\"https://business.mapquest.com/products/routing-directions-api\" >MapQuest</b></a>, <b><a href=\"https://www.jawg.io/docs/apidocs/routing/\" >JawgMaps</b></a>, <b><a href=\"https://info.maps.trimble.com/get-an-api-key\" >Trimble</b></a>, <b><a href=\"https://xserver2-dashboard.cloud.ptvgroup.com/dashboard/Default.htm#UseCases/Routing/OVER_Routing.htm\" >PTV</b></a>, <b><a href=\"https://www.mapmyindia.com/api/advanced-maps/doc/route-api\" >MapmyIndia</b></a>, <b><a href=\"https://tech.yandex.com/routing/\" >Yandex</b></a>, <b><a href=\"https://api.viamichelin.com/services/api-rest/\" >Michelin</b></a>, <b><a href=\"https://developer.baidu.com/\" >Baidu</b></a>, <b><a href=\"https://lbs.amap.com/api/webservice/guide/api/direction\" >Gaode</b></a> or your custom source</li>\n</ul>\n\n<p><b>Post-trip toll cost reconciliation</b></p>\n<ul>\n  <li>Send GPS tracks, such as those received from a smartphone, car GPS or a fleet telematics device.</li>\n</ul>\n\n<h2>Get started</h2>\n<p>Sign up for a free API key using your email and password. We suggest you use Postman to test the API before you integrate Toll API into your products. TollGuru Toll API is a REST API with predictable resource-oriented URLs. It uses standard HTTP response codes and authentication to accept form-encoded request bodies and return JSON-encoded responses.</p>\n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->",
    "contact": {
      "name": "MapUp Engineering Team",
      "email": "eng@TollGuru.com",
      "url": "tollguru.com"
    },
    "version": "2023-02-21"
  },
  "servers": [
    {
      "url": "https://apis.tollguru.com",
      "description": "apis.tollguru.com"
    }
  ],
  "tags": [
    {
      "name": "Our Client Libraries",
      "description": "You can use client libraries in Java, Python, Go, Node.js, PHP, Ruby, .NET to quickly integrate Toll API.</p><p> <div id=\"banner\"> <div class=\"images\" style=\"margin: 2.5%;display: inline-block !important;width: 15%;text-align: center;\"><b><a href=\"https://TollGuru-api-documentation.s3.us-east-2.amazonaws.com/client-library/php-client-generated.zip\"><img src =\"https://TollGuru-api-documentation.s3.us-east-2.amazonaws.com/icons/php.png\" width=70 download><p class=\"clientLibrary\" style=\"margin-top: 0;text-align: center;\">PHP</p></b></a></div> <div class=\"images\" style=\"margin: 2.5%;display: inline-block !important;width: 15%;text-align: center;\"><b><a href=\"https://TollGuru-api-documentation.s3.us-east-2.amazonaws.com/client-library/python-client-generated.zip\"><img src =\"https://TollGuru-api-documentation.s3.us-east-2.amazonaws.com/icons/python.png\" width=70 download><p class=\"clientLibrary\" style=\"margin-top: 0;text-align: center;\">Python</p></b></a></div> <div class=\"images\" style=\"margin: 2.5%;display: inline-block !important;width: 15%;text-align: center;\"><b><a href=\"https://TollGuru-api-documentation.s3.us-east-2.amazonaws.com/client-library/javascript-client-generated.zip\"><img src =\"https://TollGuru-api-documentation.s3.us-east-2.amazonaws.com/icons/javascript.png\" width=70 download><p class=\"clientLibrary\" style=\"margin-top: 0;text-align: center;\">JS</p></b></a></div> <div class=\"images\" style=\"margin: 2.5%;display: inline-block !important;width: 15%;text-align: center;\"><b><a href=\"https://TollGuru-api-documentation.s3.us-east-2.amazonaws.com/client-library/java-client-generated.zip\"><img src =\"https://TollGuru-api-documentation.s3.us-east-2.amazonaws.com/icons/java.png\" width=70 download><p class=\"clientLibrary\" style=\"margin-top: 0;text-align: center;\">Java</p></b></a></div> <div class=\"images\" style=\"margin: 2.5%;display: inline-block !important;width: 15%;text-align: center;\"><b><a href=\"https://TollGuru-api-documentation.s3.us-east-2.amazonaws.com/client-library/nodejs-client-generated.zip\"><img src =\"https://TollGuru-api-documentation.s3.us-east-2.amazonaws.com/icons/node-js.png\" width=70 download><p class=\"clientLibrary\" style=\"margin-top: 0;text-align: center;\">NodeJS</p></b></a></div> <div class=\"images\" style=\"margin: 2.5%;display: inline-block !important;width: 15%;text-align: center;\"><b><a href=\"https://TollGuru-api-documentation.s3.us-east-2.amazonaws.com/client-library/go-client-generated.zip\"><img src =\"https://TollGuru-api-documentation.s3.us-east-2.amazonaws.com/icons/go.png\" width=70 download><p class=\"clientLibrary\" style=\"margin-top: 0;text-align: center;\">GO</p></b></a></div> <div class=\"images\" style=\"margin: 2.5%;display: inline-block !important;width: 15%;text-align: center;\"><b><a href=\"https://TollGuru-api-documentation.s3.us-east-2.amazonaws.com/client-library/ruby-client-generated.zip\"><img src =\"https://TollGuru-api-documentation.s3.us-east-2.amazonaws.com/icons/ruby.png\" width=70 download><p class=\"clientLibrary\" style=\"margin-top: 0;text-align: center;\">Ruby</p></b></a></div> <div class=\"images\" style=\"margin: 2.5%;display: inline-block !important;width: 15%;text-align: center;\"><b><a href=\"https://TollGuru-api-documentation.s3.us-east-2.amazonaws.com/client-library/dotnet-client-generated.zip\"><img src =\"https://TollGuru-api-documentation.s3.us-east-2.amazonaws.com/icons/dotnet.png\" width=70 download><p class=\"clientLibrary\" style=\"margin-top: 0;text-align: center;\">.NET</p></b></a></div> </div>"
    },
    {
      "name": "Tolls between Origin, destination, waypoints",
      "description": "Use this API endpoint to calculate tolls and fuel expenses between origin, destination, and waypoints (if any). With this API endpoint, you can <ul> <li>Calculate tolls for various vehicle types including cars, pickups, SUV towing trailers, taxis, trucks (up to 9-axles), RV, motorcycles, etc. </li> <li>See tolls for all routes</li> <li>See fuel expenses for all routes</li> <li>See the cheapest, the fastest and other optimal routes</li> <li>Modify vehicle types to include</li> </ul> Specifically, for trucks, you can <ul> <li>Return tolls by specifying zip codes (zip code followed by country name)</li> <li>Return tolls for truck compliant routes (based on axle count, height, weight, truck length </li> <li>Return Hours-of-service (HOS) compliant routes with information for suggested stop locations</li> <li>Return distance traveled in each state (mileage per state) </li> </ul> To summarise, the endpoint adds toll and fuel cost information to routes provided by <b><a href='https://developers.google.com/maps/documentation/directions/overview'>Google Map</b></a> and <b><a href='https://developer.here.com/documentation/routing-api/8.14.0/dev_guide/index.html'>HERE Map</b></a>. It extends the mapping functionality of Google Maps and HERE maps by adding tolls and fuel estimates to the route direction information. The endpoint accepts various parameters such as your vehicle type, fuel efficiency, and fuel price. You can specify whether you want information for routes from Google or HERE maps. <h3>Questions for constructing request body</h3>  <ul> <li><a href='https://tollguru.com/tolls-between-origin-destination-waypoints-using-a-mapping-service-faq#How-to-make-requests-using-addresses?' rel='noopener' target='_blank'>How to make requests using addresses?</a></li> <li><a href='https://tollguru.com/tolls-between-origin-destination-waypoints-using-a-mapping-service-faq#How-to-make-requests-using-geo-coordinates?' rel='noopener' target='_blank'>How to make requests using geo-coordinates?</a></li>  <li><a href='https://tollguru.com/tolls-between-origin-destination-waypoints-using-a-mapping-service-faq#How-to-add-waypoints?' rel='noopener' target='_blank'>How to add waypoints?</a></li>  <li><a href='https://tollguru.com/tolls-between-origin-destination-waypoints-using-a-mapping-service-faq#How-to-choose-a-mapping-service-provider?' rel='noopener' target='_blank'>How to choose a mapping service provider?</a></li>  <li><a href='https://tollguru.com/tolls-between-origin-destination-waypoints-using-a-mapping-service-faq#How-to-customize-a-vehicle?' rel='noopener' target='_blank'>How to customize a vehicle?</a></li>  <li><a href='https://tollguru.com/tolls-between-origin-destination-waypoints-using-a-mapping-service-faq#How-to-customize-fuel-related-information?' rel='noopener' target='_blank'>How to customize fuel related information?</a></li>  <li><a href='https://tollguru.com/tolls-between-origin-destination-waypoints-using-a-mapping-service-faq#How-to-get-turn-by-turn-directions-in-response?' rel='noopener' target='_blank'>How to get turn by turn directions in response?</a></li>  <li><a href='https://tollguru.com/tolls-between-origin-destination-waypoints-using-a-mapping-service-faq#How-to-get-tolls-on-your-route-based-on-departure-time?' rel='noopener' target='_blank'>How to get tolls on your route based on departure time?</a></li>  <li><a href='https://tollguru.com/tolls-between-origin-destination-waypoints-using-a-mapping-service-faq#How-to-get-state-mileage-information-for-North-America?' rel='noopener' target='_blank'>How to get state mileage information for North America?</a></li>  <li><a href='https://tollguru.com/tolls-between-origin-destination-waypoints-using-a-mapping-service-faq#How-to-get-tolls-for-EV-along-with-charging-points-for-North-America?' rel='noopener' target='_blank'>How to get tolls for EV along with charging points for North America?</a></li>  <li><a href='https://tollguru.com/tolls-between-origin-destination-waypoints-using-a-mapping-service-faq#How-to-get-vignette-information-for-Europe?' rel='noopener' target='_blank'>How to get vignette information for Europe?</a></li> </ul></p>"
    },
    {
      "name": "Tolls for complete route polyline from a mapping service",
      "description": "Use this service when you are already using a mapping service for your routing and you are able to send the complete route from the mapping service in the request. You will need to get the complete route from the mapping service (and not just origin, destination and some stops on the route) to receive accurate toll information. You can <ul> <li>Specify whether you want to send route polyline (encoded using <b><a href=\"https://developers.google.com/maps/documentation/utilities/polylinealgorithm\">Google encoded polyline algorithm</b></a> or shape (latitude and longitude pairs)</li> <li>Specify vehicle type. For example, you can receive tolls for vehicles based on axle counts for cars, SUV, pick-up, trucks (up to 9-axles), motorcycle, bus, motorhome, RV, limousine.</li> <li>Specify truck parameters such as weight, height, axle counts and receive tolls based on weight, height, etc.</li> <li>Specify the source of route polyline such as <b><a href=\"https://developers.google.com/maps/documentation/directions/intro?hl=en\" >Google</b></a>, <b><a href=\"https://docs.microsoft.com/en-us/bingmaps/v8-web-control/map-control-concepts/directions-module-examples/?redirectedfrom=MSDN\" >Bing</b></a>, <b><a href=\"https://docs.mapbox.com/api/\" >MapBox</b></a>, <b><a href=\"https://developer.apple.com/documentation/mapkit/mkdirections\" >Apple Map</b></a>, <b><a href=\"https://developer.here.com/documentation#routing_and_navigation_section\" >HERE</b></a>, <b><a href=\"https://developer.tomtom.com/routing-api\" >TomTom</b></a>, <b><a href=\"https://developers.google.com/waze/intro-transport\" >Waze</b></a>, <b><a href=\"https://developers.arcgis.com/features/directions/\" >ESRI</b></a>, <b><a href=\"https://business.mapquest.com/products/routing-directions-api\" >MapQuest</b></a>, <b><a href=\"https://www.jawg.io/docs/apidocs/routing/\" >JawgMaps</b></a>, <b><a href=\"https://info.maps.trimble.com/get-an-api-key\" >Trimble</b></a>, <b><a href=\"https://xserver2-dashboard.cloud.ptvgroup.com/dashboard/Default.htm#UseCases/Routing/OVER_Routing.htm\" >PTV</b></a>, <b><a href=\"https://www.mapmyindia.com/api/advanced-maps/doc/route-api\" >MapmyIndia</b></a>, <b><a href=\"https://tech.yandex.com/routing/\" >Yandex</b></a>, <b><a href=\"https://api.viamichelin.com/services/api-rest/\" >Michelin</b></a>, <b><a href=\"https://developer.baidu.com/\" >Baidu</b></a>, <b><a href=\"https://lbs.amap.com/api/webservice/guide/api/direction\" >Gaode</b></a> or your custom source (“custom”)</li> <li>Since you specify the exact route, you will receive tolls for the route. You will not receive tolls for alternate routes between origin and destination.</li> </ul> For more details, visit <b><a href=\"https://medium.com/TollGuru/know-toll-any-route-TollGuru-map-independent-toll-algorithm-product-release-d99a7e1bacfa\">TollGuru map independent algorithm</b></a> and how see we deal with <b><a href=\"https://medium.com/TollGuru/debugging-route-polyline-errors-TollGuru-polyline-to-toll-api-8f7c4f1fd317\">edge cases and common pitfalls</b></a> <h3>Questions for constructing request body</h3>  <ul>  <li><a href=\"https://tollguru.com/tolls-using-a-complete-polyline-from-any-mapping-service-faq#How-to-make-a-request-using-encoded-polyline?\" rel=\"noopener\" target=\"_blank\">How to make a request using encoded polyline?</a></li>  <li><a href=\"https://tollguru.com/tolls-using-a-complete-polyline-from-any-mapping-service-faq#How-to-make-a-request-using-the-path-of-lat-lng?\" rel=\"noopener\" target=\"_blank\">How to make a request using the path of lat-lng?</a></li>  <li><a href=\"https://tollguru.com/tolls-using-a-complete-polyline-from-any-mapping-service-faq#How-to-customize-a-vehicle?\" rel=\"noopener\" target=\"_blank\">How to customize a vehicle?</a></li>  <li><a href=\"https://tollguru.com/tolls-using-a-complete-polyline-from-any-mapping-service-faq#How-to-get-tolls-on-your-route-based-on-departure-time?\" rel=\"noopener\" target=\"_blank\">How to get tolls on your route based on departure time?</a></li>  <li><a href=\"https://tollguru.com/tolls-using-a-complete-polyline-from-any-mapping-service-faq#How-to-customize-fuel-related-information?\" rel=\"noopener\" target=\"_blank\">How to customize fuel related information?</a></li> <li><a href=\"https://tollguru.com/tolls-using-a-complete-polyline-from-any-mapping-service-faq#How-to-get-state-mileage-information-for-North-America?\" rel=\"noopener\" target=\"_blank\">How to get state mileage information for North America?</a></li> </ul></p>"
    },
    {
      "name": "TollTally - GPS Tracks to Toll API",
      "description": "Use TollTally - GPS Tracks to Toll API - to calculate tolls after you make the trip. You can upload your GPS tracks (in CSV format) to receive tolls for the likely <b><a href=\"https://medium.com/TollGuru/debugging-route-polyline-errors-TollGuru-polyline-to-toll-api-8f7c4f1fd317\" target=\"blank\">route matched</a></b> using the GPS tracks. You can <ul> <li>Specify vehicle type. For example, you can receive tolls for vehicles based on axle counts for cars, SUV, pick-up, trucks (up to 9-axles), motorcycle, bus, motorhome, RV, limousine.</li> <li>Specify truck parameters such as weight, height, axle counts to receive tolls based on weight, height, etc.</li> <li>Specify the timestamp of each GPS trace. If you do not specify the timestamp, tolls are likely to be inaccurate on time-based-toll facilities.</li> <li>Specify whether you want to receive toll information immediately (isAsync=false) or can wait (isAsync=true). Use the asynchronous mode when uploading multiple or large GPS track files. Response in asynchronous mode comes with a requestId and a requestedTimestamp. These results would be available for download for up to 30 days.</li> </ul> The route matched may slightly differ based on vehicle type specified. For example, let us consider roads that have tolled express lanes and toll-free general purpose lanes on the same corridor. If trucks are not allowed on the express lane, route matched when you specify truck as the vehicle type will exclude express lanes and, therefore, is likely to be different compared to the route matched for a 2-axle car. TollGuru matches GPS tracks to a route using <b><a href=\"https://en.wikipedia.org/wiki/Map_matching\" target=\"_blank\">Map Matching</a></b> and calculates tolls for the matched route. <b><a href=\"https://medium.com/TollGuru/debugging-route-polyline-errors-TollGuru-polyline-to-toll-api-8f7c4f1fd317\" target=\"_blank\">Refer to this article</a></b> to understand why we need to match GPS tracks to a route <h3>Questions for constructing request body</h3>  <ul>  <li><a href=\"https://tollguru.com/tolls-using-gps-tracks-faq#How-to-receive-tolls-for-GPS-tracks-in-csv-format?\" rel=\"noopener\" target=\"_blank\">How to receive tolls for GPS tracks in csv format?</a></li>  <li><a href=\"https://tollguru.com/tolls-using-gps-tracks-faq#How-to-receive-tolls-for-GPS-tracks-covering-a-very-long-route?\" rel=\"noopener\" target=\"_blank\">How to receive tolls for GPS tracks covering a very long route?</a></li>  <li><a href=\"https://tollguru.com/tolls-using-gps-tracks-faq#How-to-add-and-customize-a-vehicle?\" rel=\"noopener\" target=\"_blank\">How to add and customize a vehicle?</a></li>  </ul>"
    },
    {
      "name": "Transaction Count API"
    },
    {
      "name": "Errors and Troubleshooting",
      "description": "The TollGuru Toll API uses conventional HTTP status codes to indicate any errors that occur while processing requests. In general- Codes in the 2xx range indicate success. Codes in the 4xx range indicate an error that failed given the information provided (e.g., origin and destination is same, etc.). Codes in the 5xx range indicate an error with TollGuru server. The responses provided below can help in debugging the error.   <h3>Error Messages </h3> <table> <tr> <th>Status</th> <th>Code</th> <th>Value</th> <!-- <th>Description</th> --> </tr> <tr> <td>400</td> <td>INPUT_ERROR</td> <td>Invalid request. The From and To locations cannot be empty</td> <!-- <td>This error occurs when attempting to make a request to the API without providing valid values for the From and To locations</td> --> </tr> <tr> <td>400</td> <td>INPUT_ERROR</td> <td>Invalid request. The From and To locations must be different</td> <!-- <td>This error occurs when making an API request with identical From and To locations. The API requires that these locations are distinct for proper processing</td> --> </tr> <tr> <td>400</td> <td>INPUT_ERROR</td> <td>No path or polyline provide</td> <!-- <td>This error occurs when no polyline or path is provided in the request body.</td> --> </tr> <tr> <td>400</td> <td>INPUT_ERROR</td> <td>Invalid locTimes. Length should be greater than 2.</td> <!-- <td>This error occurs when the length of locTimes is less than or equal to 2.</td> --> </tr> <tr> <td>400</td> <td>INPUT_ERROR</td> <td>Unsupported vehicle type. Please provide a valid vehicle type.</td> <!-- <td>This error occurs when the provided vehicle type is not among the supported types.</td> --> </tr> <tr> <td>400</td> <td>INPUT_ERROR</td> <td>Weight cannot be less than zero</td> <!-- <td>This error occurs when the provided vehicle weight is not valid.</td> --> </tr> <tr> <td>400</td> <td>INPUT_ERROR</td> <td>Height cannot be less than zero</td> <!-- <td>This error occurs when the provided vehicle height is not valid.</td> --> </tr> <tr> <td>400</td> <td>INPUT_ERROR</td> <td>Fuel cost cannot be less than 0</td> <!-- <td>This error occurs when the provided fuel cost value is not a valid number.</td> --> </tr> <tr> <td>400</td> <td>INPUT_ERROR</td> <td>City fuel efficiency cannot be less than 0</td> <!-- <td>This error occurs when the provided fuel efficiency values for city are not valid numbers.</td> --> </tr> <tr> <td>400</td> <td>INPUT_ERROR</td> <td>Highway fuel efficiency cannot be less than 0</td> <!-- <td>This error occurs when the provided fuel efficiency values for highway are not valid numbers.</td> --> </tr> <tr> <td>500</td> <td>ROUTING_ERROR</td> <td>No route exist</td> <!-- <td>This error occurs in cases where a route cannot be established for the provided From and To locations, or when it is not feasible to determine a route between them</td> --> </tr> <tr> <td>500</td> <td>TOLLING_ERROR</td> <td>API call failed with status: 500 Internal Server Error</td> <!-- <td>This error occurs when we are unable to find the toll prices of a given route.</td> --> </tr> </table> </p> <p>Error response format</p>  <pre> {\"status\": 500, \"code\": \"TOLLING_ERROR\", \"value\": \"API call failed with status: 500 Internal Server Error\"} </pre> <ol> <li> <h4>Input Error - (INPUT_ERROR)</h4> <p>Errors caused as a result of bad csv file or malformed inputs</p> <p><b>Example</b></p> <pre> { \"status\": \"ERROR\", \"code\": \"INPUT_ERROR\" \"value\": \"Invalid request. The From and To locations cannot be empty\"} </pre> </li> <li> <h4>Routing Error - (ROUTING_ERROR)</h4> <p>Errors arising out of routing issues like traces not making a valid route as detected by our algorithm.</p> <p><b>Example</b></p> <pre> {\"status\": 500, \"code\": \"ROUTING_ERROR\", \"value\": \"No route exist\"} </pre> </li> <li> <h4>Tolling Error - (TOLLING_ERROR)</h4> <p>Errors caused while finding the toll prices of a given route.</p> <p><b>Example</b></p> <pre> {\"status\": 500, \"code\": \"TOLLING_ERROR\", \"value\": \"API call failed with status: 500 Internal Server Error\"} </pre> </li> </ol> <p> <ul><li>The status is the status code returned by the server</li><li>The code is the error type which can be INPUT_ERROR, TOLLING_ERROR, ROUTING_ERROR, SERVICE_ERROR</li><li>The value is the error message return </li></ul> </p>"
    },
    {
      "name": "Vehicle types supported by TollGuru",
      "description": "Any of the following can be given as value to **vehicleType** argument. By default it's **2AxlesAuto**. <!------------------------------------------------------------------------------> <!--------------------------North America---------------------------------------> <!------------------------------------------------------------------------------>\n<details> <summary><b>North America</b></summary> <ul style=\"list-style-type:none;\"> <li> <details> <summary>Car, SUV, Pickup truck</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/2AxlesAuto.png\" width=150 height=\"auto\"> </td> <td>2AxlesAuto</td> <td>Car, SUV or Pickup truck</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/3AxlesAuto.png\" width=150 height=\"auto\"> </td> <td>3AxlesAuto</td> <td>Car, SUV or Pickup truck towing 1-axle trailer</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/4AxlesAuto.png\" width=150 height=\"auto\"> </td> <td>4AxlesAuto</td> <td>Car, SUV or Pickup truck towing 2-axle trailer</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/2AxlesDualTire.png\" width=75 height=\"auto\"> </td> <td>2AxlesDualTire</td> <td>SUV or Pickup, 4 tires on rear</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/3AxlesDualTire.png\" width=150 height=\"auto\"> </td> <td>3AxlesDualTire</td> <td>SUV or Pickup, 4 tires on rear, 1-axle trailer</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/4AxlesDualTire.png\" width=150 height=\"auto\"> </td> <td>4AxlesDualTire</td> <td>SUV or Pickup, 4 tires on rear, 2-axle trailer</td> </tr> </table> </details> </li>\n<li> <details> <summary>EV</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/2AxlesEV.png\" width=150 height=\"auto\"> </td> <td>2AxlesEV</td> <td>EV</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/3AxlesEV.png\" width=150 height=\"auto\"> </td> <td>3AxlesEV</td> <td>EV towing 1-axle trailer</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/4AxlesEV.png\" width=150 height=\"auto\"> </td> <td>4AxlesEV</td> <td>EV towing 2-axle trailer</td> </tr> </table> </details> </li>\n<li> <details> <summary>Truck</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/2AxlesTruck.png\" width=150 height=\"auto\"> </td> <td>2AxlesTruck</td> <td>Truck - 2 Axles</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/3AxlesTruck.png\" width=150 height=\"auto\"> </td> <td>3AxlesTruck</td> <td>Truck - 3 Axles</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/4AxlesTruck.png\" width=150 height=\"auto\"> </td> <td>4AxlesTruck</td> <td>Truck - 4 Axles</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/5AxlesTruck.png\" width=150 height=\"auto\"> </td> <td>5AxlesTruck</td> <td>Truck - 5 Axles</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/6AxlesTruck.png\" width=150 height=\"auto\"> </td> <td>6AxlesTruck</td> <td>Truck - 6 Axles</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/7AxlesTruck.png\" width=150 height=\"auto\"> </td> <td>7AxlesTruck</td> <td>Truck - 7 Axles</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/8AxlesTruck.png\" width=150 height=\"auto\"> </td> <td>8AxlesTruck</td> <td>Truck - 8 Axles</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/9AxlesTruck.png\" width=150 height=\"auto\"> </td> <td>9AxlesTruck</td> <td>Truck - 9 Axles</td> </tr> </table> </details> </li>\n<li> <details> <summary>Bus</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/2AxlesBus.png\" width=150 height=\"auto\"> </td> <td>2AxlesBus</td> <td>Bus - 2 Axles</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/3AxlesBus.png\" width=150 height=\"auto\"> </td> <td>3AxlesBus</td> <td>Bus - 3 Axles</td> </tr> </table> </details> </li>\n<li> <details> <summary>Motorcycle</summary>\n<table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/2AxlesMotorcycle.png\" width=150 height=\"auto\"> </td> <td>2AxlesMotorcycle</td> <td>Motorcycle</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/3AxlesMotorcycle.png\" width=150 height=\"auto\"> </td> <td>3AxlesMotorcycle</td> <td>Motorcycle towing trailer</td> </tr> </table> </details> </li>\n<li> <details> <summary>Recreational Vehicle</summary>\n<table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/2AxlesRv.png\" width=150 height=\"auto\"> </td> <td>2AxlesRv</td> <td>RV</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/3AxlesRv.png\" width=150 height=\"auto\"> </td> <td>3AxlesRv</td> <td>RV towing 1-axle trailer</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/4AxlesRv.png\" width=150 height=\"auto\"> </td> <td>4AxlesRv</td> <td>RV towing 2-axle trailer</td> </tr> </table> </details> </li>\n<li> <details> <summary>Rideshare, Taxi, Carpool</summary>\n<table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/2AxlesTNC.png\" width=150 height=\"auto\"> </td> <td>2AxlesTNC</td> <td>Rideshare - Car, SUV or Pickup truck</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/2AxlesTNCPool.png\" width=150 height=\"auto\"> </td> <td>2AxlesTNCPool</td> <td>Rideshare Pool - Car, SUV or Pickup truck</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/2AxlesTaxi.png\" width=150 height=\"auto\"> </td> <td>2AxlesTaxi</td> <td>Taxi - Car, SUV or Pickup truck</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/2AxlesTaxiPool.png\" width=150 height=\"auto\"> </td> <td>2AxlesTaxiPool</td> <td>Taxi Pool - Car, SUV or Pickup truck</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/Carpool2.png\" width=150 height=\"auto\"> </td> <td>Carpool2</td> <td>Carpool (2 occupants)</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/North_America/Carpool3.png\" width=150 height=\"auto\"> </td> <td>Carpool3</td> <td>Carpool (3+ occupants)</td> </tr> </table> </details> </li> </ul> <blockquote cite=\"https://github.com/mapup/tollguru_country_coverage/wiki/Countries-supported-by-TollGuru\"> Country covered&#58; <blockquote> Bahamas, Belize, Canada, Costa Rica, Cuba, Dominican Republic, El Salvador, Guatemala, Honduras, Jamaica, Mexico, Nicaragua, Panama, Puerto Rico, United States of America </blockquote> </blockquote> </details>\n<!------------------------------------------------------------------------------> <!----------------------------------Europe--------------------------------------> <!------------------------------------------------------------------------------>\n<details> <summary><b>Europe</b></summary> <ul style=\"list-style-type:none;\"> <li> <details> <summary>Car and SUV</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Europe/2AxlesAuto.png\" width=150 height=\"auto\" </td> <td>2AxlesAuto</td> <td>Car, SUV</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Europe/3AxlesAuto.png\" width=150 height=\"auto\" </td> <td>3AxlesAuto</td> <td>Car, SUV towing 1-axle trailer</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Europe/4AxlesAuto.png\" width=150 height=\"auto\" </td> <td>4AxlesAuto</td> <td>Car, SUV towing 2-axle trailer</td> </tr> </table> </details> </li>\n<li> <details> <summary>Light goods vehicles</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Europe/2AxlesLGV.png\" width=150 height=\"auto\" </td> <td>2AxlesLGV</td> <td>Light goods vehicles 2-Axles</td> </tr> </table> </details> </li>\n<li> <details> <summary>Truck</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Europe/2AxlesTruck.png\" width=150 height=\"auto\" </td> <td>2AxlesTruck</td> <td>Heavy goods vehicles 2-Axles</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Europe/3AxlesTruck.png\" width=150 height=\"auto\" </td> <td>3AxlesTruck</td> <td>Truck - 3 Axles</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Europe/4AxlesTruck.png\" width=150 height=\"auto\" </td> <td>4AxlesTruck</td> <td>Truck - 4 Axles</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Europe/5AxlesTruck.png\" width=150 height=\"auto\" </td> <td>5AxlesTruck</td> <td>Truck - 5 Axles</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Europe/6AxlesTruck.png\" width=150 height=\"auto\" </td> <td>6AxlesTruck</td> <td>Truck - 6 Axles</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Europe/7AxlesTruck.png\" width=150 height=\"auto\" </td> <td>7AxlesTruck</td> <td>Truck - 7 Axles</td> </tr> </table> </details> </li>\n<li> <details> <summary>Bus</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Europe/2AxlesBus.png\" width=150 height=\"auto\" </td> <td>2AxlesBus</td> <td>Bus - 2 Axles</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Europe/3AxlesBus.png\" width=150 height=\"auto\" </td> <td>3AxlesBus</td> <td>Bus - 3 Axles</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Europe/4AxlesBus.png\" width=150 height=\"auto\" </td> <td>4AxlesBus</td> <td>Bus - 4 Axles</td> </tr> </table> </details> </li>\n<li> <details> <summary>Motorhome</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Europe/2AxlesRv.png\" width=150 height=\"auto\"> </td> <td>2AxlesRv</td> <td>Motorhome</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Europe/3AxlesRv.png\" width=150 height=\"auto\"> </td> <td>3AxlesRv</td> <td>Motorhome towing 1-axle trailer</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Europe/4AxlesRv.png\" width=150 height=\"auto\"> </td> <td>4AxlesRv</td> <td>Motorhome towing 2-axle trailer</td> </tr> </table> </details> </li>\n<li> <details> <summary>Motorcycle</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Europe/2AxlesMotorcycle.png\" width=150 height=\"auto\"> </td> <td>2AxlesMotorcycle</td> <td>Motorcycle, Motorcycle with sidecar</td> </tr> </table> </details> </li> </ul> <blockquote cite=\"https://github.com/mapup/tollguru_country_coverage/wiki/Countries-supported-by-TollGuru\"> Country covered&#58; <blockquote> Albania, Andorra, Austria, Belarus, Belgium, Bosnia and Herzegovina, Bulgaria, Croatia, Czechia, Denmark, Estonia, Finland, France, Germany, Greece, Hungary, Iceland, Ireland, Italy, Kosovo, Latvia, Liechtenstein, Lithuania, Luxembourg, Malta, Moldova, Monaco, Montenegro, Netherlands, North Macedonia, Norway, Poland, Portugal, Romania, Russia, Russia, San Marino, Serbia, Slovakia, Slovenia, Spain, Sweden, Switzerland, Turkey, Ukraine, United Kingdom </blockquote> </blockquote> </details>\n\n<!------------------------------------------------------------------------------> <!----------------------------------Australia-----------------------------------> <!------------------------------------------------------------------------------>\n<details> <summary><b>Australia</b></summary> <ul style=\"list-style-type:none;\"> <li> <details> <summary>Car, SUV</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Australia/2AxlesAuto.png\" width=150 height=\"auto\" </td> <td>2AxlesAuto</td> <td>Car, SUV</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Australia/AutoTrailerCatA.png\" width=150 height=\"auto\"> </td> <td>AutoTrailerCatA</td> <td>Car towing trailer (length<12.5 meter & height <2 meter)</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Australia/AutoTrailerCatB.png\" width=150 height=\"auto\"> </td> <td>AutoTrailerCatB</td> <td>Car towing trailer (length>12.5 meter & height >2 meter)</td> </tr> </table> </details> </li>\n<li> <details> <summary>Taxi</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Australia/2AxlesTaxi.png\" width=150 height=\"auto\" </td> <td>2AxlesTaxi</td> <td>Taxi</td> </tr> </table> </details> </li>\n<li> <details> <summary>Light Commercial Vehicle</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Australia/2AxlesLCV.png\" width=150 height=\"auto\" </td> <td>2AxlesLCV</td> <td>Light Commercial Vehicles</td> </tr> </table> </details> </li>\n<li> <details> <summary>Truck</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Australia/2AxlesTruck.png\" width=150 height=\"auto\" </td> <td>2AxlesTruck</td> <td>Truck 2-Axles, Rigid</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Australia/3AxlesTruck.png\" width=150 height=\"auto\" </td> <td>3AxlesTruck</td> <td>Truck 3-Axles, Rigid, Articulated</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Australia/4AxlesTruck.png\" width=150 height=\"auto\" </td> <td>4AxlesTruck</td> <td>Truck 4-Axles, Rigid, Articulated</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Australia/5AxlesTruck.png\" width=150 height=\"auto\" </td> <td>5AxlesTruck</td> <td>Truck 5-Axles, Articulated</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Australia/6AxlesTruck.png\" width=150 height=\"auto\" </td> <td>6AxlesTruck</td> <td>Truck 6-Axles, Articulated, B-Double</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Australia/7AxlesTruck.png\" width=150 height=\"auto\" </td> <td>7AxlesTruck</td> <td>Truck 7-Axles, Articulated, B-Double</td> </tr> </table> </details> </li>\n<li> <details> <summary>Bus</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Australia/2AxlesBus.png\" width=150 height=\"auto\" </td> <td>2AxlesBus</td> <td>Bus</td> </tr> </table> </details> </li>\n<li> <details> <summary>Recreational Vehicle</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Australia/RVCatA.png\" width=150 height=\"auto\" </td> <td>RVCatA</td> <td>RV (length < 12.5 meter & height < 2 meter)</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Australia/RVCatB.png\" width=150 height=\"auto\" </td> <td>RVCatB</td> <td>RV (length > 12.5 meter or height > 2 meter)</td> </tr> </table> </details> </li>\n<li> <details> <summary>Motorcycle</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Australia/2AxlesMotorcycle.png\" width=150 height=\"auto\"> </td> <td>2AxlesMotorcycle</td> <td>Motorcycle; with or without trailer</td> </tr> </table> </details> </li> </ul> <blockquote cite=\"https://github.com/mapup/tollguru_country_coverage/wiki/Countries-supported-by-TollGuru\"> Country covered&#58; <blockquote> Australia, New Zealand </blockquote> </blockquote> </details>\n\n<!------------------------------------------------------------------------------> <!----------------------------------Asia----------------------------------------> <!------------------------------------------------------------------------------>\n<details> <summary><b>Asia</b></summary> <ul style=\"list-style-type:none;\"> <li> <details> <summary>Car, Jeep, Van, SUV</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Asia/2AxlesAuto.png\" width=150 height=\"auto\"></td> <td>2AxlesAuto</td> <td>Car, Jeep, Van, SUV</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Asia/3AxlesAuto.png\" width=150 height=\"auto\"></td> <td>3AxlesAuto</td> <td>Car, SUV towing 1-axle trailer</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Asia/4AxlesAuto.png\" width=150 height=\"auto\"></td> <td>4AxlesAuto</td> <td>Car, SUV towing 2-axle trailer</td> </tr> </table> </details> </li>\n<li> <details> <summary>Taxi</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Asia/2AxleTaxi.png\" width=150 height=\"auto\"> </td> <td>2AxlesTaxi</td> <td>Taxi</td> </tr> </table> </details> </li>\n<li> <details> <summary>Pickup Truck, Light Commercial Vehicle</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Asia/2AxlesLCV.png\" width=150 height=\"auto\"> </td> <td>2AxlesLCV</td> <td>Pickup truck, Light Commercial Vehicles</td> </tr> </table> </details> </li>\n<li> <details> <summary>Truck</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Asia/2AxlesTruck.png\" width=150 height=\"auto\" </td> <td>2AxlesTruck</td> <td>Truck - 2-Axles <br> For India&#58; Truck with 2-Axle whose gross weight >12,000kgs & <=16,200kgs< /td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Asia/3Axles.png\" width=150 height=\"auto\"> </td> <td>3AxlesTruck</td> <td>Truck - 3 Axles <br> For India&#58; Truck with 3-Axle whose gross weight >16,200kgs & <=25,000kgs< /td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Asia/4Axles.png\" width=150 height=\"auto\"> </td> <td>4AxlesTruck</td> <td>Truck - 4 Axles <br> For India&#58; Truck with 4-Axle whose gross weight >25,000kgs & <=36,600kgs< /td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Asia/5Axles.png\" width=150 height=\"auto\"> </td> <td>5AxlesTruck</td> <td>Truck - 5 Axles <br> For India&#58; Truck with 5-Axle whose gross weight >36,600kgs & <=45,400kgs< /td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Asia/6Axles.png\" width=150 height=\"auto\"> </td> <td>6AxlesTruck</td> <td>Truck - 6 Axles <br> for India&#58; Truck with 6-Axle whose gross weight >45,400kgs & <=54,200kgs< /td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Asia/7Axles.png\" width=150 height=\"auto\"> </td> <td>7AxlesTruck</td> <td>Truck - 7 Axles <br> For India&#58; Truck with 7-Axle whose gross weight >54,200kgs </td> </tr> </table> </details> </li>\n<li> <details> <summary>Bus</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Asia/2AxlesBus.png\" width=150 height=\"auto\"> </td> <td>2AxlesBus</td> <td>Bus - 2-Axles</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Europe/3AxlesBus.png\" width=150 height=\"auto\" </td> <td>3AxlesBus</td> <td>Bus - 3 Axles</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Europe/4AxlesBus.png\" width=150 height=\"auto\" </td> <td>4AxlesBus</td> <td>Bus - 4 Axles</td> </tr> </table> </details> </li>\n<li> <details> <summary>Recreational Vehicle</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Europe/2AxlesRv.png\" width=150 height=\"auto\"> </td> <td>2AxlesRv</td> <td>Motorhome (not applicable to India)</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Europe/3AxlesRv.png\" width=150 height=\"auto\"> </td> <td>3AxlesRv</td> <td>Motorhome towing 1-axle trailer (not applicable to India)</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Europe/4AxlesRv.png\" width=150 height=\"auto\"> </td> <td>4AxlesRv</td> <td>Motorhome towing 2-axle trailer (not applicable to India)</td> </tr> </table> </details> </li>\n<li> <details> <summary>Heavy Construction Machinery and Earth Moving Equipment</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Asia/2AxlesHCMEME.png\" width=150 height=\"auto\" </td> <td>2AxlesHCMEME</td> <td>HCM, EME (applicable to India only)</td> </tr> </table> </details> </li>\n<li> <details> <summary>Bike</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Asia/2AxlesMotorcycle.png\" width=150 height=\"auto\" </td> <td>2AxlesMotorcycle</td> <td>Bike</td> </tr> </table> </details> </li> </ul> <blockquote cite=\"https://github.com/mapup/tollguru_country_coverage/wiki/Countries-supported-by-TollGuru\"> Country covered&#58; <blockquote> Bangladesh, India, Indonesia, Laos, Malaysia, Myanmar, Philipines, Singapore, Taiwan, Thailand, Vietnam </blockquote> </blockquote> </details>\n\n<!------------------------------------------------------------------------------> <!-----------------------------Latin America------------------------------------> <!------------------------------------------------------------------------------>\n<details> <summary><b>Latin America</b></summary> <ul style=\"list-style-type:none;\"> <li> <details> <summary>Car, SUV, Pickup truck</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Latin_America/2AxlesAuto.png\" width=150 height=\"auto\"> </td> <td>2AxlesAuto</td> <td>Car, SUV or Pickup truck</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Latin_America/3AxlesAuto.png\" width=150 height=\"auto\"> </td> <td>3AxlesAuto</td> <td>Car, SUV or Pickup truck towing 1-axle trailer</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Latin_America/4AxlesAuto.png\" width=150 height=\"auto\"> </td> <td>4AxlesAuto</td> <td>Car, SUV or Pickup truck towing 2-axle trailer</td> </tr> </table> </details> </li>\n<li> <details> <summary>Truck</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Latin_America/2AxlesTruck.png\" width=150 height=\"auto\"> </td> <td>2AxlesTruck</td> <td>Truck - 2 Axles</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Latin_America/3AxlesTruck.png\" width=150 height=\"auto\"> </td> <td>3AxlesTruck</td> <td>Truck - 3 Axles</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Latin_America/4AxlesTruck.png\" width=150 height=\"auto\"> </td> <td>4AxlesTruck</td> <td>Truck - 4 Axles</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Latin_America/5AxlesTruck.png\" width=150 height=\"auto\"> </td> <td>5AxlesTruck</td> <td>Truck - 5 Axles</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Latin_America/6AxlesTruck.png\" width=150 height=\"auto\"> </td> <td>6AxlesTruck</td> <td>Truck - 6 Axles</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Latin_America/7AxlesTruck.png\" width=150 height=\"auto\"> </td> <td>7AxlesTruck</td> <td>Truck - 7 Axles</td> </tr> </table> </details> </li>\n<li> <details> <summary>Bus</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Latin_America/2AxlesBus.png\" width=150 height=\"auto\"> </td> <td>2AxlesBus</td> <td>Bus - 2 Axles</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Latin_America/3AxlesBus.png\" width=150 height=\"auto\"> </td> <td>3AxlesBus</td> <td>Bus - 3 Axles</td> </tr> </table> </details> </li>\n<li> <details> <summary>Recreational Vehicle</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Latin_America/2AxlesRv.png\" width=150 height=\"auto\"> </td> <td>2AxlesRv</td> <td>RV</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Latin_America/3AxlesRv.png\" width=150 height=\"auto\"> </td> <td>3AxlesRv</td> <td>RV towing 1-axle trailer</td> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Latin_America/4AxlesRv.png\" width=150 height=\"auto\"> </td> <td>4AxlesRv</td> <td>RV towing 2-axle trailer</td> </tr> </table> </details> </li>\n<li> <details> <summary>Motorcycle</summary> <table> <tr> <th> Icon </th> <th> vehicleType </th> <th> Description </th> </tr> <tr> <td><img src=\"https://cdn.tollguru.com/github/Latin_America/2AxlesMotorcycle.png\" width=150 height=\"auto\"> </td> <td>2AxlesMotorcycle</td> <td>Motorcycle</td> </tr> </table> </details> </li> </ul> <blockquote cite=\"https://github.com/mapup/tollguru_country_coverage/wiki/Countries-supported-by-TollGuru\"> Country covered&#58; <blockquote> Argentina, Bolivia, Brazil, Chile, Colombia, Ecuador, Falkland Islands, French Guiana, Guyana, Paraguay, Peru, Suriname, Uruguay, Venezuela </blockquote> </blockquote> </details>"
    }
  ],
  "paths": {
    "/getUsage": {
      "get": {
        "tags": [
          "Transaction Count API"
        ],
        "summary": "Retrieves total number of transactions processed.",
        "description": "<ul> <li>Authentication and authorization are required to use the API, which is done by providing an API key.</li> <li>Developers can make requests to the API and specify the start and end dates to retrieve the transaction count for a desired time period.</li> <li>The API response is typically in JSON format.</li> <li>The response includes the total number of transactions processed for each day in the specified time period.</li> </ul>'",
        "parameters": [
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "Number",
              "description": "Timestamp (epoch) in seconds"
            },
            "example": 1681627076
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "Number",
              "description": "Timestamp (epoch) in seconds"
            },
            "example": 1682491124
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transactionCountResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "C + Libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://apis.tollguru.com/getUsage?startTime=SOME_NUMBER_VALUE&endTime=SOME_NUMBER_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"x-api-key: REPLACE_KEY_VALUE\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://apis.tollguru.com/getUsage?startTime=SOME_NUMBER_VALUE&endTime=SOME_NUMBER_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"x-api-key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.tollguru.com/getUsage?startTime=SOME_NUMBER_VALUE&endTime=SOME_NUMBER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"x-api-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java + Okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://apis.tollguru.com/getUsage?startTime=SOME_NUMBER_VALUE&endTime=SOME_NUMBER_VALUE\")\n  .get()\n  .addHeader(\"x-api-key\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://apis.tollguru.com/getUsage?startTime=SOME_NUMBER_VALUE&endTime=SOME_NUMBER_VALUE\")\n  .header(\"x-api-key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Javascript + Jquery",
            "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://apis.tollguru.com/getUsage?startTime=SOME_NUMBER_VALUE&endTime=SOME_NUMBER_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"x-api-key\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://apis.tollguru.com/getUsage?startTime=SOME_NUMBER_VALUE&endTime=SOME_NUMBER_VALUE\");\nxhr.setRequestHeader(\"x-api-key\", \"REPLACE_KEY_VALUE\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"apis.tollguru.com\",\n  \"port\": null,\n  \"path\": \"/getUsage?startTime=SOME_NUMBER_VALUE&endTime=SOME_NUMBER_VALUE\",\n  \"headers\": {\n    \"x-api-key\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://apis.tollguru.com/getUsage',\n  qs: {startTime: 'SOME_NUMBER_VALUE', endTime: 'SOME_NUMBER_VALUE'},\n  headers: {'x-api-key': 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node + Unirest",
            "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://apis.tollguru.com/getUsage\");\n\nreq.query({\n  \"startTime\": \"SOME_NUMBER_VALUE\",\n  \"endTime\": \"SOME_NUMBER_VALUE\"\n});\n\nreq.headers({\n  \"x-api-key\": \"REPLACE_KEY_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc + Nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"x-api-key\": @\"REPLACE_KEY_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://apis.tollguru.com/getUsage?startTime=SOME_NUMBER_VALUE&endTime=SOME_NUMBER_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml + Cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://apis.tollguru.com/getUsage?startTime=SOME_NUMBER_VALUE&endTime=SOME_NUMBER_VALUE\" in\nlet headers = Header.add (Header.init ()) \"x-api-key\" \"REPLACE_KEY_VALUE\" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://apis.tollguru.com/getUsage?startTime=SOME_NUMBER_VALUE&endTime=SOME_NUMBER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"x-api-key: REPLACE_KEY_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://apis.tollguru.com/getUsage');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'startTime' => 'SOME_NUMBER_VALUE',\n  'endTime' => 'SOME_NUMBER_VALUE'\n]);\n\n$request->setHeaders([\n  'x-api-key' => 'REPLACE_KEY_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://apis.tollguru.com/getUsage');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'startTime' => 'SOME_NUMBER_VALUE',\n  'endTime' => 'SOME_NUMBER_VALUE'\n]));\n\n$request->setHeaders([\n  'x-api-key' => 'REPLACE_KEY_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"apis.tollguru.com\")\n\nheaders = { 'x-api-key': \"REPLACE_KEY_VALUE\" }\n\nconn.request(\"GET\", \"/getUsage?startTime=SOME_NUMBER_VALUE&endTime=SOME_NUMBER_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python + Requests",
            "source": "import requests\n\nurl = \"https://apis.tollguru.com/getUsage\"\n\nquerystring = {\"startTime\":\"SOME_NUMBER_VALUE\",\"endTime\":\"SOME_NUMBER_VALUE\"}\n\nheaders = {\"x-api-key\": \"REPLACE_KEY_VALUE\"}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://apis.tollguru.com/getUsage?startTime=SOME_NUMBER_VALUE&endTime=SOME_NUMBER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"x-api-key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://apis.tollguru.com/getUsage?startTime=SOME_NUMBER_VALUE&endTime=SOME_NUMBER_VALUE' \\\n  --header 'x-api-key: REPLACE_KEY_VALUE'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET 'https://apis.tollguru.com/getUsage?startTime=SOME_NUMBER_VALUE&endTime=SOME_NUMBER_VALUE' \\\n  x-api-key:REPLACE_KEY_VALUE"
          },
          {
            "lang": "Shell + Wget",
            "source": "wget --quiet \\\n  --method GET \\\n  --header 'x-api-key: REPLACE_KEY_VALUE' \\\n  --output-document \\\n  - 'https://apis.tollguru.com/getUsage?startTime=SOME_NUMBER_VALUE&endTime=SOME_NUMBER_VALUE'"
          },
          {
            "lang": "Swift + Nsurlsession",
            "source": "import Foundation\n\nlet headers = [\"x-api-key\": \"REPLACE_KEY_VALUE\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://apis.tollguru.com/getUsage?startTime=SOME_NUMBER_VALUE&endTime=SOME_NUMBER_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
          }
        ]
      }
    },
    "/toll/v2/origin-destination-waypoints": {
      "post": {
        "tags": [
          "Tolls between Origin, destination, waypoints"
        ],
        "summary": "Tolls between origin, destination, and waypoints (if any)",
        "description": "If you are looking for toll information for routes that consider bridge height restrictions, axle count, weight restrictions, HAZMAT restrictions, we suggest that you use HERE maps (we use HERE maps by default). Specifically, with the HERE maps API service, you can <ul> <li>Specify origins, destinations, and waypoints as text strings (e.g. “Dallas, TX”, “Sydney, NSW, Australia”, “Paris, France” or “Jaipur, Rajasthan, India”), as place IDs, or as latitude/longitude coordinates</li> <li>Specify origin, destination, and waypoints as zip codes (followed by country code or name)</li> <li>Specify vehicle type. The route and tolls are returned for the specific vehicle. For example, you can get tolls for vehicles based on axle count (cars, SUV, pick-up, truck, motorcycle, bus, motorhome / RV, limousine.</li> <li>The response will include toll information, fuel cost information, duration  </li> </ul>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MinimalRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HERE_OtherVehicleTypes"
                }
              }
            }
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "C + Libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://apis.tollguru.com/toll/v2/origin-destination-waypoints\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\nheaders = curl_slist_append(headers, \"x-api-key: REPLACE_KEY_VALUE\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"}}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://apis.tollguru.com/toll/v2/origin-destination-waypoints\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"x-api-key\", \"REPLACE_KEY_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.tollguru.com/toll/v2/origin-destination-waypoints\"\n\n\tpayload := strings.NewReader(\"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"x-api-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java + Okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https://apis.tollguru.com/toll/v2/origin-destination-waypoints\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"x-api-key\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://apis.tollguru.com/toll/v2/origin-destination-waypoints\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"x-api-key\", \"REPLACE_KEY_VALUE\")\n  .body(\"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"}}\")\n  .asString();"
          },
          {
            "lang": "Javascript + Jquery",
            "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://apis.tollguru.com/toll/v2/origin-destination-waypoints\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"x-api-key\": \"REPLACE_KEY_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = JSON.stringify({\n  \"from\": {\n    \"address\": \"Philadelphia , Pennsylvania,\",\n    \"lat\": 39.95209,\n    \"lng\": -75.16219\n  },\n  \"to\": {\n    \"address\": \"New York ,NY,\",\n    \"lat\": 40.71455,\n    \"lng\": -74.00715\n  },\n  \"waypoints\": [\n    {\n      \"address\": \"Bridgewater Township , New Jersey\"\n    }\n  ],\n  \"serviceProvider\": \"here\",\n  \"vehicle\": {\n    \"type\": \"2AxlesTaxi\",\n    \"weight\": {\n      \"value\": 20000,\n      \"unit\": \"pound\"\n    },\n    \"height\": {\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    },\n    \"length\": {\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    },\n    \"axles\": 4,\n    \"emissionClass\": \"euro_5\"\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://apis.tollguru.com/toll/v2/origin-destination-waypoints\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"x-api-key\", \"REPLACE_KEY_VALUE\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"apis.tollguru.com\",\n  \"port\": null,\n  \"path\": \"/toll/v2/origin-destination-waypoints\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"x-api-key\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  from: {address: 'Philadelphia , Pennsylvania,', lat: 39.95209, lng: -75.16219},\n  to: {address: 'New York ,NY,', lat: 40.71455, lng: -74.00715},\n  waypoints: [{address: 'Bridgewater Township , New Jersey'}],\n  serviceProvider: 'here',\n  vehicle: {\n    type: '2AxlesTaxi',\n    weight: {value: 20000, unit: 'pound'},\n    height: {value: 7.5, unit: 'meter'},\n    length: {value: 7.5, unit: 'meter'},\n    axles: 4,\n    emissionClass: 'euro_5'\n  }\n}));\nreq.end();"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://apis.tollguru.com/toll/v2/origin-destination-waypoints',\n  headers: {'content-type': 'application/json', 'x-api-key': 'REPLACE_KEY_VALUE'},\n  body: {\n    from: {address: 'Philadelphia , Pennsylvania,', lat: 39.95209, lng: -75.16219},\n    to: {address: 'New York ,NY,', lat: 40.71455, lng: -74.00715},\n    waypoints: [{address: 'Bridgewater Township , New Jersey'}],\n    serviceProvider: 'here',\n    vehicle: {\n      type: '2AxlesTaxi',\n      weight: {value: 20000, unit: 'pound'},\n      height: {value: 7.5, unit: 'meter'},\n      length: {value: 7.5, unit: 'meter'},\n      axles: 4,\n      emissionClass: 'euro_5'\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node + Unirest",
            "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://apis.tollguru.com/toll/v2/origin-destination-waypoints\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"x-api-key\": \"REPLACE_KEY_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"from\": {\n    \"address\": \"Philadelphia , Pennsylvania,\",\n    \"lat\": 39.95209,\n    \"lng\": -75.16219\n  },\n  \"to\": {\n    \"address\": \"New York ,NY,\",\n    \"lat\": 40.71455,\n    \"lng\": -74.00715\n  },\n  \"waypoints\": [\n    {\n      \"address\": \"Bridgewater Township , New Jersey\"\n    }\n  ],\n  \"serviceProvider\": \"here\",\n  \"vehicle\": {\n    \"type\": \"2AxlesTaxi\",\n    \"weight\": {\n      \"value\": 20000,\n      \"unit\": \"pound\"\n    },\n    \"height\": {\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    },\n    \"length\": {\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    },\n    \"axles\": 4,\n    \"emissionClass\": \"euro_5\"\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc + Nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"x-api-key\": @\"REPLACE_KEY_VALUE\" };\nNSDictionary *parameters = @{ @\"from\": @{ @\"address\": @\"Philadelphia , Pennsylvania,\", @\"lat\": @39.95209, @\"lng\": @-75.16219 },\n                              @\"to\": @{ @\"address\": @\"New York ,NY,\", @\"lat\": @40.71455, @\"lng\": @-74.00715 },\n                              @\"waypoints\": @[ @{ @\"address\": @\"Bridgewater Township , New Jersey\" } ],\n                              @\"serviceProvider\": @\"here\",\n                              @\"vehicle\": @{ @\"type\": @\"2AxlesTaxi\", @\"weight\": @{ @\"value\": @20000, @\"unit\": @\"pound\" }, @\"height\": @{ @\"value\": @7.5, @\"unit\": @\"meter\" }, @\"length\": @{ @\"value\": @7.5, @\"unit\": @\"meter\" }, @\"axles\": @4, @\"emissionClass\": @\"euro_5\" } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://apis.tollguru.com/toll/v2/origin-destination-waypoints\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml + Cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://apis.tollguru.com/toll/v2/origin-destination-waypoints\" in\nlet headers = Header.add_list (Header.init ()) [\n  (\"content-type\", \"application/json\");\n  (\"x-api-key\", \"REPLACE_KEY_VALUE\");\n] in\nlet body = Cohttp_lwt_body.of_string \"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"}}\" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://apis.tollguru.com/toll/v2/origin-destination-waypoints\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"content-type: application/json\",\n    \"x-api-key: REPLACE_KEY_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://apis.tollguru.com/toll/v2/origin-destination-waypoints');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'x-api-key' => 'REPLACE_KEY_VALUE'\n]);\n\n$request->setBody('{\"from\":{\"address\":\"Philadelphia , Pennsylvania,\",\"lat\":39.95209,\"lng\":-75.16219},\"to\":{\"address\":\"New York ,NY,\",\"lat\":40.71455,\"lng\":-74.00715},\"waypoints\":[{\"address\":\"Bridgewater Township , New Jersey\"}],\"serviceProvider\":\"here\",\"vehicle\":{\"type\":\"2AxlesTaxi\",\"weight\":{\"value\":20000,\"unit\":\"pound\"},\"height\":{\"value\":7.5,\"unit\":\"meter\"},\"length\":{\"value\":7.5,\"unit\":\"meter\"},\"axles\":4,\"emissionClass\":\"euro_5\"}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"from\":{\"address\":\"Philadelphia , Pennsylvania,\",\"lat\":39.95209,\"lng\":-75.16219},\"to\":{\"address\":\"New York ,NY,\",\"lat\":40.71455,\"lng\":-74.00715},\"waypoints\":[{\"address\":\"Bridgewater Township , New Jersey\"}],\"serviceProvider\":\"here\",\"vehicle\":{\"type\":\"2AxlesTaxi\",\"weight\":{\"value\":20000,\"unit\":\"pound\"},\"height\":{\"value\":7.5,\"unit\":\"meter\"},\"length\":{\"value\":7.5,\"unit\":\"meter\"},\"axles\":4,\"emissionClass\":\"euro_5\"}}');\n\n$request->setRequestUrl('https://apis.tollguru.com/toll/v2/origin-destination-waypoints');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'x-api-key' => 'REPLACE_KEY_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"apis.tollguru.com\")\n\npayload = \"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'x-api-key': \"REPLACE_KEY_VALUE\"\n    }\n\nconn.request(\"POST\", \"/toll/v2/origin-destination-waypoints\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python + Requests",
            "source": "import requests\n\nurl = \"https://apis.tollguru.com/toll/v2/origin-destination-waypoints\"\n\npayload = {\n    \"from\": {\n        \"address\": \"Philadelphia , Pennsylvania,\",\n        \"lat\": 39.95209,\n        \"lng\": -75.16219\n    },\n    \"to\": {\n        \"address\": \"New York ,NY,\",\n        \"lat\": 40.71455,\n        \"lng\": -74.00715\n    },\n    \"waypoints\": [{\"address\": \"Bridgewater Township , New Jersey\"}],\n    \"serviceProvider\": \"here\",\n    \"vehicle\": {\n        \"type\": \"2AxlesTaxi\",\n        \"weight\": {\n            \"value\": 20000,\n            \"unit\": \"pound\"\n        },\n        \"height\": {\n            \"value\": 7.5,\n            \"unit\": \"meter\"\n        },\n        \"length\": {\n            \"value\": 7.5,\n            \"unit\": \"meter\"\n        },\n        \"axles\": 4,\n        \"emissionClass\": \"euro_5\"\n    }\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"x-api-key\": \"REPLACE_KEY_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://apis.tollguru.com/toll/v2/origin-destination-waypoints\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"x-api-key\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://apis.tollguru.com/toll/v2/origin-destination-waypoints \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: REPLACE_KEY_VALUE' \\\n  --data '{\"from\":{\"address\":\"Philadelphia , Pennsylvania,\",\"lat\":39.95209,\"lng\":-75.16219},\"to\":{\"address\":\"New York ,NY,\",\"lat\":40.71455,\"lng\":-74.00715},\"waypoints\":[{\"address\":\"Bridgewater Township , New Jersey\"}],\"serviceProvider\":\"here\",\"vehicle\":{\"type\":\"2AxlesTaxi\",\"weight\":{\"value\":20000,\"unit\":\"pound\"},\"height\":{\"value\":7.5,\"unit\":\"meter\"},\"length\":{\"value\":7.5,\"unit\":\"meter\"},\"axles\":4,\"emissionClass\":\"euro_5\"}}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"from\":{\"address\":\"Philadelphia , Pennsylvania,\",\"lat\":39.95209,\"lng\":-75.16219},\"to\":{\"address\":\"New York ,NY,\",\"lat\":40.71455,\"lng\":-74.00715},\"waypoints\":[{\"address\":\"Bridgewater Township , New Jersey\"}],\"serviceProvider\":\"here\",\"vehicle\":{\"type\":\"2AxlesTaxi\",\"weight\":{\"value\":20000,\"unit\":\"pound\"},\"height\":{\"value\":7.5,\"unit\":\"meter\"},\"length\":{\"value\":7.5,\"unit\":\"meter\"},\"axles\":4,\"emissionClass\":\"euro_5\"}}' |  \\\n  http POST https://apis.tollguru.com/toll/v2/origin-destination-waypoints \\\n  content-type:application/json \\\n  x-api-key:REPLACE_KEY_VALUE"
          },
          {
            "lang": "Shell + Wget",
            "source": "wget --quiet \\\n  --method POST \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: REPLACE_KEY_VALUE' \\\n  --body-data '{\"from\":{\"address\":\"Philadelphia , Pennsylvania,\",\"lat\":39.95209,\"lng\":-75.16219},\"to\":{\"address\":\"New York ,NY,\",\"lat\":40.71455,\"lng\":-74.00715},\"waypoints\":[{\"address\":\"Bridgewater Township , New Jersey\"}],\"serviceProvider\":\"here\",\"vehicle\":{\"type\":\"2AxlesTaxi\",\"weight\":{\"value\":20000,\"unit\":\"pound\"},\"height\":{\"value\":7.5,\"unit\":\"meter\"},\"length\":{\"value\":7.5,\"unit\":\"meter\"},\"axles\":4,\"emissionClass\":\"euro_5\"}}' \\\n  --output-document \\\n  - https://apis.tollguru.com/toll/v2/origin-destination-waypoints"
          },
          {
            "lang": "Swift + Nsurlsession",
            "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"x-api-key\": \"REPLACE_KEY_VALUE\"\n]\nlet parameters = [\n  \"from\": [\n    \"address\": \"Philadelphia , Pennsylvania,\",\n    \"lat\": 39.95209,\n    \"lng\": -75.16219\n  ],\n  \"to\": [\n    \"address\": \"New York ,NY,\",\n    \"lat\": 40.71455,\n    \"lng\": -74.00715\n  ],\n  \"waypoints\": [[\"address\": \"Bridgewater Township , New Jersey\"]],\n  \"serviceProvider\": \"here\",\n  \"vehicle\": [\n    \"type\": \"2AxlesTaxi\",\n    \"weight\": [\n      \"value\": 20000,\n      \"unit\": \"pound\"\n    ],\n    \"height\": [\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    ],\n    \"length\": [\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    ],\n    \"axles\": 4,\n    \"emissionClass\": \"euro_5\"\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://apis.tollguru.com/toll/v2/origin-destination-waypoints\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
          }
        ]
      }
    },
    "/toll/v2/origin-destination-waypoints/#": {
      "post": {
        "tags": [
          "Tolls between Origin, destination, waypoints"
        ],
        "summary": "Tolls for truck",
        "description": "For truck routes you can specify restrictions - bridge height restrictions, axle count, weight restrictions, HAZMAT restrictions - to receive truck compliant routes. But you don’t need to send all the parameters. You can <ul> <li>Specify origins, destinations, and waypoints as text strings (e.g. “Dallas, TX”), as place IDs, or as latitude/longitude coordinates</li> <li>Specify origin, destination, and waypoints as zip codes (followed by country code or name)</li> <li>Specify truck type by changing the number of axles and other parameters such as weight, height, etc.</li> <li>The response will include toll information, fuel cost information, duration</li> </ul> For trucks, you will receive <ul> <li>Tolls between zip codes (zip code followed by country name)</li> <li>Truck compliant routes (based on axle count, height, weight, truck length.</li> <li>ETA that accounts for Hours-of-service (HOS) compliance</li> <li>State mileage for IFTA reporting</li> </ul>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Trucks Minimal Request Body"
                  },
                  {
                    "$ref": "#/components/schemas/Trucks Optional Request Body"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HERE_Truck"
                }
              }
            }
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "C + Libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://apis.tollguru.com/toll/v2/origin-destination-waypoints/#\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\nheaders = curl_slist_append(headers, \"x-api-key: REPLACE_KEY_VALUE\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTruck\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"}}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://apis.tollguru.com/toll/v2/origin-destination-waypoints/#\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"x-api-key\", \"REPLACE_KEY_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTruck\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.tollguru.com/toll/v2/origin-destination-waypoints/#\"\n\n\tpayload := strings.NewReader(\"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTruck\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"x-api-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java + Okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTruck\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https://apis.tollguru.com/toll/v2/origin-destination-waypoints/#\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"x-api-key\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://apis.tollguru.com/toll/v2/origin-destination-waypoints/#\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"x-api-key\", \"REPLACE_KEY_VALUE\")\n  .body(\"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTruck\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"}}\")\n  .asString();"
          },
          {
            "lang": "Javascript + Jquery",
            "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://apis.tollguru.com/toll/v2/origin-destination-waypoints/#\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"x-api-key\": \"REPLACE_KEY_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTruck\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = JSON.stringify({\n  \"from\": {\n    \"address\": \"Philadelphia , Pennsylvania,\",\n    \"lat\": 39.95209,\n    \"lng\": -75.16219\n  },\n  \"to\": {\n    \"address\": \"New York ,NY,\",\n    \"lat\": 40.71455,\n    \"lng\": -74.00715\n  },\n  \"waypoints\": [\n    {\n      \"address\": \"Bridgewater Township , New Jersey\"\n    }\n  ],\n  \"serviceProvider\": \"here\",\n  \"vehicle\": {\n    \"type\": \"2AxlesTruck\",\n    \"weight\": {\n      \"value\": 20000,\n      \"unit\": \"pound\"\n    },\n    \"height\": {\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    },\n    \"length\": {\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    },\n    \"axles\": 4,\n    \"emissionClass\": \"euro_5\"\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://apis.tollguru.com/toll/v2/origin-destination-waypoints/#\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"x-api-key\", \"REPLACE_KEY_VALUE\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"apis.tollguru.com\",\n  \"port\": null,\n  \"path\": \"/toll/v2/origin-destination-waypoints/\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"x-api-key\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  from: {address: 'Philadelphia , Pennsylvania,', lat: 39.95209, lng: -75.16219},\n  to: {address: 'New York ,NY,', lat: 40.71455, lng: -74.00715},\n  waypoints: [{address: 'Bridgewater Township , New Jersey'}],\n  serviceProvider: 'here',\n  vehicle: {\n    type: '2AxlesTruck',\n    weight: {value: 20000, unit: 'pound'},\n    height: {value: 7.5, unit: 'meter'},\n    length: {value: 7.5, unit: 'meter'},\n    axles: 4,\n    emissionClass: 'euro_5'\n  }\n}));\nreq.end();"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://apis.tollguru.com/toll/v2/origin-destination-waypoints/#',\n  headers: {'content-type': 'application/json', 'x-api-key': 'REPLACE_KEY_VALUE'},\n  body: {\n    from: {address: 'Philadelphia , Pennsylvania,', lat: 39.95209, lng: -75.16219},\n    to: {address: 'New York ,NY,', lat: 40.71455, lng: -74.00715},\n    waypoints: [{address: 'Bridgewater Township , New Jersey'}],\n    serviceProvider: 'here',\n    vehicle: {\n      type: '2AxlesTruck',\n      weight: {value: 20000, unit: 'pound'},\n      height: {value: 7.5, unit: 'meter'},\n      length: {value: 7.5, unit: 'meter'},\n      axles: 4,\n      emissionClass: 'euro_5'\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node + Unirest",
            "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://apis.tollguru.com/toll/v2/origin-destination-waypoints/#\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"x-api-key\": \"REPLACE_KEY_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"from\": {\n    \"address\": \"Philadelphia , Pennsylvania,\",\n    \"lat\": 39.95209,\n    \"lng\": -75.16219\n  },\n  \"to\": {\n    \"address\": \"New York ,NY,\",\n    \"lat\": 40.71455,\n    \"lng\": -74.00715\n  },\n  \"waypoints\": [\n    {\n      \"address\": \"Bridgewater Township , New Jersey\"\n    }\n  ],\n  \"serviceProvider\": \"here\",\n  \"vehicle\": {\n    \"type\": \"2AxlesTruck\",\n    \"weight\": {\n      \"value\": 20000,\n      \"unit\": \"pound\"\n    },\n    \"height\": {\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    },\n    \"length\": {\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    },\n    \"axles\": 4,\n    \"emissionClass\": \"euro_5\"\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc + Nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"x-api-key\": @\"REPLACE_KEY_VALUE\" };\nNSDictionary *parameters = @{ @\"from\": @{ @\"address\": @\"Philadelphia , Pennsylvania,\", @\"lat\": @39.95209, @\"lng\": @-75.16219 },\n                              @\"to\": @{ @\"address\": @\"New York ,NY,\", @\"lat\": @40.71455, @\"lng\": @-74.00715 },\n                              @\"waypoints\": @[ @{ @\"address\": @\"Bridgewater Township , New Jersey\" } ],\n                              @\"serviceProvider\": @\"here\",\n                              @\"vehicle\": @{ @\"type\": @\"2AxlesTruck\", @\"weight\": @{ @\"value\": @20000, @\"unit\": @\"pound\" }, @\"height\": @{ @\"value\": @7.5, @\"unit\": @\"meter\" }, @\"length\": @{ @\"value\": @7.5, @\"unit\": @\"meter\" }, @\"axles\": @4, @\"emissionClass\": @\"euro_5\" } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://apis.tollguru.com/toll/v2/origin-destination-waypoints/#\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml + Cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://apis.tollguru.com/toll/v2/origin-destination-waypoints/#\" in\nlet headers = Header.add_list (Header.init ()) [\n  (\"content-type\", \"application/json\");\n  (\"x-api-key\", \"REPLACE_KEY_VALUE\");\n] in\nlet body = Cohttp_lwt_body.of_string \"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTruck\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"}}\" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://apis.tollguru.com/toll/v2/origin-destination-waypoints/#\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTruck\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"content-type: application/json\",\n    \"x-api-key: REPLACE_KEY_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://apis.tollguru.com/toll/v2/origin-destination-waypoints/#');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'x-api-key' => 'REPLACE_KEY_VALUE'\n]);\n\n$request->setBody('{\"from\":{\"address\":\"Philadelphia , Pennsylvania,\",\"lat\":39.95209,\"lng\":-75.16219},\"to\":{\"address\":\"New York ,NY,\",\"lat\":40.71455,\"lng\":-74.00715},\"waypoints\":[{\"address\":\"Bridgewater Township , New Jersey\"}],\"serviceProvider\":\"here\",\"vehicle\":{\"type\":\"2AxlesTruck\",\"weight\":{\"value\":20000,\"unit\":\"pound\"},\"height\":{\"value\":7.5,\"unit\":\"meter\"},\"length\":{\"value\":7.5,\"unit\":\"meter\"},\"axles\":4,\"emissionClass\":\"euro_5\"}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"from\":{\"address\":\"Philadelphia , Pennsylvania,\",\"lat\":39.95209,\"lng\":-75.16219},\"to\":{\"address\":\"New York ,NY,\",\"lat\":40.71455,\"lng\":-74.00715},\"waypoints\":[{\"address\":\"Bridgewater Township , New Jersey\"}],\"serviceProvider\":\"here\",\"vehicle\":{\"type\":\"2AxlesTruck\",\"weight\":{\"value\":20000,\"unit\":\"pound\"},\"height\":{\"value\":7.5,\"unit\":\"meter\"},\"length\":{\"value\":7.5,\"unit\":\"meter\"},\"axles\":4,\"emissionClass\":\"euro_5\"}}');\n\n$request->setRequestUrl('https://apis.tollguru.com/toll/v2/origin-destination-waypoints/#');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'x-api-key' => 'REPLACE_KEY_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"apis.tollguru.com\")\n\npayload = \"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTruck\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'x-api-key': \"REPLACE_KEY_VALUE\"\n    }\n\nconn.request(\"POST\", \"/toll/v2/origin-destination-waypoints/\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python + Requests",
            "source": "import requests\n\nurl = \"https://apis.tollguru.com/toll/v2/origin-destination-waypoints/#\"\n\npayload = {\n    \"from\": {\n        \"address\": \"Philadelphia , Pennsylvania,\",\n        \"lat\": 39.95209,\n        \"lng\": -75.16219\n    },\n    \"to\": {\n        \"address\": \"New York ,NY,\",\n        \"lat\": 40.71455,\n        \"lng\": -74.00715\n    },\n    \"waypoints\": [{\"address\": \"Bridgewater Township , New Jersey\"}],\n    \"serviceProvider\": \"here\",\n    \"vehicle\": {\n        \"type\": \"2AxlesTruck\",\n        \"weight\": {\n            \"value\": 20000,\n            \"unit\": \"pound\"\n        },\n        \"height\": {\n            \"value\": 7.5,\n            \"unit\": \"meter\"\n        },\n        \"length\": {\n            \"value\": 7.5,\n            \"unit\": \"meter\"\n        },\n        \"axles\": 4,\n        \"emissionClass\": \"euro_5\"\n    }\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"x-api-key\": \"REPLACE_KEY_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://apis.tollguru.com/toll/v2/origin-destination-waypoints/#\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"x-api-key\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTruck\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url 'https://apis.tollguru.com/toll/v2/origin-destination-waypoints/#' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: REPLACE_KEY_VALUE' \\\n  --data '{\"from\":{\"address\":\"Philadelphia , Pennsylvania,\",\"lat\":39.95209,\"lng\":-75.16219},\"to\":{\"address\":\"New York ,NY,\",\"lat\":40.71455,\"lng\":-74.00715},\"waypoints\":[{\"address\":\"Bridgewater Township , New Jersey\"}],\"serviceProvider\":\"here\",\"vehicle\":{\"type\":\"2AxlesTruck\",\"weight\":{\"value\":20000,\"unit\":\"pound\"},\"height\":{\"value\":7.5,\"unit\":\"meter\"},\"length\":{\"value\":7.5,\"unit\":\"meter\"},\"axles\":4,\"emissionClass\":\"euro_5\"}}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"from\":{\"address\":\"Philadelphia , Pennsylvania,\",\"lat\":39.95209,\"lng\":-75.16219},\"to\":{\"address\":\"New York ,NY,\",\"lat\":40.71455,\"lng\":-74.00715},\"waypoints\":[{\"address\":\"Bridgewater Township , New Jersey\"}],\"serviceProvider\":\"here\",\"vehicle\":{\"type\":\"2AxlesTruck\",\"weight\":{\"value\":20000,\"unit\":\"pound\"},\"height\":{\"value\":7.5,\"unit\":\"meter\"},\"length\":{\"value\":7.5,\"unit\":\"meter\"},\"axles\":4,\"emissionClass\":\"euro_5\"}}' |  \\\n  http POST 'https://apis.tollguru.com/toll/v2/origin-destination-waypoints/#' \\\n  content-type:application/json \\\n  x-api-key:REPLACE_KEY_VALUE"
          },
          {
            "lang": "Shell + Wget",
            "source": "wget --quiet \\\n  --method POST \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: REPLACE_KEY_VALUE' \\\n  --body-data '{\"from\":{\"address\":\"Philadelphia , Pennsylvania,\",\"lat\":39.95209,\"lng\":-75.16219},\"to\":{\"address\":\"New York ,NY,\",\"lat\":40.71455,\"lng\":-74.00715},\"waypoints\":[{\"address\":\"Bridgewater Township , New Jersey\"}],\"serviceProvider\":\"here\",\"vehicle\":{\"type\":\"2AxlesTruck\",\"weight\":{\"value\":20000,\"unit\":\"pound\"},\"height\":{\"value\":7.5,\"unit\":\"meter\"},\"length\":{\"value\":7.5,\"unit\":\"meter\"},\"axles\":4,\"emissionClass\":\"euro_5\"}}' \\\n  --output-document \\\n  - 'https://apis.tollguru.com/toll/v2/origin-destination-waypoints/#'"
          },
          {
            "lang": "Swift + Nsurlsession",
            "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"x-api-key\": \"REPLACE_KEY_VALUE\"\n]\nlet parameters = [\n  \"from\": [\n    \"address\": \"Philadelphia , Pennsylvania,\",\n    \"lat\": 39.95209,\n    \"lng\": -75.16219\n  ],\n  \"to\": [\n    \"address\": \"New York ,NY,\",\n    \"lat\": 40.71455,\n    \"lng\": -74.00715\n  ],\n  \"waypoints\": [[\"address\": \"Bridgewater Township , New Jersey\"]],\n  \"serviceProvider\": \"here\",\n  \"vehicle\": [\n    \"type\": \"2AxlesTruck\",\n    \"weight\": [\n      \"value\": 20000,\n      \"unit\": \"pound\"\n    ],\n    \"height\": [\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    ],\n    \"length\": [\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    ],\n    \"axles\": 4,\n    \"emissionClass\": \"euro_5\"\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://apis.tollguru.com/toll/v2/origin-destination-waypoints/#\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
          }
        ]
      }
    },
    "/toll/v2/origin-destination-waypoints/##": {
      "post": {
        "tags": [
          "Tolls between Origin, destination, waypoints"
        ],
        "summary": "Tolls for routes with optional parameters",
        "description": "You can specify truck restrictions - bridge height, weight restrictions, HAZMAT restrictions - to receive truck compliant routes. <ul> <li>Specify origins, destinations, and waypoints as text strings (e.g. “Dallas, TX”), as place IDs, or as latitude / longitude coordinates</li> <li>Specify origin, destination, and waypoints as zip codes (followed by country code or name)</li> <li>Specify truck type by changing the number of axles and other parameters such as weight, height, etc.</li> <li>Specify route restrictions such as HAZMAT material and tunnel types for trucks</li> <li>Specify weight and height for semi and large commercial trucks.</li> <li>Specify departure time (optional). You can use future departure time to receive tolls at the time when the vehicle is likely to hit each toll location on the variable toll facilities. If you query for departure time in the past, tolls are returned for the current time.</li> </ul>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OtherVehicleTypes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/HERE_ElectricVehicle"
                    },
                    {
                      "$ref": "#/components/schemas/HERE_Taxi"
                    },
                    {
                      "$ref": "#/components/schemas/HERE_OtherVehicleTypes"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "C + Libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://apis.tollguru.com/toll/v2/origin-destination-waypoints/##\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\nheaders = curl_slist_append(headers, \"x-api-key: REPLACE_KEY_VALUE\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"departure_time\\\":1609507347,\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"}}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://apis.tollguru.com/toll/v2/origin-destination-waypoints/##\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"x-api-key\", \"REPLACE_KEY_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"departure_time\\\":1609507347,\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.tollguru.com/toll/v2/origin-destination-waypoints/##\"\n\n\tpayload := strings.NewReader(\"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"departure_time\\\":1609507347,\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"x-api-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java + Okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"departure_time\\\":1609507347,\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https://apis.tollguru.com/toll/v2/origin-destination-waypoints/##\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"x-api-key\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://apis.tollguru.com/toll/v2/origin-destination-waypoints/##\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"x-api-key\", \"REPLACE_KEY_VALUE\")\n  .body(\"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"departure_time\\\":1609507347,\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"}}\")\n  .asString();"
          },
          {
            "lang": "Javascript + Jquery",
            "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://apis.tollguru.com/toll/v2/origin-destination-waypoints/##\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"x-api-key\": \"REPLACE_KEY_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"departure_time\\\":1609507347,\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = JSON.stringify({\n  \"from\": {\n    \"address\": \"Philadelphia , Pennsylvania,\",\n    \"lat\": 39.95209,\n    \"lng\": -75.16219\n  },\n  \"to\": {\n    \"address\": \"New York ,NY,\",\n    \"lat\": 40.71455,\n    \"lng\": -74.00715\n  },\n  \"waypoints\": [\n    {\n      \"address\": \"Bridgewater Township , New Jersey\"\n    }\n  ],\n  \"serviceProvider\": \"here\",\n  \"vehicle\": {\n    \"type\": \"2AxlesTaxi\",\n    \"weight\": {\n      \"value\": 20000,\n      \"unit\": \"pound\"\n    },\n    \"height\": {\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    },\n    \"length\": {\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    },\n    \"axles\": 4,\n    \"emissionClass\": \"euro_5\"\n  },\n  \"departure_time\": 1609507347,\n  \"fuelOptions\": {\n    \"fuelCost\": {\n      \"value\": 1.305,\n      \"units\": \"USD/gallon\",\n      \"currency\": \"USD\",\n      \"fuelUnit\": \"gallon\"\n    },\n    \"fuelEfficiency\": {\n      \"city\": 28.57,\n      \"hwy\": 22.4,\n      \"units\": \"mpg\"\n    }\n  },\n  \"units\": {\n    \"currency\": \"USD\"\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://apis.tollguru.com/toll/v2/origin-destination-waypoints/##\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"x-api-key\", \"REPLACE_KEY_VALUE\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"apis.tollguru.com\",\n  \"port\": null,\n  \"path\": \"/toll/v2/origin-destination-waypoints/\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"x-api-key\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  from: {address: 'Philadelphia , Pennsylvania,', lat: 39.95209, lng: -75.16219},\n  to: {address: 'New York ,NY,', lat: 40.71455, lng: -74.00715},\n  waypoints: [{address: 'Bridgewater Township , New Jersey'}],\n  serviceProvider: 'here',\n  vehicle: {\n    type: '2AxlesTaxi',\n    weight: {value: 20000, unit: 'pound'},\n    height: {value: 7.5, unit: 'meter'},\n    length: {value: 7.5, unit: 'meter'},\n    axles: 4,\n    emissionClass: 'euro_5'\n  },\n  departure_time: 1609507347,\n  fuelOptions: {\n    fuelCost: {value: 1.305, units: 'USD/gallon', currency: 'USD', fuelUnit: 'gallon'},\n    fuelEfficiency: {city: 28.57, hwy: 22.4, units: 'mpg'}\n  },\n  units: {currency: 'USD'}\n}));\nreq.end();"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://apis.tollguru.com/toll/v2/origin-destination-waypoints/##',\n  headers: {'content-type': 'application/json', 'x-api-key': 'REPLACE_KEY_VALUE'},\n  body: {\n    from: {address: 'Philadelphia , Pennsylvania,', lat: 39.95209, lng: -75.16219},\n    to: {address: 'New York ,NY,', lat: 40.71455, lng: -74.00715},\n    waypoints: [{address: 'Bridgewater Township , New Jersey'}],\n    serviceProvider: 'here',\n    vehicle: {\n      type: '2AxlesTaxi',\n      weight: {value: 20000, unit: 'pound'},\n      height: {value: 7.5, unit: 'meter'},\n      length: {value: 7.5, unit: 'meter'},\n      axles: 4,\n      emissionClass: 'euro_5'\n    },\n    departure_time: 1609507347,\n    fuelOptions: {\n      fuelCost: {value: 1.305, units: 'USD/gallon', currency: 'USD', fuelUnit: 'gallon'},\n      fuelEfficiency: {city: 28.57, hwy: 22.4, units: 'mpg'}\n    },\n    units: {currency: 'USD'}\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node + Unirest",
            "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://apis.tollguru.com/toll/v2/origin-destination-waypoints/##\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"x-api-key\": \"REPLACE_KEY_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"from\": {\n    \"address\": \"Philadelphia , Pennsylvania,\",\n    \"lat\": 39.95209,\n    \"lng\": -75.16219\n  },\n  \"to\": {\n    \"address\": \"New York ,NY,\",\n    \"lat\": 40.71455,\n    \"lng\": -74.00715\n  },\n  \"waypoints\": [\n    {\n      \"address\": \"Bridgewater Township , New Jersey\"\n    }\n  ],\n  \"serviceProvider\": \"here\",\n  \"vehicle\": {\n    \"type\": \"2AxlesTaxi\",\n    \"weight\": {\n      \"value\": 20000,\n      \"unit\": \"pound\"\n    },\n    \"height\": {\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    },\n    \"length\": {\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    },\n    \"axles\": 4,\n    \"emissionClass\": \"euro_5\"\n  },\n  \"departure_time\": 1609507347,\n  \"fuelOptions\": {\n    \"fuelCost\": {\n      \"value\": 1.305,\n      \"units\": \"USD/gallon\",\n      \"currency\": \"USD\",\n      \"fuelUnit\": \"gallon\"\n    },\n    \"fuelEfficiency\": {\n      \"city\": 28.57,\n      \"hwy\": 22.4,\n      \"units\": \"mpg\"\n    }\n  },\n  \"units\": {\n    \"currency\": \"USD\"\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc + Nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"x-api-key\": @\"REPLACE_KEY_VALUE\" };\nNSDictionary *parameters = @{ @\"from\": @{ @\"address\": @\"Philadelphia , Pennsylvania,\", @\"lat\": @39.95209, @\"lng\": @-75.16219 },\n                              @\"to\": @{ @\"address\": @\"New York ,NY,\", @\"lat\": @40.71455, @\"lng\": @-74.00715 },\n                              @\"waypoints\": @[ @{ @\"address\": @\"Bridgewater Township , New Jersey\" } ],\n                              @\"serviceProvider\": @\"here\",\n                              @\"vehicle\": @{ @\"type\": @\"2AxlesTaxi\", @\"weight\": @{ @\"value\": @20000, @\"unit\": @\"pound\" }, @\"height\": @{ @\"value\": @7.5, @\"unit\": @\"meter\" }, @\"length\": @{ @\"value\": @7.5, @\"unit\": @\"meter\" }, @\"axles\": @4, @\"emissionClass\": @\"euro_5\" },\n                              @\"departure_time\": @1609507347,\n                              @\"fuelOptions\": @{ @\"fuelCost\": @{ @\"value\": @1.305, @\"units\": @\"USD/gallon\", @\"currency\": @\"USD\", @\"fuelUnit\": @\"gallon\" }, @\"fuelEfficiency\": @{ @\"city\": @28.57, @\"hwy\": @22.4, @\"units\": @\"mpg\" } },\n                              @\"units\": @{ @\"currency\": @\"USD\" } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://apis.tollguru.com/toll/v2/origin-destination-waypoints/##\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml + Cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://apis.tollguru.com/toll/v2/origin-destination-waypoints/##\" in\nlet headers = Header.add_list (Header.init ()) [\n  (\"content-type\", \"application/json\");\n  (\"x-api-key\", \"REPLACE_KEY_VALUE\");\n] in\nlet body = Cohttp_lwt_body.of_string \"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"departure_time\\\":1609507347,\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"}}\" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://apis.tollguru.com/toll/v2/origin-destination-waypoints/##\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"departure_time\\\":1609507347,\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"content-type: application/json\",\n    \"x-api-key: REPLACE_KEY_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://apis.tollguru.com/toll/v2/origin-destination-waypoints/##');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'x-api-key' => 'REPLACE_KEY_VALUE'\n]);\n\n$request->setBody('{\"from\":{\"address\":\"Philadelphia , Pennsylvania,\",\"lat\":39.95209,\"lng\":-75.16219},\"to\":{\"address\":\"New York ,NY,\",\"lat\":40.71455,\"lng\":-74.00715},\"waypoints\":[{\"address\":\"Bridgewater Township , New Jersey\"}],\"serviceProvider\":\"here\",\"vehicle\":{\"type\":\"2AxlesTaxi\",\"weight\":{\"value\":20000,\"unit\":\"pound\"},\"height\":{\"value\":7.5,\"unit\":\"meter\"},\"length\":{\"value\":7.5,\"unit\":\"meter\"},\"axles\":4,\"emissionClass\":\"euro_5\"},\"departure_time\":1609507347,\"fuelOptions\":{\"fuelCost\":{\"value\":1.305,\"units\":\"USD/gallon\",\"currency\":\"USD\",\"fuelUnit\":\"gallon\"},\"fuelEfficiency\":{\"city\":28.57,\"hwy\":22.4,\"units\":\"mpg\"}},\"units\":{\"currency\":\"USD\"}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"from\":{\"address\":\"Philadelphia , Pennsylvania,\",\"lat\":39.95209,\"lng\":-75.16219},\"to\":{\"address\":\"New York ,NY,\",\"lat\":40.71455,\"lng\":-74.00715},\"waypoints\":[{\"address\":\"Bridgewater Township , New Jersey\"}],\"serviceProvider\":\"here\",\"vehicle\":{\"type\":\"2AxlesTaxi\",\"weight\":{\"value\":20000,\"unit\":\"pound\"},\"height\":{\"value\":7.5,\"unit\":\"meter\"},\"length\":{\"value\":7.5,\"unit\":\"meter\"},\"axles\":4,\"emissionClass\":\"euro_5\"},\"departure_time\":1609507347,\"fuelOptions\":{\"fuelCost\":{\"value\":1.305,\"units\":\"USD/gallon\",\"currency\":\"USD\",\"fuelUnit\":\"gallon\"},\"fuelEfficiency\":{\"city\":28.57,\"hwy\":22.4,\"units\":\"mpg\"}},\"units\":{\"currency\":\"USD\"}}');\n\n$request->setRequestUrl('https://apis.tollguru.com/toll/v2/origin-destination-waypoints/##');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'x-api-key' => 'REPLACE_KEY_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"apis.tollguru.com\")\n\npayload = \"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"departure_time\\\":1609507347,\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'x-api-key': \"REPLACE_KEY_VALUE\"\n    }\n\nconn.request(\"POST\", \"/toll/v2/origin-destination-waypoints/\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python + Requests",
            "source": "import requests\n\nurl = \"https://apis.tollguru.com/toll/v2/origin-destination-waypoints/##\"\n\npayload = {\n    \"from\": {\n        \"address\": \"Philadelphia , Pennsylvania,\",\n        \"lat\": 39.95209,\n        \"lng\": -75.16219\n    },\n    \"to\": {\n        \"address\": \"New York ,NY,\",\n        \"lat\": 40.71455,\n        \"lng\": -74.00715\n    },\n    \"waypoints\": [{\"address\": \"Bridgewater Township , New Jersey\"}],\n    \"serviceProvider\": \"here\",\n    \"vehicle\": {\n        \"type\": \"2AxlesTaxi\",\n        \"weight\": {\n            \"value\": 20000,\n            \"unit\": \"pound\"\n        },\n        \"height\": {\n            \"value\": 7.5,\n            \"unit\": \"meter\"\n        },\n        \"length\": {\n            \"value\": 7.5,\n            \"unit\": \"meter\"\n        },\n        \"axles\": 4,\n        \"emissionClass\": \"euro_5\"\n    },\n    \"departure_time\": 1609507347,\n    \"fuelOptions\": {\n        \"fuelCost\": {\n            \"value\": 1.305,\n            \"units\": \"USD/gallon\",\n            \"currency\": \"USD\",\n            \"fuelUnit\": \"gallon\"\n        },\n        \"fuelEfficiency\": {\n            \"city\": 28.57,\n            \"hwy\": 22.4,\n            \"units\": \"mpg\"\n        }\n    },\n    \"units\": {\"currency\": \"USD\"}\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"x-api-key\": \"REPLACE_KEY_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://apis.tollguru.com/toll/v2/origin-destination-waypoints/##\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"x-api-key\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"from\\\":{\\\"address\\\":\\\"Philadelphia , Pennsylvania,\\\",\\\"lat\\\":39.95209,\\\"lng\\\":-75.16219},\\\"to\\\":{\\\"address\\\":\\\"New York ,NY,\\\",\\\"lat\\\":40.71455,\\\"lng\\\":-74.00715},\\\"waypoints\\\":[{\\\"address\\\":\\\"Bridgewater Township , New Jersey\\\"}],\\\"serviceProvider\\\":\\\"here\\\",\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"departure_time\\\":1609507347,\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url 'https://apis.tollguru.com/toll/v2/origin-destination-waypoints/##' \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: REPLACE_KEY_VALUE' \\\n  --data '{\"from\":{\"address\":\"Philadelphia , Pennsylvania,\",\"lat\":39.95209,\"lng\":-75.16219},\"to\":{\"address\":\"New York ,NY,\",\"lat\":40.71455,\"lng\":-74.00715},\"waypoints\":[{\"address\":\"Bridgewater Township , New Jersey\"}],\"serviceProvider\":\"here\",\"vehicle\":{\"type\":\"2AxlesTaxi\",\"weight\":{\"value\":20000,\"unit\":\"pound\"},\"height\":{\"value\":7.5,\"unit\":\"meter\"},\"length\":{\"value\":7.5,\"unit\":\"meter\"},\"axles\":4,\"emissionClass\":\"euro_5\"},\"departure_time\":1609507347,\"fuelOptions\":{\"fuelCost\":{\"value\":1.305,\"units\":\"USD/gallon\",\"currency\":\"USD\",\"fuelUnit\":\"gallon\"},\"fuelEfficiency\":{\"city\":28.57,\"hwy\":22.4,\"units\":\"mpg\"}},\"units\":{\"currency\":\"USD\"}}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"from\":{\"address\":\"Philadelphia , Pennsylvania,\",\"lat\":39.95209,\"lng\":-75.16219},\"to\":{\"address\":\"New York ,NY,\",\"lat\":40.71455,\"lng\":-74.00715},\"waypoints\":[{\"address\":\"Bridgewater Township , New Jersey\"}],\"serviceProvider\":\"here\",\"vehicle\":{\"type\":\"2AxlesTaxi\",\"weight\":{\"value\":20000,\"unit\":\"pound\"},\"height\":{\"value\":7.5,\"unit\":\"meter\"},\"length\":{\"value\":7.5,\"unit\":\"meter\"},\"axles\":4,\"emissionClass\":\"euro_5\"},\"departure_time\":1609507347,\"fuelOptions\":{\"fuelCost\":{\"value\":1.305,\"units\":\"USD/gallon\",\"currency\":\"USD\",\"fuelUnit\":\"gallon\"},\"fuelEfficiency\":{\"city\":28.57,\"hwy\":22.4,\"units\":\"mpg\"}},\"units\":{\"currency\":\"USD\"}}' |  \\\n  http POST 'https://apis.tollguru.com/toll/v2/origin-destination-waypoints/##' \\\n  content-type:application/json \\\n  x-api-key:REPLACE_KEY_VALUE"
          },
          {
            "lang": "Shell + Wget",
            "source": "wget --quiet \\\n  --method POST \\\n  --header 'content-type: application/json' \\\n  --header 'x-api-key: REPLACE_KEY_VALUE' \\\n  --body-data '{\"from\":{\"address\":\"Philadelphia , Pennsylvania,\",\"lat\":39.95209,\"lng\":-75.16219},\"to\":{\"address\":\"New York ,NY,\",\"lat\":40.71455,\"lng\":-74.00715},\"waypoints\":[{\"address\":\"Bridgewater Township , New Jersey\"}],\"serviceProvider\":\"here\",\"vehicle\":{\"type\":\"2AxlesTaxi\",\"weight\":{\"value\":20000,\"unit\":\"pound\"},\"height\":{\"value\":7.5,\"unit\":\"meter\"},\"length\":{\"value\":7.5,\"unit\":\"meter\"},\"axles\":4,\"emissionClass\":\"euro_5\"},\"departure_time\":1609507347,\"fuelOptions\":{\"fuelCost\":{\"value\":1.305,\"units\":\"USD/gallon\",\"currency\":\"USD\",\"fuelUnit\":\"gallon\"},\"fuelEfficiency\":{\"city\":28.57,\"hwy\":22.4,\"units\":\"mpg\"}},\"units\":{\"currency\":\"USD\"}}' \\\n  --output-document \\\n  - 'https://apis.tollguru.com/toll/v2/origin-destination-waypoints/##'"
          },
          {
            "lang": "Swift + Nsurlsession",
            "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"x-api-key\": \"REPLACE_KEY_VALUE\"\n]\nlet parameters = [\n  \"from\": [\n    \"address\": \"Philadelphia , Pennsylvania,\",\n    \"lat\": 39.95209,\n    \"lng\": -75.16219\n  ],\n  \"to\": [\n    \"address\": \"New York ,NY,\",\n    \"lat\": 40.71455,\n    \"lng\": -74.00715\n  ],\n  \"waypoints\": [[\"address\": \"Bridgewater Township , New Jersey\"]],\n  \"serviceProvider\": \"here\",\n  \"vehicle\": [\n    \"type\": \"2AxlesTaxi\",\n    \"weight\": [\n      \"value\": 20000,\n      \"unit\": \"pound\"\n    ],\n    \"height\": [\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    ],\n    \"length\": [\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    ],\n    \"axles\": 4,\n    \"emissionClass\": \"euro_5\"\n  ],\n  \"departure_time\": 1609507347,\n  \"fuelOptions\": [\n    \"fuelCost\": [\n      \"value\": 1.305,\n      \"units\": \"USD/gallon\",\n      \"currency\": \"USD\",\n      \"fuelUnit\": \"gallon\"\n    ],\n    \"fuelEfficiency\": [\n      \"city\": 28.57,\n      \"hwy\": 22.4,\n      \"units\": \"mpg\"\n    ]\n  ],\n  \"units\": [\"currency\": \"USD\"]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://apis.tollguru.com/toll/v2/origin-destination-waypoints/##\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
          }
        ]
      }
    },
    "/toll/v2/complete-polyline-from-mapping-service": {
      "post": {
        "tags": [
          "Tolls for complete route polyline from a mapping service"
        ],
        "summary": "Route Encoded Polyline",
        "description": "You will receive toll information for all tolls on the single route you requested. You will need to get the complete route from your mapping service (and not just origin, destination and some stops on the route) to receive accurate toll information.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouteRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C + Libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"mapProvider\\\":\\\"here\\\",\\\"polyline\\\":\\\"_f`GwjixRSe@MIIEICGAIA_Al@MHIDe@VKFm@f@SLKLCFEHCF?HAF?NTH\\\\\\\\\\\\\\\\N`Ab@x@b@`@TZTPLTPZXDFBFXVZTrB~ARDLF~@ZJDTDPBVFJ@X@P@j@?N?d@ERC`@KhB{Al@i@f@Y~BaCPQJKbA_At@s@RSDEBEBCVU~A{ATW~@{@`@_@v@q@p@o@pA_AVSXSJIv@g@~@m@HEROTO@?rA{@VQ^UZSPMHGDEj@g@h@k@f@m@^g@vAqBTYp@_Ab@m@Va@R[Xg@b@u@^{@R]Pc@Vm@Pe@\\\\\\\\\\\\\\\\cA`@mAn@iB^aAp@aBn@cBt@yAFMP_@pC_GdBsDdAwBRc@fAyB`@y@Ve@pAaCxAqCf@_An@mAjBcE`BoD^w@Vo@P[Xe@JQ`@m@PULQh@o@\\\\\\\\\\\\\\\\_@l@m@r@m@pAeA`CoBxAoA\\\\\\\\\\\\\\\\YbAy@?An@i@~AqA`@a@VY^_@V[PSX_@T]T[f@y@JMHMtAcCd@}@f@_AlBoDb@y@r@sAd@{@R]\\\\\\\\\\\\\\\\o@h@y@Zc@n@_ABENQZc@TY@C\\\\\\\\\\\\\\\\_@RWFKPUPYT]BCDGl@_Af@w@^u@P_@j@sAh@mAVk@^s@^s@n@kA?Ad@u@fAeBl@eAZg@|@yA`BoCd@_AZo@Z}@J]Ng@BQJe@F_@DS@MDk@J{AFiAHmDHgDFwADiBH_D@[?E@]@c@BgALuEBcABkA@]B{AD_BBa@DaCJkCHiALyAPoAN_ALo@R}@Le@ZkAb@oATo@\\\\\\\\\\\\\\\\{@FK`@}@`@w@lA{BxAoC~AwCHOZm@l@eAHO^s@n@kAp@qANYL[L]J[Rs@FWNu@Jq@Fc@JiABw@@aBBaDDaA?m@D]\\\\\\\\\\\\\\\\cCJi@Lg@Pi@Xy@BGDMRg@DIFMHQFMJOr@qAZc@v@mAtAcBz@eANS`BuBtDoEd@m@dBoBj@o@V[LQFGhC{Cp@{@Za@LUJSHOJ[Ne@H]Fc@?AD_@Dg@@e@?I?M?M?aA?{@A}BCwA?oA?YEuB?k@Ag@C{@?A?ECs@AyA?m@ASC{CEmCA}@AYAW?KA}@CcBA{AAcA?WAUGiI?S?QAU?WAc@AgA?_@@a@@y@@e@@UBU@UVaD@MFaABc@@Y@G?i@Ak@Gk@EUI_@IY?AIUKUISQc@s@}AMWk@uAK[GOIa@I_@EYCQGm@Co@A]?M?O@]@UD[Fa@D]FWLk@Pg@N]P_@N[dBaDpBkD@AdCsEbAkBd@_APa@HUHUVaAES?EAE?E?EJ_ADk@@W@UEaAAOIm@M_ABCKa@CMESA?EMK[KWCIACAAKWs@sAq@gAEIEGS[S]GMGKWa@g@mAe@eA]OSIEAG?WAG@OBIBGDGF[b@IJKFk@`Au@pA}@~AMXcC~E_BnCY`@MT\\\",\\\"locTimes\\\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"},\\\"departure_time\\\":1609507347}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"mapProvider\\\":\\\"here\\\",\\\"polyline\\\":\\\"_f`GwjixRSe@MIIEICGAIA_Al@MHIDe@VKFm@f@SLKLCFEHCF?HAF?NTH\\\\\\\\\\\\\\\\N`Ab@x@b@`@TZTPLTPZXDFBFXVZTrB~ARDLF~@ZJDTDPBVFJ@X@P@j@?N?d@ERC`@KhB{Al@i@f@Y~BaCPQJKbA_At@s@RSDEBEBCVU~A{ATW~@{@`@_@v@q@p@o@pA_AVSXSJIv@g@~@m@HEROTO@?rA{@VQ^UZSPMHGDEj@g@h@k@f@m@^g@vAqBTYp@_Ab@m@Va@R[Xg@b@u@^{@R]Pc@Vm@Pe@\\\\\\\\\\\\\\\\cA`@mAn@iB^aAp@aBn@cBt@yAFMP_@pC_GdBsDdAwBRc@fAyB`@y@Ve@pAaCxAqCf@_An@mAjBcE`BoD^w@Vo@P[Xe@JQ`@m@PULQh@o@\\\\\\\\\\\\\\\\_@l@m@r@m@pAeA`CoBxAoA\\\\\\\\\\\\\\\\YbAy@?An@i@~AqA`@a@VY^_@V[PSX_@T]T[f@y@JMHMtAcCd@}@f@_AlBoDb@y@r@sAd@{@R]\\\\\\\\\\\\\\\\o@h@y@Zc@n@_ABENQZc@TY@C\\\\\\\\\\\\\\\\_@RWFKPUPYT]BCDGl@_Af@w@^u@P_@j@sAh@mAVk@^s@^s@n@kA?Ad@u@fAeBl@eAZg@|@yA`BoCd@_AZo@Z}@J]Ng@BQJe@F_@DS@MDk@J{AFiAHmDHgDFwADiBH_D@[?E@]@c@BgALuEBcABkA@]B{AD_BBa@DaCJkCHiALyAPoAN_ALo@R}@Le@ZkAb@oATo@\\\\\\\\\\\\\\\\{@FK`@}@`@w@lA{BxAoC~AwCHOZm@l@eAHO^s@n@kAp@qANYL[L]J[Rs@FWNu@Jq@Fc@JiABw@@aBBaDDaA?m@D]\\\\\\\\\\\\\\\\cCJi@Lg@Pi@Xy@BGDMRg@DIFMHQFMJOr@qAZc@v@mAtAcBz@eANS`BuBtDoEd@m@dBoBj@o@V[LQFGhC{Cp@{@Za@LUJSHOJ[Ne@H]Fc@?AD_@Dg@@e@?I?M?M?aA?{@A}BCwA?oA?YEuB?k@Ag@C{@?A?ECs@AyA?m@ASC{CEmCA}@AYAW?KA}@CcBA{AAcA?WAUGiI?S?QAU?WAc@AgA?_@@a@@y@@e@@UBU@UVaD@MFaABc@@Y@G?i@Ak@Gk@EUI_@IY?AIUKUISQc@s@}AMWk@uAK[GOIa@I_@EYCQGm@Co@A]?M?O@]@UD[Fa@D]FWLk@Pg@N]P_@N[dBaDpBkD@AdCsEbAkBd@_APa@HUHUVaAES?EAE?E?EJ_ADk@@W@UEaAAOIm@M_ABCKa@CMESA?EMK[KWCIACAAKWs@sAq@gAEIEGS[S]GMGKWa@g@mAe@eA]OSIEAG?WAG@OBIBGDGF[b@IJKFk@`Au@pA}@~AMXcC~E_BnCY`@MT\\\",\\\"locTimes\\\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"},\\\"departure_time\\\":1609507347}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service\"\n\n\tpayload := strings.NewReader(\"{\\\"mapProvider\\\":\\\"here\\\",\\\"polyline\\\":\\\"_f`GwjixRSe@MIIEICGAIA_Al@MHIDe@VKFm@f@SLKLCFEHCF?HAF?NTH\\\\\\\\\\\\\\\\N`Ab@x@b@`@TZTPLTPZXDFBFXVZTrB~ARDLF~@ZJDTDPBVFJ@X@P@j@?N?d@ERC`@KhB{Al@i@f@Y~BaCPQJKbA_At@s@RSDEBEBCVU~A{ATW~@{@`@_@v@q@p@o@pA_AVSXSJIv@g@~@m@HEROTO@?rA{@VQ^UZSPMHGDEj@g@h@k@f@m@^g@vAqBTYp@_Ab@m@Va@R[Xg@b@u@^{@R]Pc@Vm@Pe@\\\\\\\\\\\\\\\\cA`@mAn@iB^aAp@aBn@cBt@yAFMP_@pC_GdBsDdAwBRc@fAyB`@y@Ve@pAaCxAqCf@_An@mAjBcE`BoD^w@Vo@P[Xe@JQ`@m@PULQh@o@\\\\\\\\\\\\\\\\_@l@m@r@m@pAeA`CoBxAoA\\\\\\\\\\\\\\\\YbAy@?An@i@~AqA`@a@VY^_@V[PSX_@T]T[f@y@JMHMtAcCd@}@f@_AlBoDb@y@r@sAd@{@R]\\\\\\\\\\\\\\\\o@h@y@Zc@n@_ABENQZc@TY@C\\\\\\\\\\\\\\\\_@RWFKPUPYT]BCDGl@_Af@w@^u@P_@j@sAh@mAVk@^s@^s@n@kA?Ad@u@fAeBl@eAZg@|@yA`BoCd@_AZo@Z}@J]Ng@BQJe@F_@DS@MDk@J{AFiAHmDHgDFwADiBH_D@[?E@]@c@BgALuEBcABkA@]B{AD_BBa@DaCJkCHiALyAPoAN_ALo@R}@Le@ZkAb@oATo@\\\\\\\\\\\\\\\\{@FK`@}@`@w@lA{BxAoC~AwCHOZm@l@eAHO^s@n@kAp@qANYL[L]J[Rs@FWNu@Jq@Fc@JiABw@@aBBaDDaA?m@D]\\\\\\\\\\\\\\\\cCJi@Lg@Pi@Xy@BGDMRg@DIFMHQFMJOr@qAZc@v@mAtAcBz@eANS`BuBtDoEd@m@dBoBj@o@V[LQFGhC{Cp@{@Za@LUJSHOJ[Ne@H]Fc@?AD_@Dg@@e@?I?M?M?aA?{@A}BCwA?oA?YEuB?k@Ag@C{@?A?ECs@AyA?m@ASC{CEmCA}@AYAW?KA}@CcBA{AAcA?WAUGiI?S?QAU?WAc@AgA?_@@a@@y@@e@@UBU@UVaD@MFaABc@@Y@G?i@Ak@Gk@EUI_@IY?AIUKUISQc@s@}AMWk@uAK[GOIa@I_@EYCQGm@Co@A]?M?O@]@UD[Fa@D]FWLk@Pg@N]P_@N[dBaDpBkD@AdCsEbAkBd@_APa@HUHUVaAES?EAE?E?EJ_ADk@@W@UEaAAOIm@M_ABCKa@CMESA?EMK[KWCIACAAKWs@sAq@gAEIEGS[S]GMGKWa@g@mAe@eA]OSIEAG?WAG@OBIBGDGF[b@IJKFk@`Au@pA}@~AMXcC~E_BnCY`@MT\\\",\\\"locTimes\\\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"},\\\"departure_time\\\":1609507347}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java + Okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"mapProvider\\\":\\\"here\\\",\\\"polyline\\\":\\\"_f`GwjixRSe@MIIEICGAIA_Al@MHIDe@VKFm@f@SLKLCFEHCF?HAF?NTH\\\\\\\\\\\\\\\\N`Ab@x@b@`@TZTPLTPZXDFBFXVZTrB~ARDLF~@ZJDTDPBVFJ@X@P@j@?N?d@ERC`@KhB{Al@i@f@Y~BaCPQJKbA_At@s@RSDEBEBCVU~A{ATW~@{@`@_@v@q@p@o@pA_AVSXSJIv@g@~@m@HEROTO@?rA{@VQ^UZSPMHGDEj@g@h@k@f@m@^g@vAqBTYp@_Ab@m@Va@R[Xg@b@u@^{@R]Pc@Vm@Pe@\\\\\\\\\\\\\\\\cA`@mAn@iB^aAp@aBn@cBt@yAFMP_@pC_GdBsDdAwBRc@fAyB`@y@Ve@pAaCxAqCf@_An@mAjBcE`BoD^w@Vo@P[Xe@JQ`@m@PULQh@o@\\\\\\\\\\\\\\\\_@l@m@r@m@pAeA`CoBxAoA\\\\\\\\\\\\\\\\YbAy@?An@i@~AqA`@a@VY^_@V[PSX_@T]T[f@y@JMHMtAcCd@}@f@_AlBoDb@y@r@sAd@{@R]\\\\\\\\\\\\\\\\o@h@y@Zc@n@_ABENQZc@TY@C\\\\\\\\\\\\\\\\_@RWFKPUPYT]BCDGl@_Af@w@^u@P_@j@sAh@mAVk@^s@^s@n@kA?Ad@u@fAeBl@eAZg@|@yA`BoCd@_AZo@Z}@J]Ng@BQJe@F_@DS@MDk@J{AFiAHmDHgDFwADiBH_D@[?E@]@c@BgALuEBcABkA@]B{AD_BBa@DaCJkCHiALyAPoAN_ALo@R}@Le@ZkAb@oATo@\\\\\\\\\\\\\\\\{@FK`@}@`@w@lA{BxAoC~AwCHOZm@l@eAHO^s@n@kAp@qANYL[L]J[Rs@FWNu@Jq@Fc@JiABw@@aBBaDDaA?m@D]\\\\\\\\\\\\\\\\cCJi@Lg@Pi@Xy@BGDMRg@DIFMHQFMJOr@qAZc@v@mAtAcBz@eANS`BuBtDoEd@m@dBoBj@o@V[LQFGhC{Cp@{@Za@LUJSHOJ[Ne@H]Fc@?AD_@Dg@@e@?I?M?M?aA?{@A}BCwA?oA?YEuB?k@Ag@C{@?A?ECs@AyA?m@ASC{CEmCA}@AYAW?KA}@CcBA{AAcA?WAUGiI?S?QAU?WAc@AgA?_@@a@@y@@e@@UBU@UVaD@MFaABc@@Y@G?i@Ak@Gk@EUI_@IY?AIUKUISQc@s@}AMWk@uAK[GOIa@I_@EYCQGm@Co@A]?M?O@]@UD[Fa@D]FWLk@Pg@N]P_@N[dBaDpBkD@AdCsEbAkBd@_APa@HUHUVaAES?EAE?E?EJ_ADk@@W@UEaAAOIm@M_ABCKa@CMESA?EMK[KWCIACAAKWs@sAq@gAEIEGS[S]GMGKWa@g@mAe@eA]OSIEAG?WAG@OBIBGDGF[b@IJKFk@`Au@pA}@~AMXcC~E_BnCY`@MT\\\",\\\"locTimes\\\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"},\\\"departure_time\\\":1609507347}\");\nRequest request = new Request.Builder()\n  .url(\"https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service\")\n  .header(\"content-type\", \"application/json\")\n  .body(\"{\\\"mapProvider\\\":\\\"here\\\",\\\"polyline\\\":\\\"_f`GwjixRSe@MIIEICGAIA_Al@MHIDe@VKFm@f@SLKLCFEHCF?HAF?NTH\\\\\\\\\\\\\\\\N`Ab@x@b@`@TZTPLTPZXDFBFXVZTrB~ARDLF~@ZJDTDPBVFJ@X@P@j@?N?d@ERC`@KhB{Al@i@f@Y~BaCPQJKbA_At@s@RSDEBEBCVU~A{ATW~@{@`@_@v@q@p@o@pA_AVSXSJIv@g@~@m@HEROTO@?rA{@VQ^UZSPMHGDEj@g@h@k@f@m@^g@vAqBTYp@_Ab@m@Va@R[Xg@b@u@^{@R]Pc@Vm@Pe@\\\\\\\\\\\\\\\\cA`@mAn@iB^aAp@aBn@cBt@yAFMP_@pC_GdBsDdAwBRc@fAyB`@y@Ve@pAaCxAqCf@_An@mAjBcE`BoD^w@Vo@P[Xe@JQ`@m@PULQh@o@\\\\\\\\\\\\\\\\_@l@m@r@m@pAeA`CoBxAoA\\\\\\\\\\\\\\\\YbAy@?An@i@~AqA`@a@VY^_@V[PSX_@T]T[f@y@JMHMtAcCd@}@f@_AlBoDb@y@r@sAd@{@R]\\\\\\\\\\\\\\\\o@h@y@Zc@n@_ABENQZc@TY@C\\\\\\\\\\\\\\\\_@RWFKPUPYT]BCDGl@_Af@w@^u@P_@j@sAh@mAVk@^s@^s@n@kA?Ad@u@fAeBl@eAZg@|@yA`BoCd@_AZo@Z}@J]Ng@BQJe@F_@DS@MDk@J{AFiAHmDHgDFwADiBH_D@[?E@]@c@BgALuEBcABkA@]B{AD_BBa@DaCJkCHiALyAPoAN_ALo@R}@Le@ZkAb@oATo@\\\\\\\\\\\\\\\\{@FK`@}@`@w@lA{BxAoC~AwCHOZm@l@eAHO^s@n@kAp@qANYL[L]J[Rs@FWNu@Jq@Fc@JiABw@@aBBaDDaA?m@D]\\\\\\\\\\\\\\\\cCJi@Lg@Pi@Xy@BGDMRg@DIFMHQFMJOr@qAZc@v@mAtAcBz@eANS`BuBtDoEd@m@dBoBj@o@V[LQFGhC{Cp@{@Za@LUJSHOJ[Ne@H]Fc@?AD_@Dg@@e@?I?M?M?aA?{@A}BCwA?oA?YEuB?k@Ag@C{@?A?ECs@AyA?m@ASC{CEmCA}@AYAW?KA}@CcBA{AAcA?WAUGiI?S?QAU?WAc@AgA?_@@a@@y@@e@@UBU@UVaD@MFaABc@@Y@G?i@Ak@Gk@EUI_@IY?AIUKUISQc@s@}AMWk@uAK[GOIa@I_@EYCQGm@Co@A]?M?O@]@UD[Fa@D]FWLk@Pg@N]P_@N[dBaDpBkD@AdCsEbAkBd@_APa@HUHUVaAES?EAE?E?EJ_ADk@@W@UEaAAOIm@M_ABCKa@CMESA?EMK[KWCIACAAKWs@sAq@gAEIEGS[S]GMGKWa@g@mAe@eA]OSIEAG?WAG@OBIBGDGF[b@IJKFk@`Au@pA}@~AMXcC~E_BnCY`@MT\\\",\\\"locTimes\\\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"},\\\"departure_time\\\":1609507347}\")\n  .asString();"
          },
          {
            "lang": "Javascript + Jquery",
            "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"mapProvider\\\":\\\"here\\\",\\\"polyline\\\":\\\"_f`GwjixRSe@MIIEICGAIA_Al@MHIDe@VKFm@f@SLKLCFEHCF?HAF?NTH\\\\\\\\\\\\\\\\N`Ab@x@b@`@TZTPLTPZXDFBFXVZTrB~ARDLF~@ZJDTDPBVFJ@X@P@j@?N?d@ERC`@KhB{Al@i@f@Y~BaCPQJKbA_At@s@RSDEBEBCVU~A{ATW~@{@`@_@v@q@p@o@pA_AVSXSJIv@g@~@m@HEROTO@?rA{@VQ^UZSPMHGDEj@g@h@k@f@m@^g@vAqBTYp@_Ab@m@Va@R[Xg@b@u@^{@R]Pc@Vm@Pe@\\\\\\\\\\\\\\\\cA`@mAn@iB^aAp@aBn@cBt@yAFMP_@pC_GdBsDdAwBRc@fAyB`@y@Ve@pAaCxAqCf@_An@mAjBcE`BoD^w@Vo@P[Xe@JQ`@m@PULQh@o@\\\\\\\\\\\\\\\\_@l@m@r@m@pAeA`CoBxAoA\\\\\\\\\\\\\\\\YbAy@?An@i@~AqA`@a@VY^_@V[PSX_@T]T[f@y@JMHMtAcCd@}@f@_AlBoDb@y@r@sAd@{@R]\\\\\\\\\\\\\\\\o@h@y@Zc@n@_ABENQZc@TY@C\\\\\\\\\\\\\\\\_@RWFKPUPYT]BCDGl@_Af@w@^u@P_@j@sAh@mAVk@^s@^s@n@kA?Ad@u@fAeBl@eAZg@|@yA`BoCd@_AZo@Z}@J]Ng@BQJe@F_@DS@MDk@J{AFiAHmDHgDFwADiBH_D@[?E@]@c@BgALuEBcABkA@]B{AD_BBa@DaCJkCHiALyAPoAN_ALo@R}@Le@ZkAb@oATo@\\\\\\\\\\\\\\\\{@FK`@}@`@w@lA{BxAoC~AwCHOZm@l@eAHO^s@n@kAp@qANYL[L]J[Rs@FWNu@Jq@Fc@JiABw@@aBBaDDaA?m@D]\\\\\\\\\\\\\\\\cCJi@Lg@Pi@Xy@BGDMRg@DIFMHQFMJOr@qAZc@v@mAtAcBz@eANS`BuBtDoEd@m@dBoBj@o@V[LQFGhC{Cp@{@Za@LUJSHOJ[Ne@H]Fc@?AD_@Dg@@e@?I?M?M?aA?{@A}BCwA?oA?YEuB?k@Ag@C{@?A?ECs@AyA?m@ASC{CEmCA}@AYAW?KA}@CcBA{AAcA?WAUGiI?S?QAU?WAc@AgA?_@@a@@y@@e@@UBU@UVaD@MFaABc@@Y@G?i@Ak@Gk@EUI_@IY?AIUKUISQc@s@}AMWk@uAK[GOIa@I_@EYCQGm@Co@A]?M?O@]@UD[Fa@D]FWLk@Pg@N]P_@N[dBaDpBkD@AdCsEbAkBd@_APa@HUHUVaAES?EAE?E?EJ_ADk@@W@UEaAAOIm@M_ABCKa@CMESA?EMK[KWCIACAAKWs@sAq@gAEIEGS[S]GMGKWa@g@mAe@eA]OSIEAG?WAG@OBIBGDGF[b@IJKFk@`Au@pA}@~AMXcC~E_BnCY`@MT\\\",\\\"locTimes\\\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"},\\\"departure_time\\\":1609507347}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = JSON.stringify({\n  \"mapProvider\": \"here\",\n  \"polyline\": \"_f`GwjixRSe@MIIEICGAIA_Al@MHIDe@VKFm@f@SLKLCFEHCF?HAF?NTH\\\\\\\\N`Ab@x@b@`@TZTPLTPZXDFBFXVZTrB~ARDLF~@ZJDTDPBVFJ@X@P@j@?N?d@ERC`@KhB{Al@i@f@Y~BaCPQJKbA_At@s@RSDEBEBCVU~A{ATW~@{@`@_@v@q@p@o@pA_AVSXSJIv@g@~@m@HEROTO@?rA{@VQ^UZSPMHGDEj@g@h@k@f@m@^g@vAqBTYp@_Ab@m@Va@R[Xg@b@u@^{@R]Pc@Vm@Pe@\\\\\\\\cA`@mAn@iB^aAp@aBn@cBt@yAFMP_@pC_GdBsDdAwBRc@fAyB`@y@Ve@pAaCxAqCf@_An@mAjBcE`BoD^w@Vo@P[Xe@JQ`@m@PULQh@o@\\\\\\\\_@l@m@r@m@pAeA`CoBxAoA\\\\\\\\YbAy@?An@i@~AqA`@a@VY^_@V[PSX_@T]T[f@y@JMHMtAcCd@}@f@_AlBoDb@y@r@sAd@{@R]\\\\\\\\o@h@y@Zc@n@_ABENQZc@TY@C\\\\\\\\_@RWFKPUPYT]BCDGl@_Af@w@^u@P_@j@sAh@mAVk@^s@^s@n@kA?Ad@u@fAeBl@eAZg@|@yA`BoCd@_AZo@Z}@J]Ng@BQJe@F_@DS@MDk@J{AFiAHmDHgDFwADiBH_D@[?E@]@c@BgALuEBcABkA@]B{AD_BBa@DaCJkCHiALyAPoAN_ALo@R}@Le@ZkAb@oATo@\\\\\\\\{@FK`@}@`@w@lA{BxAoC~AwCHOZm@l@eAHO^s@n@kAp@qANYL[L]J[Rs@FWNu@Jq@Fc@JiABw@@aBBaDDaA?m@D]\\\\\\\\cCJi@Lg@Pi@Xy@BGDMRg@DIFMHQFMJOr@qAZc@v@mAtAcBz@eANS`BuBtDoEd@m@dBoBj@o@V[LQFGhC{Cp@{@Za@LUJSHOJ[Ne@H]Fc@?AD_@Dg@@e@?I?M?M?aA?{@A}BCwA?oA?YEuB?k@Ag@C{@?A?ECs@AyA?m@ASC{CEmCA}@AYAW?KA}@CcBA{AAcA?WAUGiI?S?QAU?WAc@AgA?_@@a@@y@@e@@UBU@UVaD@MFaABc@@Y@G?i@Ak@Gk@EUI_@IY?AIUKUISQc@s@}AMWk@uAK[GOIa@I_@EYCQGm@Co@A]?M?O@]@UD[Fa@D]FWLk@Pg@N]P_@N[dBaDpBkD@AdCsEbAkBd@_APa@HUHUVaAES?EAE?E?EJ_ADk@@W@UEaAAOIm@M_ABCKa@CMESA?EMK[KWCIACAAKWs@sAq@gAEIEGS[S]GMGKWa@g@mAe@eA]OSIEAG?WAG@OBIBGDGF[b@IJKFk@`Au@pA}@~AMXcC~E_BnCY`@MT\",\n  \"locTimes\": [\n    [\n      0,\n      1660110342\n    ],\n    [\n      30,\n      1660110642\n    ],\n    [\n      60,\n      1660110942\n    ],\n    [\n      232,\n      1660111182\n    ]\n  ],\n  \"vehicle\": {\n    \"type\": \"2AxlesTaxi\",\n    \"weight\": {\n      \"value\": 20000,\n      \"unit\": \"pound\"\n    },\n    \"height\": {\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    },\n    \"length\": {\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    },\n    \"axles\": 4,\n    \"emissionClass\": \"euro_5\"\n  },\n  \"fuelOptions\": {\n    \"fuelCost\": {\n      \"value\": 1.305,\n      \"units\": \"USD/gallon\",\n      \"currency\": \"USD\",\n      \"fuelUnit\": \"gallon\"\n    },\n    \"fuelEfficiency\": {\n      \"city\": 28.57,\n      \"hwy\": 22.4,\n      \"units\": \"mpg\"\n    }\n  },\n  \"units\": {\n    \"currency\": \"USD\"\n  },\n  \"departure_time\": 1609507347\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"apis.tollguru.com\",\n  \"port\": null,\n  \"path\": \"/toll/v2/complete-polyline-from-mapping-service\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  mapProvider: 'here',\n  polyline: '_f`GwjixRSe@MIIEICGAIA_Al@MHIDe@VKFm@f@SLKLCFEHCF?HAF?NTH\\\\N`Ab@x@b@`@TZTPLTPZXDFBFXVZTrB~ARDLF~@ZJDTDPBVFJ@X@P@j@?N?d@ERC`@KhB{Al@i@f@Y~BaCPQJKbA_At@s@RSDEBEBCVU~A{ATW~@{@`@_@v@q@p@o@pA_AVSXSJIv@g@~@m@HEROTO@?rA{@VQ^UZSPMHGDEj@g@h@k@f@m@^g@vAqBTYp@_Ab@m@Va@R[Xg@b@u@^{@R]Pc@Vm@Pe@\\\\cA`@mAn@iB^aAp@aBn@cBt@yAFMP_@pC_GdBsDdAwBRc@fAyB`@y@Ve@pAaCxAqCf@_An@mAjBcE`BoD^w@Vo@P[Xe@JQ`@m@PULQh@o@\\\\_@l@m@r@m@pAeA`CoBxAoA\\\\YbAy@?An@i@~AqA`@a@VY^_@V[PSX_@T]T[f@y@JMHMtAcCd@}@f@_AlBoDb@y@r@sAd@{@R]\\\\o@h@y@Zc@n@_ABENQZc@TY@C\\\\_@RWFKPUPYT]BCDGl@_Af@w@^u@P_@j@sAh@mAVk@^s@^s@n@kA?Ad@u@fAeBl@eAZg@|@yA`BoCd@_AZo@Z}@J]Ng@BQJe@F_@DS@MDk@J{AFiAHmDHgDFwADiBH_D@[?E@]@c@BgALuEBcABkA@]B{AD_BBa@DaCJkCHiALyAPoAN_ALo@R}@Le@ZkAb@oATo@\\\\{@FK`@}@`@w@lA{BxAoC~AwCHOZm@l@eAHO^s@n@kAp@qANYL[L]J[Rs@FWNu@Jq@Fc@JiABw@@aBBaDDaA?m@D]\\\\cCJi@Lg@Pi@Xy@BGDMRg@DIFMHQFMJOr@qAZc@v@mAtAcBz@eANS`BuBtDoEd@m@dBoBj@o@V[LQFGhC{Cp@{@Za@LUJSHOJ[Ne@H]Fc@?AD_@Dg@@e@?I?M?M?aA?{@A}BCwA?oA?YEuB?k@Ag@C{@?A?ECs@AyA?m@ASC{CEmCA}@AYAW?KA}@CcBA{AAcA?WAUGiI?S?QAU?WAc@AgA?_@@a@@y@@e@@UBU@UVaD@MFaABc@@Y@G?i@Ak@Gk@EUI_@IY?AIUKUISQc@s@}AMWk@uAK[GOIa@I_@EYCQGm@Co@A]?M?O@]@UD[Fa@D]FWLk@Pg@N]P_@N[dBaDpBkD@AdCsEbAkBd@_APa@HUHUVaAES?EAE?E?EJ_ADk@@W@UEaAAOIm@M_ABCKa@CMESA?EMK[KWCIACAAKWs@sAq@gAEIEGS[S]GMGKWa@g@mAe@eA]OSIEAG?WAG@OBIBGDGF[b@IJKFk@`Au@pA}@~AMXcC~E_BnCY`@MT',\n  locTimes: [[0, 1660110342], [30, 1660110642], [60, 1660110942], [232, 1660111182]],\n  vehicle: {\n    type: '2AxlesTaxi',\n    weight: {value: 20000, unit: 'pound'},\n    height: {value: 7.5, unit: 'meter'},\n    length: {value: 7.5, unit: 'meter'},\n    axles: 4,\n    emissionClass: 'euro_5'\n  },\n  fuelOptions: {\n    fuelCost: {value: 1.305, units: 'USD/gallon', currency: 'USD', fuelUnit: 'gallon'},\n    fuelEfficiency: {city: 28.57, hwy: 22.4, units: 'mpg'}\n  },\n  units: {currency: 'USD'},\n  departure_time: 1609507347\n}));\nreq.end();"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service',\n  headers: {'content-type': 'application/json'},\n  body: {\n    mapProvider: 'here',\n    polyline: '_f`GwjixRSe@MIIEICGAIA_Al@MHIDe@VKFm@f@SLKLCFEHCF?HAF?NTH\\\\N`Ab@x@b@`@TZTPLTPZXDFBFXVZTrB~ARDLF~@ZJDTDPBVFJ@X@P@j@?N?d@ERC`@KhB{Al@i@f@Y~BaCPQJKbA_At@s@RSDEBEBCVU~A{ATW~@{@`@_@v@q@p@o@pA_AVSXSJIv@g@~@m@HEROTO@?rA{@VQ^UZSPMHGDEj@g@h@k@f@m@^g@vAqBTYp@_Ab@m@Va@R[Xg@b@u@^{@R]Pc@Vm@Pe@\\\\cA`@mAn@iB^aAp@aBn@cBt@yAFMP_@pC_GdBsDdAwBRc@fAyB`@y@Ve@pAaCxAqCf@_An@mAjBcE`BoD^w@Vo@P[Xe@JQ`@m@PULQh@o@\\\\_@l@m@r@m@pAeA`CoBxAoA\\\\YbAy@?An@i@~AqA`@a@VY^_@V[PSX_@T]T[f@y@JMHMtAcCd@}@f@_AlBoDb@y@r@sAd@{@R]\\\\o@h@y@Zc@n@_ABENQZc@TY@C\\\\_@RWFKPUPYT]BCDGl@_Af@w@^u@P_@j@sAh@mAVk@^s@^s@n@kA?Ad@u@fAeBl@eAZg@|@yA`BoCd@_AZo@Z}@J]Ng@BQJe@F_@DS@MDk@J{AFiAHmDHgDFwADiBH_D@[?E@]@c@BgALuEBcABkA@]B{AD_BBa@DaCJkCHiALyAPoAN_ALo@R}@Le@ZkAb@oATo@\\\\{@FK`@}@`@w@lA{BxAoC~AwCHOZm@l@eAHO^s@n@kAp@qANYL[L]J[Rs@FWNu@Jq@Fc@JiABw@@aBBaDDaA?m@D]\\\\cCJi@Lg@Pi@Xy@BGDMRg@DIFMHQFMJOr@qAZc@v@mAtAcBz@eANS`BuBtDoEd@m@dBoBj@o@V[LQFGhC{Cp@{@Za@LUJSHOJ[Ne@H]Fc@?AD_@Dg@@e@?I?M?M?aA?{@A}BCwA?oA?YEuB?k@Ag@C{@?A?ECs@AyA?m@ASC{CEmCA}@AYAW?KA}@CcBA{AAcA?WAUGiI?S?QAU?WAc@AgA?_@@a@@y@@e@@UBU@UVaD@MFaABc@@Y@G?i@Ak@Gk@EUI_@IY?AIUKUISQc@s@}AMWk@uAK[GOIa@I_@EYCQGm@Co@A]?M?O@]@UD[Fa@D]FWLk@Pg@N]P_@N[dBaDpBkD@AdCsEbAkBd@_APa@HUHUVaAES?EAE?E?EJ_ADk@@W@UEaAAOIm@M_ABCKa@CMESA?EMK[KWCIACAAKWs@sAq@gAEIEGS[S]GMGKWa@g@mAe@eA]OSIEAG?WAG@OBIBGDGF[b@IJKFk@`Au@pA}@~AMXcC~E_BnCY`@MT',\n    locTimes: [[0, 1660110342], [30, 1660110642], [60, 1660110942], [232, 1660111182]],\n    vehicle: {\n      type: '2AxlesTaxi',\n      weight: {value: 20000, unit: 'pound'},\n      height: {value: 7.5, unit: 'meter'},\n      length: {value: 7.5, unit: 'meter'},\n      axles: 4,\n      emissionClass: 'euro_5'\n    },\n    fuelOptions: {\n      fuelCost: {value: 1.305, units: 'USD/gallon', currency: 'USD', fuelUnit: 'gallon'},\n      fuelEfficiency: {city: 28.57, hwy: 22.4, units: 'mpg'}\n    },\n    units: {currency: 'USD'},\n    departure_time: 1609507347\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node + Unirest",
            "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service\");\n\nreq.headers({\n  \"content-type\": \"application/json\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"mapProvider\": \"here\",\n  \"polyline\": \"_f`GwjixRSe@MIIEICGAIA_Al@MHIDe@VKFm@f@SLKLCFEHCF?HAF?NTH\\\\\\\\N`Ab@x@b@`@TZTPLTPZXDFBFXVZTrB~ARDLF~@ZJDTDPBVFJ@X@P@j@?N?d@ERC`@KhB{Al@i@f@Y~BaCPQJKbA_At@s@RSDEBEBCVU~A{ATW~@{@`@_@v@q@p@o@pA_AVSXSJIv@g@~@m@HEROTO@?rA{@VQ^UZSPMHGDEj@g@h@k@f@m@^g@vAqBTYp@_Ab@m@Va@R[Xg@b@u@^{@R]Pc@Vm@Pe@\\\\\\\\cA`@mAn@iB^aAp@aBn@cBt@yAFMP_@pC_GdBsDdAwBRc@fAyB`@y@Ve@pAaCxAqCf@_An@mAjBcE`BoD^w@Vo@P[Xe@JQ`@m@PULQh@o@\\\\\\\\_@l@m@r@m@pAeA`CoBxAoA\\\\\\\\YbAy@?An@i@~AqA`@a@VY^_@V[PSX_@T]T[f@y@JMHMtAcCd@}@f@_AlBoDb@y@r@sAd@{@R]\\\\\\\\o@h@y@Zc@n@_ABENQZc@TY@C\\\\\\\\_@RWFKPUPYT]BCDGl@_Af@w@^u@P_@j@sAh@mAVk@^s@^s@n@kA?Ad@u@fAeBl@eAZg@|@yA`BoCd@_AZo@Z}@J]Ng@BQJe@F_@DS@MDk@J{AFiAHmDHgDFwADiBH_D@[?E@]@c@BgALuEBcABkA@]B{AD_BBa@DaCJkCHiALyAPoAN_ALo@R}@Le@ZkAb@oATo@\\\\\\\\{@FK`@}@`@w@lA{BxAoC~AwCHOZm@l@eAHO^s@n@kAp@qANYL[L]J[Rs@FWNu@Jq@Fc@JiABw@@aBBaDDaA?m@D]\\\\\\\\cCJi@Lg@Pi@Xy@BGDMRg@DIFMHQFMJOr@qAZc@v@mAtAcBz@eANS`BuBtDoEd@m@dBoBj@o@V[LQFGhC{Cp@{@Za@LUJSHOJ[Ne@H]Fc@?AD_@Dg@@e@?I?M?M?aA?{@A}BCwA?oA?YEuB?k@Ag@C{@?A?ECs@AyA?m@ASC{CEmCA}@AYAW?KA}@CcBA{AAcA?WAUGiI?S?QAU?WAc@AgA?_@@a@@y@@e@@UBU@UVaD@MFaABc@@Y@G?i@Ak@Gk@EUI_@IY?AIUKUISQc@s@}AMWk@uAK[GOIa@I_@EYCQGm@Co@A]?M?O@]@UD[Fa@D]FWLk@Pg@N]P_@N[dBaDpBkD@AdCsEbAkBd@_APa@HUHUVaAES?EAE?E?EJ_ADk@@W@UEaAAOIm@M_ABCKa@CMESA?EMK[KWCIACAAKWs@sAq@gAEIEGS[S]GMGKWa@g@mAe@eA]OSIEAG?WAG@OBIBGDGF[b@IJKFk@`Au@pA}@~AMXcC~E_BnCY`@MT\",\n  \"locTimes\": [\n    [\n      0,\n      1660110342\n    ],\n    [\n      30,\n      1660110642\n    ],\n    [\n      60,\n      1660110942\n    ],\n    [\n      232,\n      1660111182\n    ]\n  ],\n  \"vehicle\": {\n    \"type\": \"2AxlesTaxi\",\n    \"weight\": {\n      \"value\": 20000,\n      \"unit\": \"pound\"\n    },\n    \"height\": {\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    },\n    \"length\": {\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    },\n    \"axles\": 4,\n    \"emissionClass\": \"euro_5\"\n  },\n  \"fuelOptions\": {\n    \"fuelCost\": {\n      \"value\": 1.305,\n      \"units\": \"USD/gallon\",\n      \"currency\": \"USD\",\n      \"fuelUnit\": \"gallon\"\n    },\n    \"fuelEfficiency\": {\n      \"city\": 28.57,\n      \"hwy\": 22.4,\n      \"units\": \"mpg\"\n    }\n  },\n  \"units\": {\n    \"currency\": \"USD\"\n  },\n  \"departure_time\": 1609507347\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc + Nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\" };\nNSDictionary *parameters = @{ @\"mapProvider\": @\"here\",\n                              @\"polyline\": @\"_f`GwjixRSe@MIIEICGAIA_Al@MHIDe@VKFm@f@SLKLCFEHCF?HAF?NTH\\\\N`Ab@x@b@`@TZTPLTPZXDFBFXVZTrB~ARDLF~@ZJDTDPBVFJ@X@P@j@?N?d@ERC`@KhB{Al@i@f@Y~BaCPQJKbA_At@s@RSDEBEBCVU~A{ATW~@{@`@_@v@q@p@o@pA_AVSXSJIv@g@~@m@HEROTO@?rA{@VQ^UZSPMHGDEj@g@h@k@f@m@^g@vAqBTYp@_Ab@m@Va@R[Xg@b@u@^{@R]Pc@Vm@Pe@\\\\cA`@mAn@iB^aAp@aBn@cBt@yAFMP_@pC_GdBsDdAwBRc@fAyB`@y@Ve@pAaCxAqCf@_An@mAjBcE`BoD^w@Vo@P[Xe@JQ`@m@PULQh@o@\\\\_@l@m@r@m@pAeA`CoBxAoA\\\\YbAy@?An@i@~AqA`@a@VY^_@V[PSX_@T]T[f@y@JMHMtAcCd@}@f@_AlBoDb@y@r@sAd@{@R]\\\\o@h@y@Zc@n@_ABENQZc@TY@C\\\\_@RWFKPUPYT]BCDGl@_Af@w@^u@P_@j@sAh@mAVk@^s@^s@n@kA?Ad@u@fAeBl@eAZg@|@yA`BoCd@_AZo@Z}@J]Ng@BQJe@F_@DS@MDk@J{AFiAHmDHgDFwADiBH_D@[?E@]@c@BgALuEBcABkA@]B{AD_BBa@DaCJkCHiALyAPoAN_ALo@R}@Le@ZkAb@oATo@\\\\{@FK`@}@`@w@lA{BxAoC~AwCHOZm@l@eAHO^s@n@kAp@qANYL[L]J[Rs@FWNu@Jq@Fc@JiABw@@aBBaDDaA?m@D]\\\\cCJi@Lg@Pi@Xy@BGDMRg@DIFMHQFMJOr@qAZc@v@mAtAcBz@eANS`BuBtDoEd@m@dBoBj@o@V[LQFGhC{Cp@{@Za@LUJSHOJ[Ne@H]Fc@?AD_@Dg@@e@?I?M?M?aA?{@A}BCwA?oA?YEuB?k@Ag@C{@?A?ECs@AyA?m@ASC{CEmCA}@AYAW?KA}@CcBA{AAcA?WAUGiI?S?QAU?WAc@AgA?_@@a@@y@@e@@UBU@UVaD@MFaABc@@Y@G?i@Ak@Gk@EUI_@IY?AIUKUISQc@s@}AMWk@uAK[GOIa@I_@EYCQGm@Co@A]?M?O@]@UD[Fa@D]FWLk@Pg@N]P_@N[dBaDpBkD@AdCsEbAkBd@_APa@HUHUVaAES?EAE?E?EJ_ADk@@W@UEaAAOIm@M_ABCKa@CMESA?EMK[KWCIACAAKWs@sAq@gAEIEGS[S]GMGKWa@g@mAe@eA]OSIEAG?WAG@OBIBGDGF[b@IJKFk@`Au@pA}@~AMXcC~E_BnCY`@MT\",\n                              @\"locTimes\": @[ @[ @0, @1660110342 ], @[ @30, @1660110642 ], @[ @60, @1660110942 ], @[ @232, @1660111182 ] ],\n                              @\"vehicle\": @{ @\"type\": @\"2AxlesTaxi\", @\"weight\": @{ @\"value\": @20000, @\"unit\": @\"pound\" }, @\"height\": @{ @\"value\": @7.5, @\"unit\": @\"meter\" }, @\"length\": @{ @\"value\": @7.5, @\"unit\": @\"meter\" }, @\"axles\": @4, @\"emissionClass\": @\"euro_5\" },\n                              @\"fuelOptions\": @{ @\"fuelCost\": @{ @\"value\": @1.305, @\"units\": @\"USD/gallon\", @\"currency\": @\"USD\", @\"fuelUnit\": @\"gallon\" }, @\"fuelEfficiency\": @{ @\"city\": @28.57, @\"hwy\": @22.4, @\"units\": @\"mpg\" } },\n                              @\"units\": @{ @\"currency\": @\"USD\" },\n                              @\"departure_time\": @1609507347 };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml + Cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service\" in\nlet headers = Header.add (Header.init ()) \"content-type\" \"application/json\" in\nlet body = Cohttp_lwt_body.of_string \"{\\\"mapProvider\\\":\\\"here\\\",\\\"polyline\\\":\\\"_f`GwjixRSe@MIIEICGAIA_Al@MHIDe@VKFm@f@SLKLCFEHCF?HAF?NTH\\\\\\\\\\\\\\\\N`Ab@x@b@`@TZTPLTPZXDFBFXVZTrB~ARDLF~@ZJDTDPBVFJ@X@P@j@?N?d@ERC`@KhB{Al@i@f@Y~BaCPQJKbA_At@s@RSDEBEBCVU~A{ATW~@{@`@_@v@q@p@o@pA_AVSXSJIv@g@~@m@HEROTO@?rA{@VQ^UZSPMHGDEj@g@h@k@f@m@^g@vAqBTYp@_Ab@m@Va@R[Xg@b@u@^{@R]Pc@Vm@Pe@\\\\\\\\\\\\\\\\cA`@mAn@iB^aAp@aBn@cBt@yAFMP_@pC_GdBsDdAwBRc@fAyB`@y@Ve@pAaCxAqCf@_An@mAjBcE`BoD^w@Vo@P[Xe@JQ`@m@PULQh@o@\\\\\\\\\\\\\\\\_@l@m@r@m@pAeA`CoBxAoA\\\\\\\\\\\\\\\\YbAy@?An@i@~AqA`@a@VY^_@V[PSX_@T]T[f@y@JMHMtAcCd@}@f@_AlBoDb@y@r@sAd@{@R]\\\\\\\\\\\\\\\\o@h@y@Zc@n@_ABENQZc@TY@C\\\\\\\\\\\\\\\\_@RWFKPUPYT]BCDGl@_Af@w@^u@P_@j@sAh@mAVk@^s@^s@n@kA?Ad@u@fAeBl@eAZg@|@yA`BoCd@_AZo@Z}@J]Ng@BQJe@F_@DS@MDk@J{AFiAHmDHgDFwADiBH_D@[?E@]@c@BgALuEBcABkA@]B{AD_BBa@DaCJkCHiALyAPoAN_ALo@R}@Le@ZkAb@oATo@\\\\\\\\\\\\\\\\{@FK`@}@`@w@lA{BxAoC~AwCHOZm@l@eAHO^s@n@kAp@qANYL[L]J[Rs@FWNu@Jq@Fc@JiABw@@aBBaDDaA?m@D]\\\\\\\\\\\\\\\\cCJi@Lg@Pi@Xy@BGDMRg@DIFMHQFMJOr@qAZc@v@mAtAcBz@eANS`BuBtDoEd@m@dBoBj@o@V[LQFGhC{Cp@{@Za@LUJSHOJ[Ne@H]Fc@?AD_@Dg@@e@?I?M?M?aA?{@A}BCwA?oA?YEuB?k@Ag@C{@?A?ECs@AyA?m@ASC{CEmCA}@AYAW?KA}@CcBA{AAcA?WAUGiI?S?QAU?WAc@AgA?_@@a@@y@@e@@UBU@UVaD@MFaABc@@Y@G?i@Ak@Gk@EUI_@IY?AIUKUISQc@s@}AMWk@uAK[GOIa@I_@EYCQGm@Co@A]?M?O@]@UD[Fa@D]FWLk@Pg@N]P_@N[dBaDpBkD@AdCsEbAkBd@_APa@HUHUVaAES?EAE?E?EJ_ADk@@W@UEaAAOIm@M_ABCKa@CMESA?EMK[KWCIACAAKWs@sAq@gAEIEGS[S]GMGKWa@g@mAe@eA]OSIEAG?WAG@OBIBGDGF[b@IJKFk@`Au@pA}@~AMXcC~E_BnCY`@MT\\\",\\\"locTimes\\\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"},\\\"departure_time\\\":1609507347}\" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"mapProvider\\\":\\\"here\\\",\\\"polyline\\\":\\\"_f`GwjixRSe@MIIEICGAIA_Al@MHIDe@VKFm@f@SLKLCFEHCF?HAF?NTH\\\\\\\\\\\\\\\\N`Ab@x@b@`@TZTPLTPZXDFBFXVZTrB~ARDLF~@ZJDTDPBVFJ@X@P@j@?N?d@ERC`@KhB{Al@i@f@Y~BaCPQJKbA_At@s@RSDEBEBCVU~A{ATW~@{@`@_@v@q@p@o@pA_AVSXSJIv@g@~@m@HEROTO@?rA{@VQ^UZSPMHGDEj@g@h@k@f@m@^g@vAqBTYp@_Ab@m@Va@R[Xg@b@u@^{@R]Pc@Vm@Pe@\\\\\\\\\\\\\\\\cA`@mAn@iB^aAp@aBn@cBt@yAFMP_@pC_GdBsDdAwBRc@fAyB`@y@Ve@pAaCxAqCf@_An@mAjBcE`BoD^w@Vo@P[Xe@JQ`@m@PULQh@o@\\\\\\\\\\\\\\\\_@l@m@r@m@pAeA`CoBxAoA\\\\\\\\\\\\\\\\YbAy@?An@i@~AqA`@a@VY^_@V[PSX_@T]T[f@y@JMHMtAcCd@}@f@_AlBoDb@y@r@sAd@{@R]\\\\\\\\\\\\\\\\o@h@y@Zc@n@_ABENQZc@TY@C\\\\\\\\\\\\\\\\_@RWFKPUPYT]BCDGl@_Af@w@^u@P_@j@sAh@mAVk@^s@^s@n@kA?Ad@u@fAeBl@eAZg@|@yA`BoCd@_AZo@Z}@J]Ng@BQJe@F_@DS@MDk@J{AFiAHmDHgDFwADiBH_D@[?E@]@c@BgALuEBcABkA@]B{AD_BBa@DaCJkCHiALyAPoAN_ALo@R}@Le@ZkAb@oATo@\\\\\\\\\\\\\\\\{@FK`@}@`@w@lA{BxAoC~AwCHOZm@l@eAHO^s@n@kAp@qANYL[L]J[Rs@FWNu@Jq@Fc@JiABw@@aBBaDDaA?m@D]\\\\\\\\\\\\\\\\cCJi@Lg@Pi@Xy@BGDMRg@DIFMHQFMJOr@qAZc@v@mAtAcBz@eANS`BuBtDoEd@m@dBoBj@o@V[LQFGhC{Cp@{@Za@LUJSHOJ[Ne@H]Fc@?AD_@Dg@@e@?I?M?M?aA?{@A}BCwA?oA?YEuB?k@Ag@C{@?A?ECs@AyA?m@ASC{CEmCA}@AYAW?KA}@CcBA{AAcA?WAUGiI?S?QAU?WAc@AgA?_@@a@@y@@e@@UBU@UVaD@MFaABc@@Y@G?i@Ak@Gk@EUI_@IY?AIUKUISQc@s@}AMWk@uAK[GOIa@I_@EYCQGm@Co@A]?M?O@]@UD[Fa@D]FWLk@Pg@N]P_@N[dBaDpBkD@AdCsEbAkBd@_APa@HUHUVaAES?EAE?E?EJ_ADk@@W@UEaAAOIm@M_ABCKa@CMESA?EMK[KWCIACAAKWs@sAq@gAEIEGS[S]GMGKWa@g@mAe@eA]OSIEAG?WAG@OBIBGDGF[b@IJKFk@`Au@pA}@~AMXcC~E_BnCY`@MT\\\",\\\"locTimes\\\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"},\\\"departure_time\\\":1609507347}\",\n  CURLOPT_HTTPHEADER => [\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json'\n]);\n\n$request->setBody('{\"mapProvider\":\"here\",\"polyline\":\"_f`GwjixRSe@MIIEICGAIA_Al@MHIDe@VKFm@f@SLKLCFEHCF?HAF?NTH\\\\\\\\\\\\\\\\N`Ab@x@b@`@TZTPLTPZXDFBFXVZTrB~ARDLF~@ZJDTDPBVFJ@X@P@j@?N?d@ERC`@KhB{Al@i@f@Y~BaCPQJKbA_At@s@RSDEBEBCVU~A{ATW~@{@`@_@v@q@p@o@pA_AVSXSJIv@g@~@m@HEROTO@?rA{@VQ^UZSPMHGDEj@g@h@k@f@m@^g@vAqBTYp@_Ab@m@Va@R[Xg@b@u@^{@R]Pc@Vm@Pe@\\\\\\\\\\\\\\\\cA`@mAn@iB^aAp@aBn@cBt@yAFMP_@pC_GdBsDdAwBRc@fAyB`@y@Ve@pAaCxAqCf@_An@mAjBcE`BoD^w@Vo@P[Xe@JQ`@m@PULQh@o@\\\\\\\\\\\\\\\\_@l@m@r@m@pAeA`CoBxAoA\\\\\\\\\\\\\\\\YbAy@?An@i@~AqA`@a@VY^_@V[PSX_@T]T[f@y@JMHMtAcCd@}@f@_AlBoDb@y@r@sAd@{@R]\\\\\\\\\\\\\\\\o@h@y@Zc@n@_ABENQZc@TY@C\\\\\\\\\\\\\\\\_@RWFKPUPYT]BCDGl@_Af@w@^u@P_@j@sAh@mAVk@^s@^s@n@kA?Ad@u@fAeBl@eAZg@|@yA`BoCd@_AZo@Z}@J]Ng@BQJe@F_@DS@MDk@J{AFiAHmDHgDFwADiBH_D@[?E@]@c@BgALuEBcABkA@]B{AD_BBa@DaCJkCHiALyAPoAN_ALo@R}@Le@ZkAb@oATo@\\\\\\\\\\\\\\\\{@FK`@}@`@w@lA{BxAoC~AwCHOZm@l@eAHO^s@n@kAp@qANYL[L]J[Rs@FWNu@Jq@Fc@JiABw@@aBBaDDaA?m@D]\\\\\\\\\\\\\\\\cCJi@Lg@Pi@Xy@BGDMRg@DIFMHQFMJOr@qAZc@v@mAtAcBz@eANS`BuBtDoEd@m@dBoBj@o@V[LQFGhC{Cp@{@Za@LUJSHOJ[Ne@H]Fc@?AD_@Dg@@e@?I?M?M?aA?{@A}BCwA?oA?YEuB?k@Ag@C{@?A?ECs@AyA?m@ASC{CEmCA}@AYAW?KA}@CcBA{AAcA?WAUGiI?S?QAU?WAc@AgA?_@@a@@y@@e@@UBU@UVaD@MFaABc@@Y@G?i@Ak@Gk@EUI_@IY?AIUKUISQc@s@}AMWk@uAK[GOIa@I_@EYCQGm@Co@A]?M?O@]@UD[Fa@D]FWLk@Pg@N]P_@N[dBaDpBkD@AdCsEbAkBd@_APa@HUHUVaAES?EAE?E?EJ_ADk@@W@UEaAAOIm@M_ABCKa@CMESA?EMK[KWCIACAAKWs@sAq@gAEIEGS[S]GMGKWa@g@mAe@eA]OSIEAG?WAG@OBIBGDGF[b@IJKFk@`Au@pA}@~AMXcC~E_BnCY`@MT\",\"locTimes\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\"vehicle\":{\"type\":\"2AxlesTaxi\",\"weight\":{\"value\":20000,\"unit\":\"pound\"},\"height\":{\"value\":7.5,\"unit\":\"meter\"},\"length\":{\"value\":7.5,\"unit\":\"meter\"},\"axles\":4,\"emissionClass\":\"euro_5\"},\"fuelOptions\":{\"fuelCost\":{\"value\":1.305,\"units\":\"USD/gallon\",\"currency\":\"USD\",\"fuelUnit\":\"gallon\"},\"fuelEfficiency\":{\"city\":28.57,\"hwy\":22.4,\"units\":\"mpg\"}},\"units\":{\"currency\":\"USD\"},\"departure_time\":1609507347}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"mapProvider\":\"here\",\"polyline\":\"_f`GwjixRSe@MIIEICGAIA_Al@MHIDe@VKFm@f@SLKLCFEHCF?HAF?NTH\\\\\\\\\\\\\\\\N`Ab@x@b@`@TZTPLTPZXDFBFXVZTrB~ARDLF~@ZJDTDPBVFJ@X@P@j@?N?d@ERC`@KhB{Al@i@f@Y~BaCPQJKbA_At@s@RSDEBEBCVU~A{ATW~@{@`@_@v@q@p@o@pA_AVSXSJIv@g@~@m@HEROTO@?rA{@VQ^UZSPMHGDEj@g@h@k@f@m@^g@vAqBTYp@_Ab@m@Va@R[Xg@b@u@^{@R]Pc@Vm@Pe@\\\\\\\\\\\\\\\\cA`@mAn@iB^aAp@aBn@cBt@yAFMP_@pC_GdBsDdAwBRc@fAyB`@y@Ve@pAaCxAqCf@_An@mAjBcE`BoD^w@Vo@P[Xe@JQ`@m@PULQh@o@\\\\\\\\\\\\\\\\_@l@m@r@m@pAeA`CoBxAoA\\\\\\\\\\\\\\\\YbAy@?An@i@~AqA`@a@VY^_@V[PSX_@T]T[f@y@JMHMtAcCd@}@f@_AlBoDb@y@r@sAd@{@R]\\\\\\\\\\\\\\\\o@h@y@Zc@n@_ABENQZc@TY@C\\\\\\\\\\\\\\\\_@RWFKPUPYT]BCDGl@_Af@w@^u@P_@j@sAh@mAVk@^s@^s@n@kA?Ad@u@fAeBl@eAZg@|@yA`BoCd@_AZo@Z}@J]Ng@BQJe@F_@DS@MDk@J{AFiAHmDHgDFwADiBH_D@[?E@]@c@BgALuEBcABkA@]B{AD_BBa@DaCJkCHiALyAPoAN_ALo@R}@Le@ZkAb@oATo@\\\\\\\\\\\\\\\\{@FK`@}@`@w@lA{BxAoC~AwCHOZm@l@eAHO^s@n@kAp@qANYL[L]J[Rs@FWNu@Jq@Fc@JiABw@@aBBaDDaA?m@D]\\\\\\\\\\\\\\\\cCJi@Lg@Pi@Xy@BGDMRg@DIFMHQFMJOr@qAZc@v@mAtAcBz@eANS`BuBtDoEd@m@dBoBj@o@V[LQFGhC{Cp@{@Za@LUJSHOJ[Ne@H]Fc@?AD_@Dg@@e@?I?M?M?aA?{@A}BCwA?oA?YEuB?k@Ag@C{@?A?ECs@AyA?m@ASC{CEmCA}@AYAW?KA}@CcBA{AAcA?WAUGiI?S?QAU?WAc@AgA?_@@a@@y@@e@@UBU@UVaD@MFaABc@@Y@G?i@Ak@Gk@EUI_@IY?AIUKUISQc@s@}AMWk@uAK[GOIa@I_@EYCQGm@Co@A]?M?O@]@UD[Fa@D]FWLk@Pg@N]P_@N[dBaDpBkD@AdCsEbAkBd@_APa@HUHUVaAES?EAE?E?EJ_ADk@@W@UEaAAOIm@M_ABCKa@CMESA?EMK[KWCIACAAKWs@sAq@gAEIEGS[S]GMGKWa@g@mAe@eA]OSIEAG?WAG@OBIBGDGF[b@IJKFk@`Au@pA}@~AMXcC~E_BnCY`@MT\",\"locTimes\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\"vehicle\":{\"type\":\"2AxlesTaxi\",\"weight\":{\"value\":20000,\"unit\":\"pound\"},\"height\":{\"value\":7.5,\"unit\":\"meter\"},\"length\":{\"value\":7.5,\"unit\":\"meter\"},\"axles\":4,\"emissionClass\":\"euro_5\"},\"fuelOptions\":{\"fuelCost\":{\"value\":1.305,\"units\":\"USD/gallon\",\"currency\":\"USD\",\"fuelUnit\":\"gallon\"},\"fuelEfficiency\":{\"city\":28.57,\"hwy\":22.4,\"units\":\"mpg\"}},\"units\":{\"currency\":\"USD\"},\"departure_time\":1609507347}');\n\n$request->setRequestUrl('https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"apis.tollguru.com\")\n\npayload = \"{\\\"mapProvider\\\":\\\"here\\\",\\\"polyline\\\":\\\"_f`GwjixRSe@MIIEICGAIA_Al@MHIDe@VKFm@f@SLKLCFEHCF?HAF?NTH\\\\\\\\\\\\\\\\N`Ab@x@b@`@TZTPLTPZXDFBFXVZTrB~ARDLF~@ZJDTDPBVFJ@X@P@j@?N?d@ERC`@KhB{Al@i@f@Y~BaCPQJKbA_At@s@RSDEBEBCVU~A{ATW~@{@`@_@v@q@p@o@pA_AVSXSJIv@g@~@m@HEROTO@?rA{@VQ^UZSPMHGDEj@g@h@k@f@m@^g@vAqBTYp@_Ab@m@Va@R[Xg@b@u@^{@R]Pc@Vm@Pe@\\\\\\\\\\\\\\\\cA`@mAn@iB^aAp@aBn@cBt@yAFMP_@pC_GdBsDdAwBRc@fAyB`@y@Ve@pAaCxAqCf@_An@mAjBcE`BoD^w@Vo@P[Xe@JQ`@m@PULQh@o@\\\\\\\\\\\\\\\\_@l@m@r@m@pAeA`CoBxAoA\\\\\\\\\\\\\\\\YbAy@?An@i@~AqA`@a@VY^_@V[PSX_@T]T[f@y@JMHMtAcCd@}@f@_AlBoDb@y@r@sAd@{@R]\\\\\\\\\\\\\\\\o@h@y@Zc@n@_ABENQZc@TY@C\\\\\\\\\\\\\\\\_@RWFKPUPYT]BCDGl@_Af@w@^u@P_@j@sAh@mAVk@^s@^s@n@kA?Ad@u@fAeBl@eAZg@|@yA`BoCd@_AZo@Z}@J]Ng@BQJe@F_@DS@MDk@J{AFiAHmDHgDFwADiBH_D@[?E@]@c@BgALuEBcABkA@]B{AD_BBa@DaCJkCHiALyAPoAN_ALo@R}@Le@ZkAb@oATo@\\\\\\\\\\\\\\\\{@FK`@}@`@w@lA{BxAoC~AwCHOZm@l@eAHO^s@n@kAp@qANYL[L]J[Rs@FWNu@Jq@Fc@JiABw@@aBBaDDaA?m@D]\\\\\\\\\\\\\\\\cCJi@Lg@Pi@Xy@BGDMRg@DIFMHQFMJOr@qAZc@v@mAtAcBz@eANS`BuBtDoEd@m@dBoBj@o@V[LQFGhC{Cp@{@Za@LUJSHOJ[Ne@H]Fc@?AD_@Dg@@e@?I?M?M?aA?{@A}BCwA?oA?YEuB?k@Ag@C{@?A?ECs@AyA?m@ASC{CEmCA}@AYAW?KA}@CcBA{AAcA?WAUGiI?S?QAU?WAc@AgA?_@@a@@y@@e@@UBU@UVaD@MFaABc@@Y@G?i@Ak@Gk@EUI_@IY?AIUKUISQc@s@}AMWk@uAK[GOIa@I_@EYCQGm@Co@A]?M?O@]@UD[Fa@D]FWLk@Pg@N]P_@N[dBaDpBkD@AdCsEbAkBd@_APa@HUHUVaAES?EAE?E?EJ_ADk@@W@UEaAAOIm@M_ABCKa@CMESA?EMK[KWCIACAAKWs@sAq@gAEIEGS[S]GMGKWa@g@mAe@eA]OSIEAG?WAG@OBIBGDGF[b@IJKFk@`Au@pA}@~AMXcC~E_BnCY`@MT\\\",\\\"locTimes\\\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"},\\\"departure_time\\\":1609507347}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/toll/v2/complete-polyline-from-mapping-service\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python + Requests",
            "source": "import requests\n\nurl = \"https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service\"\n\npayload = {\n    \"mapProvider\": \"here\",\n    \"polyline\": \"_f`GwjixRSe@MIIEICGAIA_Al@MHIDe@VKFm@f@SLKLCFEHCF?HAF?NTH\\\\N`Ab@x@b@`@TZTPLTPZXDFBFXVZTrB~ARDLF~@ZJDTDPBVFJ@X@P@j@?N?d@ERC`@KhB{Al@i@f@Y~BaCPQJKbA_At@s@RSDEBEBCVU~A{ATW~@{@`@_@v@q@p@o@pA_AVSXSJIv@g@~@m@HEROTO@?rA{@VQ^UZSPMHGDEj@g@h@k@f@m@^g@vAqBTYp@_Ab@m@Va@R[Xg@b@u@^{@R]Pc@Vm@Pe@\\\\cA`@mAn@iB^aAp@aBn@cBt@yAFMP_@pC_GdBsDdAwBRc@fAyB`@y@Ve@pAaCxAqCf@_An@mAjBcE`BoD^w@Vo@P[Xe@JQ`@m@PULQh@o@\\\\_@l@m@r@m@pAeA`CoBxAoA\\\\YbAy@?An@i@~AqA`@a@VY^_@V[PSX_@T]T[f@y@JMHMtAcCd@}@f@_AlBoDb@y@r@sAd@{@R]\\\\o@h@y@Zc@n@_ABENQZc@TY@C\\\\_@RWFKPUPYT]BCDGl@_Af@w@^u@P_@j@sAh@mAVk@^s@^s@n@kA?Ad@u@fAeBl@eAZg@|@yA`BoCd@_AZo@Z}@J]Ng@BQJe@F_@DS@MDk@J{AFiAHmDHgDFwADiBH_D@[?E@]@c@BgALuEBcABkA@]B{AD_BBa@DaCJkCHiALyAPoAN_ALo@R}@Le@ZkAb@oATo@\\\\{@FK`@}@`@w@lA{BxAoC~AwCHOZm@l@eAHO^s@n@kAp@qANYL[L]J[Rs@FWNu@Jq@Fc@JiABw@@aBBaDDaA?m@D]\\\\cCJi@Lg@Pi@Xy@BGDMRg@DIFMHQFMJOr@qAZc@v@mAtAcBz@eANS`BuBtDoEd@m@dBoBj@o@V[LQFGhC{Cp@{@Za@LUJSHOJ[Ne@H]Fc@?AD_@Dg@@e@?I?M?M?aA?{@A}BCwA?oA?YEuB?k@Ag@C{@?A?ECs@AyA?m@ASC{CEmCA}@AYAW?KA}@CcBA{AAcA?WAUGiI?S?QAU?WAc@AgA?_@@a@@y@@e@@UBU@UVaD@MFaABc@@Y@G?i@Ak@Gk@EUI_@IY?AIUKUISQc@s@}AMWk@uAK[GOIa@I_@EYCQGm@Co@A]?M?O@]@UD[Fa@D]FWLk@Pg@N]P_@N[dBaDpBkD@AdCsEbAkBd@_APa@HUHUVaAES?EAE?E?EJ_ADk@@W@UEaAAOIm@M_ABCKa@CMESA?EMK[KWCIACAAKWs@sAq@gAEIEGS[S]GMGKWa@g@mAe@eA]OSIEAG?WAG@OBIBGDGF[b@IJKFk@`Au@pA}@~AMXcC~E_BnCY`@MT\",\n    \"locTimes\": [[0, 1660110342], [30, 1660110642], [60, 1660110942], [232, 1660111182]],\n    \"vehicle\": {\n        \"type\": \"2AxlesTaxi\",\n        \"weight\": {\n            \"value\": 20000,\n            \"unit\": \"pound\"\n        },\n        \"height\": {\n            \"value\": 7.5,\n            \"unit\": \"meter\"\n        },\n        \"length\": {\n            \"value\": 7.5,\n            \"unit\": \"meter\"\n        },\n        \"axles\": 4,\n        \"emissionClass\": \"euro_5\"\n    },\n    \"fuelOptions\": {\n        \"fuelCost\": {\n            \"value\": 1.305,\n            \"units\": \"USD/gallon\",\n            \"currency\": \"USD\",\n            \"fuelUnit\": \"gallon\"\n        },\n        \"fuelEfficiency\": {\n            \"city\": 28.57,\n            \"hwy\": 22.4,\n            \"units\": \"mpg\"\n        }\n    },\n    \"units\": {\"currency\": \"USD\"},\n    \"departure_time\": 1609507347\n}\nheaders = {\"content-type\": \"application/json\"}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"mapProvider\\\":\\\"here\\\",\\\"polyline\\\":\\\"_f`GwjixRSe@MIIEICGAIA_Al@MHIDe@VKFm@f@SLKLCFEHCF?HAF?NTH\\\\\\\\\\\\\\\\N`Ab@x@b@`@TZTPLTPZXDFBFXVZTrB~ARDLF~@ZJDTDPBVFJ@X@P@j@?N?d@ERC`@KhB{Al@i@f@Y~BaCPQJKbA_At@s@RSDEBEBCVU~A{ATW~@{@`@_@v@q@p@o@pA_AVSXSJIv@g@~@m@HEROTO@?rA{@VQ^UZSPMHGDEj@g@h@k@f@m@^g@vAqBTYp@_Ab@m@Va@R[Xg@b@u@^{@R]Pc@Vm@Pe@\\\\\\\\\\\\\\\\cA`@mAn@iB^aAp@aBn@cBt@yAFMP_@pC_GdBsDdAwBRc@fAyB`@y@Ve@pAaCxAqCf@_An@mAjBcE`BoD^w@Vo@P[Xe@JQ`@m@PULQh@o@\\\\\\\\\\\\\\\\_@l@m@r@m@pAeA`CoBxAoA\\\\\\\\\\\\\\\\YbAy@?An@i@~AqA`@a@VY^_@V[PSX_@T]T[f@y@JMHMtAcCd@}@f@_AlBoDb@y@r@sAd@{@R]\\\\\\\\\\\\\\\\o@h@y@Zc@n@_ABENQZc@TY@C\\\\\\\\\\\\\\\\_@RWFKPUPYT]BCDGl@_Af@w@^u@P_@j@sAh@mAVk@^s@^s@n@kA?Ad@u@fAeBl@eAZg@|@yA`BoCd@_AZo@Z}@J]Ng@BQJe@F_@DS@MDk@J{AFiAHmDHgDFwADiBH_D@[?E@]@c@BgALuEBcABkA@]B{AD_BBa@DaCJkCHiALyAPoAN_ALo@R}@Le@ZkAb@oATo@\\\\\\\\\\\\\\\\{@FK`@}@`@w@lA{BxAoC~AwCHOZm@l@eAHO^s@n@kAp@qANYL[L]J[Rs@FWNu@Jq@Fc@JiABw@@aBBaDDaA?m@D]\\\\\\\\\\\\\\\\cCJi@Lg@Pi@Xy@BGDMRg@DIFMHQFMJOr@qAZc@v@mAtAcBz@eANS`BuBtDoEd@m@dBoBj@o@V[LQFGhC{Cp@{@Za@LUJSHOJ[Ne@H]Fc@?AD_@Dg@@e@?I?M?M?aA?{@A}BCwA?oA?YEuB?k@Ag@C{@?A?ECs@AyA?m@ASC{CEmCA}@AYAW?KA}@CcBA{AAcA?WAUGiI?S?QAU?WAc@AgA?_@@a@@y@@e@@UBU@UVaD@MFaABc@@Y@G?i@Ak@Gk@EUI_@IY?AIUKUISQc@s@}AMWk@uAK[GOIa@I_@EYCQGm@Co@A]?M?O@]@UD[Fa@D]FWLk@Pg@N]P_@N[dBaDpBkD@AdCsEbAkBd@_APa@HUHUVaAES?EAE?E?EJ_ADk@@W@UEaAAOIm@M_ABCKa@CMESA?EMK[KWCIACAAKWs@sAq@gAEIEGS[S]GMGKWa@g@mAe@eA]OSIEAG?WAG@OBIBGDGF[b@IJKFk@`Au@pA}@~AMXcC~E_BnCY`@MT\\\",\\\"locTimes\\\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"},\\\"departure_time\\\":1609507347}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service \\\n  --header 'content-type: application/json' \\\n  --data '{\"mapProvider\":\"here\",\"polyline\":\"_f`GwjixRSe@MIIEICGAIA_Al@MHIDe@VKFm@f@SLKLCFEHCF?HAF?NTH\\\\\\\\N`Ab@x@b@`@TZTPLTPZXDFBFXVZTrB~ARDLF~@ZJDTDPBVFJ@X@P@j@?N?d@ERC`@KhB{Al@i@f@Y~BaCPQJKbA_At@s@RSDEBEBCVU~A{ATW~@{@`@_@v@q@p@o@pA_AVSXSJIv@g@~@m@HEROTO@?rA{@VQ^UZSPMHGDEj@g@h@k@f@m@^g@vAqBTYp@_Ab@m@Va@R[Xg@b@u@^{@R]Pc@Vm@Pe@\\\\\\\\cA`@mAn@iB^aAp@aBn@cBt@yAFMP_@pC_GdBsDdAwBRc@fAyB`@y@Ve@pAaCxAqCf@_An@mAjBcE`BoD^w@Vo@P[Xe@JQ`@m@PULQh@o@\\\\\\\\_@l@m@r@m@pAeA`CoBxAoA\\\\\\\\YbAy@?An@i@~AqA`@a@VY^_@V[PSX_@T]T[f@y@JMHMtAcCd@}@f@_AlBoDb@y@r@sAd@{@R]\\\\\\\\o@h@y@Zc@n@_ABENQZc@TY@C\\\\\\\\_@RWFKPUPYT]BCDGl@_Af@w@^u@P_@j@sAh@mAVk@^s@^s@n@kA?Ad@u@fAeBl@eAZg@|@yA`BoCd@_AZo@Z}@J]Ng@BQJe@F_@DS@MDk@J{AFiAHmDHgDFwADiBH_D@[?E@]@c@BgALuEBcABkA@]B{AD_BBa@DaCJkCHiALyAPoAN_ALo@R}@Le@ZkAb@oATo@\\\\\\\\{@FK`@}@`@w@lA{BxAoC~AwCHOZm@l@eAHO^s@n@kAp@qANYL[L]J[Rs@FWNu@Jq@Fc@JiABw@@aBBaDDaA?m@D]\\\\\\\\cCJi@Lg@Pi@Xy@BGDMRg@DIFMHQFMJOr@qAZc@v@mAtAcBz@eANS`BuBtDoEd@m@dBoBj@o@V[LQFGhC{Cp@{@Za@LUJSHOJ[Ne@H]Fc@?AD_@Dg@@e@?I?M?M?aA?{@A}BCwA?oA?YEuB?k@Ag@C{@?A?ECs@AyA?m@ASC{CEmCA}@AYAW?KA}@CcBA{AAcA?WAUGiI?S?QAU?WAc@AgA?_@@a@@y@@e@@UBU@UVaD@MFaABc@@Y@G?i@Ak@Gk@EUI_@IY?AIUKUISQc@s@}AMWk@uAK[GOIa@I_@EYCQGm@Co@A]?M?O@]@UD[Fa@D]FWLk@Pg@N]P_@N[dBaDpBkD@AdCsEbAkBd@_APa@HUHUVaAES?EAE?E?EJ_ADk@@W@UEaAAOIm@M_ABCKa@CMESA?EMK[KWCIACAAKWs@sAq@gAEIEGS[S]GMGKWa@g@mAe@eA]OSIEAG?WAG@OBIBGDGF[b@IJKFk@`Au@pA}@~AMXcC~E_BnCY`@MT\",\"locTimes\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\"vehicle\":{\"type\":\"2AxlesTaxi\",\"weight\":{\"value\":20000,\"unit\":\"pound\"},\"height\":{\"value\":7.5,\"unit\":\"meter\"},\"length\":{\"value\":7.5,\"unit\":\"meter\"},\"axles\":4,\"emissionClass\":\"euro_5\"},\"fuelOptions\":{\"fuelCost\":{\"value\":1.305,\"units\":\"USD/gallon\",\"currency\":\"USD\",\"fuelUnit\":\"gallon\"},\"fuelEfficiency\":{\"city\":28.57,\"hwy\":22.4,\"units\":\"mpg\"}},\"units\":{\"currency\":\"USD\"},\"departure_time\":1609507347}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"mapProvider\":\"here\",\"polyline\":\"_f`GwjixRSe@MIIEICGAIA_Al@MHIDe@VKFm@f@SLKLCFEHCF?HAF?NTH\\\\\\\\N`Ab@x@b@`@TZTPLTPZXDFBFXVZTrB~ARDLF~@ZJDTDPBVFJ@X@P@j@?N?d@ERC`@KhB{Al@i@f@Y~BaCPQJKbA_At@s@RSDEBEBCVU~A{ATW~@{@`@_@v@q@p@o@pA_AVSXSJIv@g@~@m@HEROTO@?rA{@VQ^UZSPMHGDEj@g@h@k@f@m@^g@vAqBTYp@_Ab@m@Va@R[Xg@b@u@^{@R]Pc@Vm@Pe@\\\\\\\\cA`@mAn@iB^aAp@aBn@cBt@yAFMP_@pC_GdBsDdAwBRc@fAyB`@y@Ve@pAaCxAqCf@_An@mAjBcE`BoD^w@Vo@P[Xe@JQ`@m@PULQh@o@\\\\\\\\_@l@m@r@m@pAeA`CoBxAoA\\\\\\\\YbAy@?An@i@~AqA`@a@VY^_@V[PSX_@T]T[f@y@JMHMtAcCd@}@f@_AlBoDb@y@r@sAd@{@R]\\\\\\\\o@h@y@Zc@n@_ABENQZc@TY@C\\\\\\\\_@RWFKPUPYT]BCDGl@_Af@w@^u@P_@j@sAh@mAVk@^s@^s@n@kA?Ad@u@fAeBl@eAZg@|@yA`BoCd@_AZo@Z}@J]Ng@BQJe@F_@DS@MDk@J{AFiAHmDHgDFwADiBH_D@[?E@]@c@BgALuEBcABkA@]B{AD_BBa@DaCJkCHiALyAPoAN_ALo@R}@Le@ZkAb@oATo@\\\\\\\\{@FK`@}@`@w@lA{BxAoC~AwCHOZm@l@eAHO^s@n@kAp@qANYL[L]J[Rs@FWNu@Jq@Fc@JiABw@@aBBaDDaA?m@D]\\\\\\\\cCJi@Lg@Pi@Xy@BGDMRg@DIFMHQFMJOr@qAZc@v@mAtAcBz@eANS`BuBtDoEd@m@dBoBj@o@V[LQFGhC{Cp@{@Za@LUJSHOJ[Ne@H]Fc@?AD_@Dg@@e@?I?M?M?aA?{@A}BCwA?oA?YEuB?k@Ag@C{@?A?ECs@AyA?m@ASC{CEmCA}@AYAW?KA}@CcBA{AAcA?WAUGiI?S?QAU?WAc@AgA?_@@a@@y@@e@@UBU@UVaD@MFaABc@@Y@G?i@Ak@Gk@EUI_@IY?AIUKUISQc@s@}AMWk@uAK[GOIa@I_@EYCQGm@Co@A]?M?O@]@UD[Fa@D]FWLk@Pg@N]P_@N[dBaDpBkD@AdCsEbAkBd@_APa@HUHUVaAES?EAE?E?EJ_ADk@@W@UEaAAOIm@M_ABCKa@CMESA?EMK[KWCIACAAKWs@sAq@gAEIEGS[S]GMGKWa@g@mAe@eA]OSIEAG?WAG@OBIBGDGF[b@IJKFk@`Au@pA}@~AMXcC~E_BnCY`@MT\",\"locTimes\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\"vehicle\":{\"type\":\"2AxlesTaxi\",\"weight\":{\"value\":20000,\"unit\":\"pound\"},\"height\":{\"value\":7.5,\"unit\":\"meter\"},\"length\":{\"value\":7.5,\"unit\":\"meter\"},\"axles\":4,\"emissionClass\":\"euro_5\"},\"fuelOptions\":{\"fuelCost\":{\"value\":1.305,\"units\":\"USD/gallon\",\"currency\":\"USD\",\"fuelUnit\":\"gallon\"},\"fuelEfficiency\":{\"city\":28.57,\"hwy\":22.4,\"units\":\"mpg\"}},\"units\":{\"currency\":\"USD\"},\"departure_time\":1609507347}' |  \\\n  http POST https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service \\\n  content-type:application/json"
          },
          {
            "lang": "Shell + Wget",
            "source": "wget --quiet \\\n  --method POST \\\n  --header 'content-type: application/json' \\\n  --body-data '{\"mapProvider\":\"here\",\"polyline\":\"_f`GwjixRSe@MIIEICGAIA_Al@MHIDe@VKFm@f@SLKLCFEHCF?HAF?NTH\\\\\\\\N`Ab@x@b@`@TZTPLTPZXDFBFXVZTrB~ARDLF~@ZJDTDPBVFJ@X@P@j@?N?d@ERC`@KhB{Al@i@f@Y~BaCPQJKbA_At@s@RSDEBEBCVU~A{ATW~@{@`@_@v@q@p@o@pA_AVSXSJIv@g@~@m@HEROTO@?rA{@VQ^UZSPMHGDEj@g@h@k@f@m@^g@vAqBTYp@_Ab@m@Va@R[Xg@b@u@^{@R]Pc@Vm@Pe@\\\\\\\\cA`@mAn@iB^aAp@aBn@cBt@yAFMP_@pC_GdBsDdAwBRc@fAyB`@y@Ve@pAaCxAqCf@_An@mAjBcE`BoD^w@Vo@P[Xe@JQ`@m@PULQh@o@\\\\\\\\_@l@m@r@m@pAeA`CoBxAoA\\\\\\\\YbAy@?An@i@~AqA`@a@VY^_@V[PSX_@T]T[f@y@JMHMtAcCd@}@f@_AlBoDb@y@r@sAd@{@R]\\\\\\\\o@h@y@Zc@n@_ABENQZc@TY@C\\\\\\\\_@RWFKPUPYT]BCDGl@_Af@w@^u@P_@j@sAh@mAVk@^s@^s@n@kA?Ad@u@fAeBl@eAZg@|@yA`BoCd@_AZo@Z}@J]Ng@BQJe@F_@DS@MDk@J{AFiAHmDHgDFwADiBH_D@[?E@]@c@BgALuEBcABkA@]B{AD_BBa@DaCJkCHiALyAPoAN_ALo@R}@Le@ZkAb@oATo@\\\\\\\\{@FK`@}@`@w@lA{BxAoC~AwCHOZm@l@eAHO^s@n@kAp@qANYL[L]J[Rs@FWNu@Jq@Fc@JiABw@@aBBaDDaA?m@D]\\\\\\\\cCJi@Lg@Pi@Xy@BGDMRg@DIFMHQFMJOr@qAZc@v@mAtAcBz@eANS`BuBtDoEd@m@dBoBj@o@V[LQFGhC{Cp@{@Za@LUJSHOJ[Ne@H]Fc@?AD_@Dg@@e@?I?M?M?aA?{@A}BCwA?oA?YEuB?k@Ag@C{@?A?ECs@AyA?m@ASC{CEmCA}@AYAW?KA}@CcBA{AAcA?WAUGiI?S?QAU?WAc@AgA?_@@a@@y@@e@@UBU@UVaD@MFaABc@@Y@G?i@Ak@Gk@EUI_@IY?AIUKUISQc@s@}AMWk@uAK[GOIa@I_@EYCQGm@Co@A]?M?O@]@UD[Fa@D]FWLk@Pg@N]P_@N[dBaDpBkD@AdCsEbAkBd@_APa@HUHUVaAES?EAE?E?EJ_ADk@@W@UEaAAOIm@M_ABCKa@CMESA?EMK[KWCIACAAKWs@sAq@gAEIEGS[S]GMGKWa@g@mAe@eA]OSIEAG?WAG@OBIBGDGF[b@IJKFk@`Au@pA}@~AMXcC~E_BnCY`@MT\",\"locTimes\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\"vehicle\":{\"type\":\"2AxlesTaxi\",\"weight\":{\"value\":20000,\"unit\":\"pound\"},\"height\":{\"value\":7.5,\"unit\":\"meter\"},\"length\":{\"value\":7.5,\"unit\":\"meter\"},\"axles\":4,\"emissionClass\":\"euro_5\"},\"fuelOptions\":{\"fuelCost\":{\"value\":1.305,\"units\":\"USD/gallon\",\"currency\":\"USD\",\"fuelUnit\":\"gallon\"},\"fuelEfficiency\":{\"city\":28.57,\"hwy\":22.4,\"units\":\"mpg\"}},\"units\":{\"currency\":\"USD\"},\"departure_time\":1609507347}' \\\n  --output-document \\\n  - https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service"
          },
          {
            "lang": "Swift + Nsurlsession",
            "source": "import Foundation\n\nlet headers = [\"content-type\": \"application/json\"]\nlet parameters = [\n  \"mapProvider\": \"here\",\n  \"polyline\": \"_f`GwjixRSe@MIIEICGAIA_Al@MHIDe@VKFm@f@SLKLCFEHCF?HAF?NTH\\\\N`Ab@x@b@`@TZTPLTPZXDFBFXVZTrB~ARDLF~@ZJDTDPBVFJ@X@P@j@?N?d@ERC`@KhB{Al@i@f@Y~BaCPQJKbA_At@s@RSDEBEBCVU~A{ATW~@{@`@_@v@q@p@o@pA_AVSXSJIv@g@~@m@HEROTO@?rA{@VQ^UZSPMHGDEj@g@h@k@f@m@^g@vAqBTYp@_Ab@m@Va@R[Xg@b@u@^{@R]Pc@Vm@Pe@\\\\cA`@mAn@iB^aAp@aBn@cBt@yAFMP_@pC_GdBsDdAwBRc@fAyB`@y@Ve@pAaCxAqCf@_An@mAjBcE`BoD^w@Vo@P[Xe@JQ`@m@PULQh@o@\\\\_@l@m@r@m@pAeA`CoBxAoA\\\\YbAy@?An@i@~AqA`@a@VY^_@V[PSX_@T]T[f@y@JMHMtAcCd@}@f@_AlBoDb@y@r@sAd@{@R]\\\\o@h@y@Zc@n@_ABENQZc@TY@C\\\\_@RWFKPUPYT]BCDGl@_Af@w@^u@P_@j@sAh@mAVk@^s@^s@n@kA?Ad@u@fAeBl@eAZg@|@yA`BoCd@_AZo@Z}@J]Ng@BQJe@F_@DS@MDk@J{AFiAHmDHgDFwADiBH_D@[?E@]@c@BgALuEBcABkA@]B{AD_BBa@DaCJkCHiALyAPoAN_ALo@R}@Le@ZkAb@oATo@\\\\{@FK`@}@`@w@lA{BxAoC~AwCHOZm@l@eAHO^s@n@kAp@qANYL[L]J[Rs@FWNu@Jq@Fc@JiABw@@aBBaDDaA?m@D]\\\\cCJi@Lg@Pi@Xy@BGDMRg@DIFMHQFMJOr@qAZc@v@mAtAcBz@eANS`BuBtDoEd@m@dBoBj@o@V[LQFGhC{Cp@{@Za@LUJSHOJ[Ne@H]Fc@?AD_@Dg@@e@?I?M?M?aA?{@A}BCwA?oA?YEuB?k@Ag@C{@?A?ECs@AyA?m@ASC{CEmCA}@AYAW?KA}@CcBA{AAcA?WAUGiI?S?QAU?WAc@AgA?_@@a@@y@@e@@UBU@UVaD@MFaABc@@Y@G?i@Ak@Gk@EUI_@IY?AIUKUISQc@s@}AMWk@uAK[GOIa@I_@EYCQGm@Co@A]?M?O@]@UD[Fa@D]FWLk@Pg@N]P_@N[dBaDpBkD@AdCsEbAkBd@_APa@HUHUVaAES?EAE?E?EJ_ADk@@W@UEaAAOIm@M_ABCKa@CMESA?EMK[KWCIACAAKWs@sAq@gAEIEGS[S]GMGKWa@g@mAe@eA]OSIEAG?WAG@OBIBGDGF[b@IJKFk@`Au@pA}@~AMXcC~E_BnCY`@MT\",\n  \"locTimes\": [[0, 1660110342], [30, 1660110642], [60, 1660110942], [232, 1660111182]],\n  \"vehicle\": [\n    \"type\": \"2AxlesTaxi\",\n    \"weight\": [\n      \"value\": 20000,\n      \"unit\": \"pound\"\n    ],\n    \"height\": [\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    ],\n    \"length\": [\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    ],\n    \"axles\": 4,\n    \"emissionClass\": \"euro_5\"\n  ],\n  \"fuelOptions\": [\n    \"fuelCost\": [\n      \"value\": 1.305,\n      \"units\": \"USD/gallon\",\n      \"currency\": \"USD\",\n      \"fuelUnit\": \"gallon\"\n    ],\n    \"fuelEfficiency\": [\n      \"city\": 28.57,\n      \"hwy\": 22.4,\n      \"units\": \"mpg\"\n    ]\n  ],\n  \"units\": [\"currency\": \"USD\"],\n  \"departure_time\": 1609507347\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
          }
        ]
      }
    },
    "/toll/v2/complete-polyline-from-mapping-service/#": {
      "post": {
        "tags": [
          "Tolls for complete route polyline from a mapping service"
        ],
        "summary": "Route polyline - Latitude, Longitude",
        "description": "You will receive toll information for all tolls on the single route you requested. You will need to get the complete route from your mapping service (and not just origin, destination and some stops on the route) to receive accurate toll information.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C + Libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service/#\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"mapProvider\\\":\\\"here\\\",\\\"path\\\":\\\"43.64183,-79.38246|...|18.63085,-100.12845\\\",\\\"locTimes\\\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"departure_time\\\":\\\"2021-01-15T13:46:17\\\",\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"}}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service/#\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"mapProvider\\\":\\\"here\\\",\\\"path\\\":\\\"43.64183,-79.38246|...|18.63085,-100.12845\\\",\\\"locTimes\\\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"departure_time\\\":\\\"2021-01-15T13:46:17\\\",\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service/#\"\n\n\tpayload := strings.NewReader(\"{\\\"mapProvider\\\":\\\"here\\\",\\\"path\\\":\\\"43.64183,-79.38246|...|18.63085,-100.12845\\\",\\\"locTimes\\\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"departure_time\\\":\\\"2021-01-15T13:46:17\\\",\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java + Okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"mapProvider\\\":\\\"here\\\",\\\"path\\\":\\\"43.64183,-79.38246|...|18.63085,-100.12845\\\",\\\"locTimes\\\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"departure_time\\\":\\\"2021-01-15T13:46:17\\\",\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service/#\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service/#\")\n  .header(\"content-type\", \"application/json\")\n  .body(\"{\\\"mapProvider\\\":\\\"here\\\",\\\"path\\\":\\\"43.64183,-79.38246|...|18.63085,-100.12845\\\",\\\"locTimes\\\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"departure_time\\\":\\\"2021-01-15T13:46:17\\\",\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"}}\")\n  .asString();"
          },
          {
            "lang": "Javascript + Jquery",
            "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service/#\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"mapProvider\\\":\\\"here\\\",\\\"path\\\":\\\"43.64183,-79.38246|...|18.63085,-100.12845\\\",\\\"locTimes\\\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"departure_time\\\":\\\"2021-01-15T13:46:17\\\",\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = JSON.stringify({\n  \"mapProvider\": \"here\",\n  \"path\": \"43.64183,-79.38246|...|18.63085,-100.12845\",\n  \"locTimes\": [\n    [\n      0,\n      1660110342\n    ],\n    [\n      30,\n      1660110642\n    ],\n    [\n      60,\n      1660110942\n    ],\n    [\n      232,\n      1660111182\n    ]\n  ],\n  \"vehicle\": {\n    \"type\": \"2AxlesTaxi\",\n    \"weight\": {\n      \"value\": 20000,\n      \"unit\": \"pound\"\n    },\n    \"height\": {\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    },\n    \"length\": {\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    },\n    \"axles\": 4,\n    \"emissionClass\": \"euro_5\"\n  },\n  \"departure_time\": \"2021-01-15T13:46:17\",\n  \"fuelOptions\": {\n    \"fuelCost\": {\n      \"value\": 1.305,\n      \"units\": \"USD/gallon\",\n      \"currency\": \"USD\",\n      \"fuelUnit\": \"gallon\"\n    },\n    \"fuelEfficiency\": {\n      \"city\": 28.57,\n      \"hwy\": 22.4,\n      \"units\": \"mpg\"\n    }\n  },\n  \"units\": {\n    \"currency\": \"USD\"\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service/#\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"apis.tollguru.com\",\n  \"port\": null,\n  \"path\": \"/toll/v2/complete-polyline-from-mapping-service/\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  mapProvider: 'here',\n  path: '43.64183,-79.38246|...|18.63085,-100.12845',\n  locTimes: [[0, 1660110342], [30, 1660110642], [60, 1660110942], [232, 1660111182]],\n  vehicle: {\n    type: '2AxlesTaxi',\n    weight: {value: 20000, unit: 'pound'},\n    height: {value: 7.5, unit: 'meter'},\n    length: {value: 7.5, unit: 'meter'},\n    axles: 4,\n    emissionClass: 'euro_5'\n  },\n  departure_time: '2021-01-15T13:46:17',\n  fuelOptions: {\n    fuelCost: {value: 1.305, units: 'USD/gallon', currency: 'USD', fuelUnit: 'gallon'},\n    fuelEfficiency: {city: 28.57, hwy: 22.4, units: 'mpg'}\n  },\n  units: {currency: 'USD'}\n}));\nreq.end();"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service/#',\n  headers: {'content-type': 'application/json'},\n  body: {\n    mapProvider: 'here',\n    path: '43.64183,-79.38246|...|18.63085,-100.12845',\n    locTimes: [[0, 1660110342], [30, 1660110642], [60, 1660110942], [232, 1660111182]],\n    vehicle: {\n      type: '2AxlesTaxi',\n      weight: {value: 20000, unit: 'pound'},\n      height: {value: 7.5, unit: 'meter'},\n      length: {value: 7.5, unit: 'meter'},\n      axles: 4,\n      emissionClass: 'euro_5'\n    },\n    departure_time: '2021-01-15T13:46:17',\n    fuelOptions: {\n      fuelCost: {value: 1.305, units: 'USD/gallon', currency: 'USD', fuelUnit: 'gallon'},\n      fuelEfficiency: {city: 28.57, hwy: 22.4, units: 'mpg'}\n    },\n    units: {currency: 'USD'}\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node + Unirest",
            "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service/#\");\n\nreq.headers({\n  \"content-type\": \"application/json\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"mapProvider\": \"here\",\n  \"path\": \"43.64183,-79.38246|...|18.63085,-100.12845\",\n  \"locTimes\": [\n    [\n      0,\n      1660110342\n    ],\n    [\n      30,\n      1660110642\n    ],\n    [\n      60,\n      1660110942\n    ],\n    [\n      232,\n      1660111182\n    ]\n  ],\n  \"vehicle\": {\n    \"type\": \"2AxlesTaxi\",\n    \"weight\": {\n      \"value\": 20000,\n      \"unit\": \"pound\"\n    },\n    \"height\": {\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    },\n    \"length\": {\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    },\n    \"axles\": 4,\n    \"emissionClass\": \"euro_5\"\n  },\n  \"departure_time\": \"2021-01-15T13:46:17\",\n  \"fuelOptions\": {\n    \"fuelCost\": {\n      \"value\": 1.305,\n      \"units\": \"USD/gallon\",\n      \"currency\": \"USD\",\n      \"fuelUnit\": \"gallon\"\n    },\n    \"fuelEfficiency\": {\n      \"city\": 28.57,\n      \"hwy\": 22.4,\n      \"units\": \"mpg\"\n    }\n  },\n  \"units\": {\n    \"currency\": \"USD\"\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc + Nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\" };\nNSDictionary *parameters = @{ @\"mapProvider\": @\"here\",\n                              @\"path\": @\"43.64183,-79.38246|...|18.63085,-100.12845\",\n                              @\"locTimes\": @[ @[ @0, @1660110342 ], @[ @30, @1660110642 ], @[ @60, @1660110942 ], @[ @232, @1660111182 ] ],\n                              @\"vehicle\": @{ @\"type\": @\"2AxlesTaxi\", @\"weight\": @{ @\"value\": @20000, @\"unit\": @\"pound\" }, @\"height\": @{ @\"value\": @7.5, @\"unit\": @\"meter\" }, @\"length\": @{ @\"value\": @7.5, @\"unit\": @\"meter\" }, @\"axles\": @4, @\"emissionClass\": @\"euro_5\" },\n                              @\"departure_time\": @\"2021-01-15T13:46:17\",\n                              @\"fuelOptions\": @{ @\"fuelCost\": @{ @\"value\": @1.305, @\"units\": @\"USD/gallon\", @\"currency\": @\"USD\", @\"fuelUnit\": @\"gallon\" }, @\"fuelEfficiency\": @{ @\"city\": @28.57, @\"hwy\": @22.4, @\"units\": @\"mpg\" } },\n                              @\"units\": @{ @\"currency\": @\"USD\" } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service/#\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml + Cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service/#\" in\nlet headers = Header.add (Header.init ()) \"content-type\" \"application/json\" in\nlet body = Cohttp_lwt_body.of_string \"{\\\"mapProvider\\\":\\\"here\\\",\\\"path\\\":\\\"43.64183,-79.38246|...|18.63085,-100.12845\\\",\\\"locTimes\\\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"departure_time\\\":\\\"2021-01-15T13:46:17\\\",\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"}}\" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service/#\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"mapProvider\\\":\\\"here\\\",\\\"path\\\":\\\"43.64183,-79.38246|...|18.63085,-100.12845\\\",\\\"locTimes\\\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"departure_time\\\":\\\"2021-01-15T13:46:17\\\",\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service/#');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json'\n]);\n\n$request->setBody('{\"mapProvider\":\"here\",\"path\":\"43.64183,-79.38246|...|18.63085,-100.12845\",\"locTimes\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\"vehicle\":{\"type\":\"2AxlesTaxi\",\"weight\":{\"value\":20000,\"unit\":\"pound\"},\"height\":{\"value\":7.5,\"unit\":\"meter\"},\"length\":{\"value\":7.5,\"unit\":\"meter\"},\"axles\":4,\"emissionClass\":\"euro_5\"},\"departure_time\":\"2021-01-15T13:46:17\",\"fuelOptions\":{\"fuelCost\":{\"value\":1.305,\"units\":\"USD/gallon\",\"currency\":\"USD\",\"fuelUnit\":\"gallon\"},\"fuelEfficiency\":{\"city\":28.57,\"hwy\":22.4,\"units\":\"mpg\"}},\"units\":{\"currency\":\"USD\"}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"mapProvider\":\"here\",\"path\":\"43.64183,-79.38246|...|18.63085,-100.12845\",\"locTimes\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\"vehicle\":{\"type\":\"2AxlesTaxi\",\"weight\":{\"value\":20000,\"unit\":\"pound\"},\"height\":{\"value\":7.5,\"unit\":\"meter\"},\"length\":{\"value\":7.5,\"unit\":\"meter\"},\"axles\":4,\"emissionClass\":\"euro_5\"},\"departure_time\":\"2021-01-15T13:46:17\",\"fuelOptions\":{\"fuelCost\":{\"value\":1.305,\"units\":\"USD/gallon\",\"currency\":\"USD\",\"fuelUnit\":\"gallon\"},\"fuelEfficiency\":{\"city\":28.57,\"hwy\":22.4,\"units\":\"mpg\"}},\"units\":{\"currency\":\"USD\"}}');\n\n$request->setRequestUrl('https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service/#');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"apis.tollguru.com\")\n\npayload = \"{\\\"mapProvider\\\":\\\"here\\\",\\\"path\\\":\\\"43.64183,-79.38246|...|18.63085,-100.12845\\\",\\\"locTimes\\\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"departure_time\\\":\\\"2021-01-15T13:46:17\\\",\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"}}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/toll/v2/complete-polyline-from-mapping-service/\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python + Requests",
            "source": "import requests\n\nurl = \"https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service/#\"\n\npayload = {\n    \"mapProvider\": \"here\",\n    \"path\": \"43.64183,-79.38246|...|18.63085,-100.12845\",\n    \"locTimes\": [[0, 1660110342], [30, 1660110642], [60, 1660110942], [232, 1660111182]],\n    \"vehicle\": {\n        \"type\": \"2AxlesTaxi\",\n        \"weight\": {\n            \"value\": 20000,\n            \"unit\": \"pound\"\n        },\n        \"height\": {\n            \"value\": 7.5,\n            \"unit\": \"meter\"\n        },\n        \"length\": {\n            \"value\": 7.5,\n            \"unit\": \"meter\"\n        },\n        \"axles\": 4,\n        \"emissionClass\": \"euro_5\"\n    },\n    \"departure_time\": \"2021-01-15T13:46:17\",\n    \"fuelOptions\": {\n        \"fuelCost\": {\n            \"value\": 1.305,\n            \"units\": \"USD/gallon\",\n            \"currency\": \"USD\",\n            \"fuelUnit\": \"gallon\"\n        },\n        \"fuelEfficiency\": {\n            \"city\": 28.57,\n            \"hwy\": 22.4,\n            \"units\": \"mpg\"\n        }\n    },\n    \"units\": {\"currency\": \"USD\"}\n}\nheaders = {\"content-type\": \"application/json\"}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service/#\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"mapProvider\\\":\\\"here\\\",\\\"path\\\":\\\"43.64183,-79.38246|...|18.63085,-100.12845\\\",\\\"locTimes\\\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\\\"vehicle\\\":{\\\"type\\\":\\\"2AxlesTaxi\\\",\\\"weight\\\":{\\\"value\\\":20000,\\\"unit\\\":\\\"pound\\\"},\\\"height\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"length\\\":{\\\"value\\\":7.5,\\\"unit\\\":\\\"meter\\\"},\\\"axles\\\":4,\\\"emissionClass\\\":\\\"euro_5\\\"},\\\"departure_time\\\":\\\"2021-01-15T13:46:17\\\",\\\"fuelOptions\\\":{\\\"fuelCost\\\":{\\\"value\\\":1.305,\\\"units\\\":\\\"USD/gallon\\\",\\\"currency\\\":\\\"USD\\\",\\\"fuelUnit\\\":\\\"gallon\\\"},\\\"fuelEfficiency\\\":{\\\"city\\\":28.57,\\\"hwy\\\":22.4,\\\"units\\\":\\\"mpg\\\"}},\\\"units\\\":{\\\"currency\\\":\\\"USD\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url 'https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service/#' \\\n  --header 'content-type: application/json' \\\n  --data '{\"mapProvider\":\"here\",\"path\":\"43.64183,-79.38246|...|18.63085,-100.12845\",\"locTimes\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\"vehicle\":{\"type\":\"2AxlesTaxi\",\"weight\":{\"value\":20000,\"unit\":\"pound\"},\"height\":{\"value\":7.5,\"unit\":\"meter\"},\"length\":{\"value\":7.5,\"unit\":\"meter\"},\"axles\":4,\"emissionClass\":\"euro_5\"},\"departure_time\":\"2021-01-15T13:46:17\",\"fuelOptions\":{\"fuelCost\":{\"value\":1.305,\"units\":\"USD/gallon\",\"currency\":\"USD\",\"fuelUnit\":\"gallon\"},\"fuelEfficiency\":{\"city\":28.57,\"hwy\":22.4,\"units\":\"mpg\"}},\"units\":{\"currency\":\"USD\"}}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"mapProvider\":\"here\",\"path\":\"43.64183,-79.38246|...|18.63085,-100.12845\",\"locTimes\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\"vehicle\":{\"type\":\"2AxlesTaxi\",\"weight\":{\"value\":20000,\"unit\":\"pound\"},\"height\":{\"value\":7.5,\"unit\":\"meter\"},\"length\":{\"value\":7.5,\"unit\":\"meter\"},\"axles\":4,\"emissionClass\":\"euro_5\"},\"departure_time\":\"2021-01-15T13:46:17\",\"fuelOptions\":{\"fuelCost\":{\"value\":1.305,\"units\":\"USD/gallon\",\"currency\":\"USD\",\"fuelUnit\":\"gallon\"},\"fuelEfficiency\":{\"city\":28.57,\"hwy\":22.4,\"units\":\"mpg\"}},\"units\":{\"currency\":\"USD\"}}' |  \\\n  http POST 'https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service/#' \\\n  content-type:application/json"
          },
          {
            "lang": "Shell + Wget",
            "source": "wget --quiet \\\n  --method POST \\\n  --header 'content-type: application/json' \\\n  --body-data '{\"mapProvider\":\"here\",\"path\":\"43.64183,-79.38246|...|18.63085,-100.12845\",\"locTimes\":[[0,1660110342],[30,1660110642],[60,1660110942],[232,1660111182]],\"vehicle\":{\"type\":\"2AxlesTaxi\",\"weight\":{\"value\":20000,\"unit\":\"pound\"},\"height\":{\"value\":7.5,\"unit\":\"meter\"},\"length\":{\"value\":7.5,\"unit\":\"meter\"},\"axles\":4,\"emissionClass\":\"euro_5\"},\"departure_time\":\"2021-01-15T13:46:17\",\"fuelOptions\":{\"fuelCost\":{\"value\":1.305,\"units\":\"USD/gallon\",\"currency\":\"USD\",\"fuelUnit\":\"gallon\"},\"fuelEfficiency\":{\"city\":28.57,\"hwy\":22.4,\"units\":\"mpg\"}},\"units\":{\"currency\":\"USD\"}}' \\\n  --output-document \\\n  - 'https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service/#'"
          },
          {
            "lang": "Swift + Nsurlsession",
            "source": "import Foundation\n\nlet headers = [\"content-type\": \"application/json\"]\nlet parameters = [\n  \"mapProvider\": \"here\",\n  \"path\": \"43.64183,-79.38246|...|18.63085,-100.12845\",\n  \"locTimes\": [[0, 1660110342], [30, 1660110642], [60, 1660110942], [232, 1660111182]],\n  \"vehicle\": [\n    \"type\": \"2AxlesTaxi\",\n    \"weight\": [\n      \"value\": 20000,\n      \"unit\": \"pound\"\n    ],\n    \"height\": [\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    ],\n    \"length\": [\n      \"value\": 7.5,\n      \"unit\": \"meter\"\n    ],\n    \"axles\": 4,\n    \"emissionClass\": \"euro_5\"\n  ],\n  \"departure_time\": \"2021-01-15T13:46:17\",\n  \"fuelOptions\": [\n    \"fuelCost\": [\n      \"value\": 1.305,\n      \"units\": \"USD/gallon\",\n      \"currency\": \"USD\",\n      \"fuelUnit\": \"gallon\"\n    ],\n    \"fuelEfficiency\": [\n      \"city\": 28.57,\n      \"hwy\": 22.4,\n      \"units\": \"mpg\"\n    ]\n  ],\n  \"units\": [\"currency\": \"USD\"]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://apis.tollguru.com/toll/v2/complete-polyline-from-mapping-service/#\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
          }
        ]
      }
    },
    "/toll/v2/gps-tracks-csv-upload": {
      "post": {
        "tags": [
          "TollTally - GPS Tracks to Toll API"
        ],
        "summary": "Upload GPS Tracks",
        "description": "By default, the API returns tolls immediately. In other words in synchronous mode. When you have a large GPS track, you need to specify to receive tolls in the asynchronous mode by specifying the url parameter as isAsync=true. Response in this case will include a requestId and a requestedTimestamp. You can use the requestId to download tolls for up to 30 days. Use the asynchronous mode when uploading multiple or large GPS tracks files. <ul> <li>Upload CSV file - You can use the CSV format file as shown in the table below. Alternatively you can download the sample file from <b><a href=\"https://github.com/mapup/toll-for-gps-tracks-csv-upload\">here</b></a>.</li> </ul> <p>The first line in the CSV needs to contain the attribute names. The subsequent lines need to contain the data in temporal order. The following parameters are available:</p> <table> <thead> <tr> <th>Parameter</th> <th>Description</th> </tr>\n</thead> <tbody> <tr> <td><strong>latitude</strong></td> <td>Latitude coordinate in WGS84 degree (mandatory)</td> </tr> <tr> <td><strong>longitude</strong></td> <td>Longitude coordinate in WGS84 degree (mandatory)</td> </tr>\n<tr> <td><strong>timestamp</strong></td> <td>indicates the time and date, for example 2018-05-21T17:05:06Z (mandatory since tolls may change based on time)</td> </tr> </tbody> </table> <p>You can use the CSV format file as shown in the table below:</p> <table> <tbody> <tr> <th>latitude</th> <th>longitude</th> <th>timestamp</th> </tr> <tr> <td>38.90479</td> <td>-77.02607</td> <td>2019-12-16T15:45:23Z</td> </tr> <tr> <td>38.90479</td> <td>-77.02606</td> <td>2019-12-16T15:47:24Z</td> </tr> <tr> <td>38.9048</td> <td>-77.02608</td> <td>2019-12-16T15:49:25Z</td> </tr> <tr> <td>38.9044</td> <td>-77.02604</td> <td>2019-12-16T15:50:42Z</td> </tr> <tr> <td>38.90424</td> <td>-77.02646</td> <td>2019-12-16T15:50:49Z</td> </tr> <tr> <td>38.90422</td> <td>-77.02686</td> <td>2019-12-16T15:50:55Z</td> </tr> </tbody> </table> ",
        "parameters": [
          {
            "name": "vehicle",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "$ref": "#/components/schemas/vehicleType"
                },
                "weight": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "number",
                      "example": 20000
                    },
                    "unit": {
                      "type": "string",
                      "enum": [
                        "pound",
                        "tonnes"
                      ]
                    }
                  }
                },
                "height": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "number",
                      "example": 7.5
                    },
                    "unit": {
                      "type": "string",
                      "enum": [
                        "meter",
                        "feet"
                      ]
                    }
                  }
                },
                "length": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "number",
                      "example": 7.5
                    },
                    "unit": {
                      "type": "string",
                      "enum": [
                        "meter",
                        "feet"
                      ]
                    }
                  }
                },
                "axles": {
                  "type": "number",
                  "example": 4
                },
                "emissionClass": {
                  "type": "string",
                  "example": "euro_5"
                }
              }
            },
            "description": "Please take note that the object must be in URI encoded format prior to sending a request. It is possible to encode it [here](https://www.onlinewebtoolkit.com/url-encode-decode)"
          },
          {
            "name": "vehicleName",
            "in": "query",
            "description": "Specify name for your vehicle to identify the response json for particular vehicle",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isAsync",
            "in": "query",
            "description": "The API will function in asynchronous mode is set to true",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "fuelOptions",
            "in": "query",
            "description": "Please take note that the object must be in URI encoded format prior to sending a request. It is possible to encode it [here](https://www.onlinewebtoolkit.com/url-encode-decode)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "object",
              "properties": {
                "fuelCost": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "number",
                      "example": 1.305,
                      "default": 3,
                      "description": "Specify numeric value up to two decimal places"
                    },
                    "units": {
                      "type": "string",
                      "example": "USD/gallon",
                      "default": "USD/gallon"
                    },
                    "currency": {
                      "type": "string",
                      "example": "USD",
                      "default": "USD",
                      "description": "If currency in units is not provided, the currency in fuel options will be used. If neither is provided, calculations will be based on the region by default.",
                      "enum": [
                        "USD",
                        "CAD",
                        "MXN",
                        "INR",
                        "AUD",
                        "GBP",
                        "NOK",
                        "SEK",
                        "DKK",
                        "PEN",
                        "COP",
                        "ARS",
                        "CLF",
                        "CLP",
                        "SOL"
                      ]
                    },
                    "fuelUnit": {
                      "type": "string",
                      "example": "gallon",
                      "default": "gallon",
                      "enum": [
                        "liter",
                        "gallon"
                      ]
                    }
                  }
                },
                "fuelEfficiency": {
                  "example": {
                    "city": 28.57,
                    "hwy": 22.4,
                    "units": "mpg"
                  },
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/FuelEfficiency"
                    }
                  ]
                }
              }
            }
          },
          {
            "name": "units",
            "in": "query",
            "description": "Please take note that the object must be in URI encoded format prior to sending a request. It is possible to encode it [here](https://www.onlinewebtoolkit.com/url-encode-decode)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "object",
              "description": "When currency in units is provided, it takes precedence for all calculations. When the value of fuelOptions.fuelCost.value is provided, we will extract this value and perform the necessary conversion",
              "properties": {
                "currency": {
                  "type": "string",
                  "example": "USD",
                  "default": "USD",
                  "description": "When currency in units is provided, it takes precedence for all calculations. When the value of fuelOptions.fuelCost.value is provided, we will extract this value and perform the necessary conversion",
                  "enum": [
                    "USD",
                    "CAD",
                    "MXN",
                    "INR",
                    "AUD",
                    "GBP",
                    "NOK",
                    "SEK",
                    "DKK",
                    "PEN",
                    "COP",
                    "ARS",
                    "CLF",
                    "CLP",
                    "SOL"
                  ]
                }
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/csv": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_1"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C + Libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://apis.tollguru.com/toll/v2/gps-tracks-csv-upload?vehicle=SOME_OBJECT_VALUE&vehicleName=SOME_STRING_VALUE&isAsync=SOME_BOOLEAN_VALUE&fuelOptions=SOME_OBJECT_VALUE&units=SOME_OBJECT_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: text/csv\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://apis.tollguru.com/toll/v2/gps-tracks-csv-upload?vehicle=SOME_OBJECT_VALUE&vehicleName=SOME_STRING_VALUE&isAsync=SOME_BOOLEAN_VALUE&fuelOptions=SOME_OBJECT_VALUE&units=SOME_OBJECT_VALUE\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"text/csv\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.tollguru.com/toll/v2/gps-tracks-csv-upload?vehicle=SOME_OBJECT_VALUE&vehicleName=SOME_STRING_VALUE&isAsync=SOME_BOOLEAN_VALUE&fuelOptions=SOME_OBJECT_VALUE&units=SOME_OBJECT_VALUE\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"text/csv\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java + Okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://apis.tollguru.com/toll/v2/gps-tracks-csv-upload?vehicle=SOME_OBJECT_VALUE&vehicleName=SOME_STRING_VALUE&isAsync=SOME_BOOLEAN_VALUE&fuelOptions=SOME_OBJECT_VALUE&units=SOME_OBJECT_VALUE\")\n  .post(null)\n  .addHeader(\"content-type\", \"text/csv\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://apis.tollguru.com/toll/v2/gps-tracks-csv-upload?vehicle=SOME_OBJECT_VALUE&vehicleName=SOME_STRING_VALUE&isAsync=SOME_BOOLEAN_VALUE&fuelOptions=SOME_OBJECT_VALUE&units=SOME_OBJECT_VALUE\")\n  .header(\"content-type\", \"text/csv\")\n  .asString();"
          },
          {
            "lang": "Javascript + Jquery",
            "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://apis.tollguru.com/toll/v2/gps-tracks-csv-upload?vehicle=SOME_OBJECT_VALUE&vehicleName=SOME_STRING_VALUE&isAsync=SOME_BOOLEAN_VALUE&fuelOptions=SOME_OBJECT_VALUE&units=SOME_OBJECT_VALUE\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"text/csv\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://apis.tollguru.com/toll/v2/gps-tracks-csv-upload?vehicle=SOME_OBJECT_VALUE&vehicleName=SOME_STRING_VALUE&isAsync=SOME_BOOLEAN_VALUE&fuelOptions=SOME_OBJECT_VALUE&units=SOME_OBJECT_VALUE\");\nxhr.setRequestHeader(\"content-type\", \"text/csv\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"apis.tollguru.com\",\n  \"port\": null,\n  \"path\": \"/toll/v2/gps-tracks-csv-upload?vehicle=SOME_OBJECT_VALUE&vehicleName=SOME_STRING_VALUE&isAsync=SOME_BOOLEAN_VALUE&fuelOptions=SOME_OBJECT_VALUE&units=SOME_OBJECT_VALUE\",\n  \"headers\": {\n    \"content-type\": \"text/csv\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://apis.tollguru.com/toll/v2/gps-tracks-csv-upload',\n  qs: {\n    vehicle: 'SOME_OBJECT_VALUE',\n    vehicleName: 'SOME_STRING_VALUE',\n    isAsync: 'SOME_BOOLEAN_VALUE',\n    fuelOptions: 'SOME_OBJECT_VALUE',\n    units: 'SOME_OBJECT_VALUE'\n  },\n  headers: {'content-type': 'text/csv'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node + Unirest",
            "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://apis.tollguru.com/toll/v2/gps-tracks-csv-upload\");\n\nreq.query({\n  \"vehicle\": \"SOME_OBJECT_VALUE\",\n  \"vehicleName\": \"SOME_STRING_VALUE\",\n  \"isAsync\": \"SOME_BOOLEAN_VALUE\",\n  \"fuelOptions\": \"SOME_OBJECT_VALUE\",\n  \"units\": \"SOME_OBJECT_VALUE\"\n});\n\nreq.headers({\n  \"content-type\": \"text/csv\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc + Nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"text/csv\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://apis.tollguru.com/toll/v2/gps-tracks-csv-upload?vehicle=SOME_OBJECT_VALUE&vehicleName=SOME_STRING_VALUE&isAsync=SOME_BOOLEAN_VALUE&fuelOptions=SOME_OBJECT_VALUE&units=SOME_OBJECT_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml + Cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://apis.tollguru.com/toll/v2/gps-tracks-csv-upload?vehicle=SOME_OBJECT_VALUE&vehicleName=SOME_STRING_VALUE&isAsync=SOME_BOOLEAN_VALUE&fuelOptions=SOME_OBJECT_VALUE&units=SOME_OBJECT_VALUE\" in\nlet headers = Header.add (Header.init ()) \"content-type\" \"text/csv\" in\n\nClient.call ~headers `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://apis.tollguru.com/toll/v2/gps-tracks-csv-upload?vehicle=SOME_OBJECT_VALUE&vehicleName=SOME_STRING_VALUE&isAsync=SOME_BOOLEAN_VALUE&fuelOptions=SOME_OBJECT_VALUE&units=SOME_OBJECT_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"content-type: text/csv\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://apis.tollguru.com/toll/v2/gps-tracks-csv-upload');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setQueryData([\n  'vehicle' => 'SOME_OBJECT_VALUE',\n  'vehicleName' => 'SOME_STRING_VALUE',\n  'isAsync' => 'SOME_BOOLEAN_VALUE',\n  'fuelOptions' => 'SOME_OBJECT_VALUE',\n  'units' => 'SOME_OBJECT_VALUE'\n]);\n\n$request->setHeaders([\n  'content-type' => 'text/csv'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://apis.tollguru.com/toll/v2/gps-tracks-csv-upload');\n$request->setRequestMethod('POST');\n$request->setQuery(new http\\QueryString([\n  'vehicle' => 'SOME_OBJECT_VALUE',\n  'vehicleName' => 'SOME_STRING_VALUE',\n  'isAsync' => 'SOME_BOOLEAN_VALUE',\n  'fuelOptions' => 'SOME_OBJECT_VALUE',\n  'units' => 'SOME_OBJECT_VALUE'\n]));\n\n$request->setHeaders([\n  'content-type' => 'text/csv'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"apis.tollguru.com\")\n\nheaders = { 'content-type': \"text/csv\" }\n\nconn.request(\"POST\", \"/toll/v2/gps-tracks-csv-upload?vehicle=SOME_OBJECT_VALUE&vehicleName=SOME_STRING_VALUE&isAsync=SOME_BOOLEAN_VALUE&fuelOptions=SOME_OBJECT_VALUE&units=SOME_OBJECT_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python + Requests",
            "source": "import requests\n\nurl = \"https://apis.tollguru.com/toll/v2/gps-tracks-csv-upload\"\n\nquerystring = {\"vehicle\":\"SOME_OBJECT_VALUE\",\"vehicleName\":\"SOME_STRING_VALUE\",\"isAsync\":\"SOME_BOOLEAN_VALUE\",\"fuelOptions\":\"SOME_OBJECT_VALUE\",\"units\":\"SOME_OBJECT_VALUE\"}\n\nheaders = {\"content-type\": \"text/csv\"}\n\nresponse = requests.request(\"POST\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://apis.tollguru.com/toll/v2/gps-tracks-csv-upload?vehicle=SOME_OBJECT_VALUE&vehicleName=SOME_STRING_VALUE&isAsync=SOME_BOOLEAN_VALUE&fuelOptions=SOME_OBJECT_VALUE&units=SOME_OBJECT_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'text/csv'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url 'https://apis.tollguru.com/toll/v2/gps-tracks-csv-upload?vehicle=SOME_OBJECT_VALUE&vehicleName=SOME_STRING_VALUE&isAsync=SOME_BOOLEAN_VALUE&fuelOptions=SOME_OBJECT_VALUE&units=SOME_OBJECT_VALUE' \\\n  --header 'content-type: text/csv'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http POST 'https://apis.tollguru.com/toll/v2/gps-tracks-csv-upload?vehicle=SOME_OBJECT_VALUE&vehicleName=SOME_STRING_VALUE&isAsync=SOME_BOOLEAN_VALUE&fuelOptions=SOME_OBJECT_VALUE&units=SOME_OBJECT_VALUE' \\\n  content-type:text/csv"
          },
          {
            "lang": "Shell + Wget",
            "source": "wget --quiet \\\n  --method POST \\\n  --header 'content-type: text/csv' \\\n  --output-document \\\n  - 'https://apis.tollguru.com/toll/v2/gps-tracks-csv-upload?vehicle=SOME_OBJECT_VALUE&vehicleName=SOME_STRING_VALUE&isAsync=SOME_BOOLEAN_VALUE&fuelOptions=SOME_OBJECT_VALUE&units=SOME_OBJECT_VALUE'"
          },
          {
            "lang": "Swift + Nsurlsession",
            "source": "import Foundation\n\nlet headers = [\"content-type\": \"text/csv\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://apis.tollguru.com/toll/v2/gps-tracks-csv-upload?vehicle=SOME_OBJECT_VALUE&vehicleName=SOME_STRING_VALUE&isAsync=SOME_BOOLEAN_VALUE&fuelOptions=SOME_OBJECT_VALUE&units=SOME_OBJECT_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
          }
        ]
      }
    },
    "/toll/v2/gps-tracks-csv-download": {
      "post": {
        "tags": [
          "TollTally - GPS Tracks to Toll API"
        ],
        "summary": "Download Async Results",
        "description": "The results will be available for download for upto 30 days by calling the API.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/body_1"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C + Libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://apis.tollguru.com/toll/v2/gps-tracks-csv-download\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"requestId\\\":\\\"72ca5cba-b732-47ea-aec6-c7716bb37458\\\",\\\"requestedTimestamp\\\":\\\"2020-06-15T04:27:08.838Z\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp + Restsharp",
            "source": "var client = new RestClient(\"https://apis.tollguru.com/toll/v2/gps-tracks-csv-download\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"requestId\\\":\\\"72ca5cba-b732-47ea-aec6-c7716bb37458\\\",\\\"requestedTimestamp\\\":\\\"2020-06-15T04:27:08.838Z\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.tollguru.com/toll/v2/gps-tracks-csv-download\"\n\n\tpayload := strings.NewReader(\"{\\\"requestId\\\":\\\"72ca5cba-b732-47ea-aec6-c7716bb37458\\\",\\\"requestedTimestamp\\\":\\\"2020-06-15T04:27:08.838Z\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java + Okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"requestId\\\":\\\"72ca5cba-b732-47ea-aec6-c7716bb37458\\\",\\\"requestedTimestamp\\\":\\\"2020-06-15T04:27:08.838Z\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://apis.tollguru.com/toll/v2/gps-tracks-csv-download\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java + Unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://apis.tollguru.com/toll/v2/gps-tracks-csv-download\")\n  .header(\"content-type\", \"application/json\")\n  .body(\"{\\\"requestId\\\":\\\"72ca5cba-b732-47ea-aec6-c7716bb37458\\\",\\\"requestedTimestamp\\\":\\\"2020-06-15T04:27:08.838Z\\\"}\")\n  .asString();"
          },
          {
            "lang": "Javascript + Jquery",
            "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://apis.tollguru.com/toll/v2/gps-tracks-csv-download\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"requestId\\\":\\\"72ca5cba-b732-47ea-aec6-c7716bb37458\\\",\\\"requestedTimestamp\\\":\\\"2020-06-15T04:27:08.838Z\\\"}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript + Xhr",
            "source": "const data = JSON.stringify({\n  \"requestId\": \"72ca5cba-b732-47ea-aec6-c7716bb37458\",\n  \"requestedTimestamp\": \"2020-06-15T04:27:08.838Z\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://apis.tollguru.com/toll/v2/gps-tracks-csv-download\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"apis.tollguru.com\",\n  \"port\": null,\n  \"path\": \"/toll/v2/gps-tracks-csv-download\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  requestId: '72ca5cba-b732-47ea-aec6-c7716bb37458',\n  requestedTimestamp: '2020-06-15T04:27:08.838Z'\n}));\nreq.end();"
          },
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://apis.tollguru.com/toll/v2/gps-tracks-csv-download',\n  headers: {'content-type': 'application/json'},\n  body: {\n    requestId: '72ca5cba-b732-47ea-aec6-c7716bb37458',\n    requestedTimestamp: '2020-06-15T04:27:08.838Z'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node + Unirest",
            "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://apis.tollguru.com/toll/v2/gps-tracks-csv-download\");\n\nreq.headers({\n  \"content-type\": \"application/json\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"requestId\": \"72ca5cba-b732-47ea-aec6-c7716bb37458\",\n  \"requestedTimestamp\": \"2020-06-15T04:27:08.838Z\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc + Nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\" };\nNSDictionary *parameters = @{ @\"requestId\": @\"72ca5cba-b732-47ea-aec6-c7716bb37458\",\n                              @\"requestedTimestamp\": @\"2020-06-15T04:27:08.838Z\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://apis.tollguru.com/toll/v2/gps-tracks-csv-download\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml + Cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://apis.tollguru.com/toll/v2/gps-tracks-csv-download\" in\nlet headers = Header.add (Header.init ()) \"content-type\" \"application/json\" in\nlet body = Cohttp_lwt_body.of_string \"{\\\"requestId\\\":\\\"72ca5cba-b732-47ea-aec6-c7716bb37458\\\",\\\"requestedTimestamp\\\":\\\"2020-06-15T04:27:08.838Z\\\"}\" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://apis.tollguru.com/toll/v2/gps-tracks-csv-download\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"requestId\\\":\\\"72ca5cba-b732-47ea-aec6-c7716bb37458\\\",\\\"requestedTimestamp\\\":\\\"2020-06-15T04:27:08.838Z\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://apis.tollguru.com/toll/v2/gps-tracks-csv-download');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json'\n]);\n\n$request->setBody('{\"requestId\":\"72ca5cba-b732-47ea-aec6-c7716bb37458\",\"requestedTimestamp\":\"2020-06-15T04:27:08.838Z\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"requestId\":\"72ca5cba-b732-47ea-aec6-c7716bb37458\",\"requestedTimestamp\":\"2020-06-15T04:27:08.838Z\"}');\n\n$request->setRequestUrl('https://apis.tollguru.com/toll/v2/gps-tracks-csv-download');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"apis.tollguru.com\")\n\npayload = \"{\\\"requestId\\\":\\\"72ca5cba-b732-47ea-aec6-c7716bb37458\\\",\\\"requestedTimestamp\\\":\\\"2020-06-15T04:27:08.838Z\\\"}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/toll/v2/gps-tracks-csv-download\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python + Requests",
            "source": "import requests\n\nurl = \"https://apis.tollguru.com/toll/v2/gps-tracks-csv-download\"\n\npayload = {\n    \"requestId\": \"72ca5cba-b732-47ea-aec6-c7716bb37458\",\n    \"requestedTimestamp\": \"2020-06-15T04:27:08.838Z\"\n}\nheaders = {\"content-type\": \"application/json\"}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://apis.tollguru.com/toll/v2/gps-tracks-csv-download\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"requestId\\\":\\\"72ca5cba-b732-47ea-aec6-c7716bb37458\\\",\\\"requestedTimestamp\\\":\\\"2020-06-15T04:27:08.838Z\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://apis.tollguru.com/toll/v2/gps-tracks-csv-download \\\n  --header 'content-type: application/json' \\\n  --data '{\"requestId\":\"72ca5cba-b732-47ea-aec6-c7716bb37458\",\"requestedTimestamp\":\"2020-06-15T04:27:08.838Z\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"requestId\":\"72ca5cba-b732-47ea-aec6-c7716bb37458\",\"requestedTimestamp\":\"2020-06-15T04:27:08.838Z\"}' |  \\\n  http POST https://apis.tollguru.com/toll/v2/gps-tracks-csv-download \\\n  content-type:application/json"
          },
          {
            "lang": "Shell + Wget",
            "source": "wget --quiet \\\n  --method POST \\\n  --header 'content-type: application/json' \\\n  --body-data '{\"requestId\":\"72ca5cba-b732-47ea-aec6-c7716bb37458\",\"requestedTimestamp\":\"2020-06-15T04:27:08.838Z\"}' \\\n  --output-document \\\n  - https://apis.tollguru.com/toll/v2/gps-tracks-csv-download"
          },
          {
            "lang": "Swift + Nsurlsession",
            "source": "import Foundation\n\nlet headers = [\"content-type\": \"application/json\"]\nlet parameters = [\n  \"requestId\": \"72ca5cba-b732-47ea-aec6-c7716bb37458\",\n  \"requestedTimestamp\": \"2020-06-15T04:27:08.838Z\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://apis.tollguru.com/toll/v2/gps-tracks-csv-download\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "MinimalRequestBody": {
        "required": [
          "from",
          "to"
        ],
        "type": "object",
        "properties": {
          "from": {
            "example": {
              "address": "Philadelphia , Pennsylvania,",
              "lat": 39.95209,
              "lng": -75.16219
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/Location"
              }
            ]
          },
          "to": {
            "example": {
              "address": "New York ,NY,",
              "lat": 40.71455,
              "lng": -74.00715
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/Location"
              }
            ]
          },
          "waypoints": {
            "type": "array",
            "description": "Specify a range of intermediary locations, along your route between your origin and destination points",
            "example": [
              {
                "address": "Bridgewater Township , New Jersey"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Location"
            }
          },
          "serviceProvider": {
            "type": "string",
            "example": "here",
            "default": "here",
            "enum": [
              "here",
              "gmaps"
            ]
          },
          "vehicle": {
            "$ref": "#/components/schemas/vehicle"
          }
        }
      },
      "Trucks Minimal Request Body": {
        "required": [
          "from",
          "to"
        ],
        "type": "object",
        "properties": {
          "from": {
            "example": {
              "address": "Philadelphia , Pennsylvania,",
              "lat": 39.95209,
              "lng": -75.16219
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/Location"
              }
            ]
          },
          "to": {
            "example": {
              "address": "New York ,NY,",
              "lat": 40.71455,
              "lng": -74.00715
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/Location"
              }
            ]
          },
          "waypoints": {
            "type": "array",
            "description": "Specify a range of intermediary locations, along your route between your origin and destination points",
            "example": [
              {
                "address": "Bridgewater Township , New Jersey"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Location"
            }
          },
          "serviceProvider": {
            "type": "string",
            "example": "here",
            "default": "here",
            "enum": [
              "here",
              "gmaps"
            ]
          },
          "vehicle": {
            "description": "Parameters related to vehicle",
            "$ref": "#/components/schemas/vehicleTruck"
          }
        }
      },
      "Trucks Optional Request Body": {
        "required": [
          "from",
          "to"
        ],
        "type": "object",
        "properties": {
          "from": {
            "example": {
              "address": "Philadelphia , Pennsylvania,",
              "lat": 39.95209,
              "lng": -75.16219
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/Location"
              }
            ]
          },
          "to": {
            "example": {
              "address": "New York ,NY,",
              "lat": 40.71455,
              "lng": -74.00715
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/Location"
              }
            ]
          },
          "waypoints": {
            "type": "array",
            "description": "Specify a range of intermediary locations, along your route between your origin and destination points",
            "example": [
              {
                "address": "Bridgewater Township , New Jersey"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Location"
            }
          },
          "serviceProvider": {
            "type": "string",
            "example": "here",
            "default": "here",
            "enum": [
              "here",
              "gmaps"
            ]
          },
          "vehicle": {
            "description": "Parameters related to vehicle",
            "$ref": "#/components/schemas/vehicleTruck"
          },
          "departure_time": {
            "default": "current time",
            "example": 1609507347,
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTime"
              },
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ]
          },
          "fuelOptions": {
            "type": "object",
            "properties": {
              "fuelCost": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "number",
                    "example": 1.305,
                    "default": 3,
                    "description": "Specify numeric value up to two decimal places"
                  },
                  "units": {
                    "type": "string",
                    "example": "USD/gallon",
                    "default": "USD/gallon"
                  },
                  "currency": {
                    "type": "string",
                    "description": "If currency in units is not provided, the currency in fuel options will be used. If neither is provided, calculations will be based on the region by default.",
                    "example": "USD",
                    "default": "USD",
                    "enum": [
                      "USD",
                      "CAD",
                      "MXN",
                      "INR",
                      "AUD",
                      "GBP",
                      "NOK",
                      "SEK",
                      "DKK",
                      "PEN",
                      "COP",
                      "ARS",
                      "CLF",
                      "CLP",
                      "SOL"
                    ]
                  },
                  "fuelUnit": {
                    "type": "string",
                    "example": "gallon",
                    "default": "gallon",
                    "enum": [
                      "liter",
                      "gallon"
                    ]
                  }
                }
              },
              "fuelEfficiency": {
                "example": {
                  "city": 28.57,
                  "hwy": 22.4,
                  "units": "mpg"
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FuelEfficiency"
                  }
                ]
              }
            }
          },
          "units": {
            "type": "object",
            "description": "When currency in units is provided, it takes precedence for all calculations. When the value of fuelOptions.fuelCost.value is provided, we will extract this value and perform the necessary conversion",
            "properties": {
              "currency": {
                "type": "string",
                "example": "USD",
                "default": "USD",
                "description": "Set currency for calculations",
                "enum": [
                  "USD",
                  "CAD",
                  "MXN",
                  "INR",
                  "AUD",
                  "GBP",
                  "NOK",
                  "SEK",
                  "DKK",
                  "PEN",
                  "COP",
                  "ARS",
                  "CLF",
                  "CLP",
                  "SOL"
                ]
              }
            }
          },
          "truck": {
            "description": "Truck routing only",
            "example": {
              "limitedWeight": 500
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/Truck"
              }
            ]
          },
          "driver": {
            "description": "Specify Driver wage or Value of Time. For example, if you are willing to spend Can$1.45 to save 15 minutes for a particular trip, your value of time is Can$1.45* (60/15) = Can$5.8 per hour",
            "example": {
              "wage": 30,
              "rounding": 15,
              "valueOfTime": 0
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/Driver"
              }
            ]
          },
          "state_mileage": {
            "description": "Specify state mileage as boolean value",
            "type": "boolean",
            "example": true
          },
          "hos": {
            "example": {
              "rule": 60,
              "dutyHoursBeforeEndOfWorkDay": 11,
              "dutyHoursBeforeRestBreak": 7,
              "drivingHoursBeforeEndOfWorkDay": 11,
              "timeRemaining": 60
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/HosReq"
              }
            ]
          }
        }
      },
      "OtherVehicleTypes": {
        "required": [
          "from",
          "to"
        ],
        "type": "object",
        "properties": {
          "from": {
            "example": {
              "address": "Philadelphia , Pennsylvania,",
              "lat": 39.95209,
              "lng": -75.16219
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/Location"
              }
            ]
          },
          "to": {
            "example": {
              "address": "New York ,NY,",
              "lat": 40.71455,
              "lng": -74.00715
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/Location"
              }
            ]
          },
          "waypoints": {
            "type": "array",
            "description": "Specify a range of intermediary locations, along your route between your origin and destination points",
            "example": [
              {
                "address": "Bridgewater Township , New Jersey"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Location"
            }
          },
          "serviceProvider": {
            "type": "string",
            "example": "here",
            "default": "here",
            "enum": [
              "here",
              "gmaps"
            ]
          },
          "vehicle": {
            "$ref": "#/components/schemas/vehicle"
          },
          "departure_time": {
            "default": "current time",
            "example": 1609507347,
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTime"
              },
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ]
          },
          "fuelOptions": {
            "type": "object",
            "properties": {
              "fuelCost": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "number",
                    "example": 1.305,
                    "default": 3,
                    "description": "Specify numeric value up to two decimal places"
                  },
                  "units": {
                    "type": "string",
                    "example": "USD/gallon",
                    "default": "USD/gallon"
                  },
                  "currency": {
                    "type": "string",
                    "description": "If currency in units is not provided, the currency in fuel options will be used. If neither is provided, calculations will be based on the region by default.",
                    "example": "USD",
                    "default": "USD",
                    "enum": [
                      "USD",
                      "CAD",
                      "MXN",
                      "INR",
                      "AUD",
                      "GBP",
                      "NOK",
                      "SEK",
                      "DKK",
                      "PEN",
                      "COP",
                      "ARS",
                      "CLF",
                      "CLP",
                      "SOL"
                    ]
                  },
                  "fuelUnit": {
                    "type": "string",
                    "example": "gallon",
                    "default": "gallon",
                    "enum": [
                      "liter",
                      "gallon"
                    ]
                  }
                }
              },
              "fuelEfficiency": {
                "example": {
                  "city": 28.57,
                  "hwy": 22.4,
                  "units": "mpg"
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FuelEfficiency"
                  }
                ]
              }
            }
          },
          "units": {
            "type": "object",
            "description": "When currency in units is provided, it takes precedence for all calculations. When the value of fuelOptions.fuelCost.value is provided, we will extract this value and perform the necessary conversion",
            "properties": {
              "currency": {
                "type": "string",
                "example": "USD",
                "default": "USD",
                "description": "Set currency for calculations",
                "enum": [
                  "USD",
                  "CAD",
                  "MXN",
                  "INR",
                  "AUD",
                  "GBP",
                  "NOK",
                  "SEK",
                  "DKK",
                  "PEN",
                  "COP",
                  "ARS",
                  "CLF",
                  "CLP",
                  "SOL"
                ]
              }
            }
          }
        }
      },
      "HereRequestBody": {
        "required": [
          "from",
          "to"
        ],
        "type": "object",
        "properties": {
          "from": {
            "example": {
              "address": "Philadelphia , Pennsylvania"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/Location"
              }
            ]
          },
          "to": {
            "example": {
              "address": "New York ,NY"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/Location"
              }
            ]
          },
          "waypoints": {
            "type": "array",
            "description": "Specify a range of intermediary locations, along your route between your origin and destination points",
            "example": [
              {
                "address": "Bridgewater Township , New Jersey"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Location"
            }
          },
          "vehicleType": {
            "default": "2AxlesAuto",
            "example": "2AxlesTruck",
            "description": "For more information of vehicle types read [**here**](#tag/Vehicle-types-supported-by-TollGuru)",
            "allOf": [
              {
                "$ref": "#/components/schemas/vehicleType"
              }
            ]
          },
          "departure_time": {
            "default": "current time",
            "example": 1609507347,
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTime"
              },
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ]
          },
          "fuelOptions": {
            "type": "object",
            "properties": {
              "fuelCost": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "number",
                    "example": 1.305,
                    "default": 3,
                    "description": "Specify numeric value up to two decimal places"
                  },
                  "units": {
                    "type": "string",
                    "example": "USD/gallon",
                    "default": "USD/gallon"
                  },
                  "currency": {
                    "type": "string",
                    "description": "If currency in units is not provided, the currency in fuel options will be used. If neither is provided, calculations will be based on the region by default.",
                    "example": "USD",
                    "default": "USD",
                    "enum": [
                      "USD",
                      "CAD",
                      "MXN",
                      "INR",
                      "AUD",
                      "GBP",
                      "NOK",
                      "SEK",
                      "DKK",
                      "PEN",
                      "COP",
                      "ARS",
                      "CLF",
                      "CLP",
                      "SOL"
                    ]
                  },
                  "fuelUnit": {
                    "type": "string",
                    "example": "gallon",
                    "default": "gallon",
                    "enum": [
                      "liter",
                      "gallon"
                    ]
                  }
                }
              },
              "fuelEfficiency": {
                "example": {
                  "city": 28.57,
                  "hwy": 22.4,
                  "units": "mpg"
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FuelEfficiency"
                  }
                ]
              }
            }
          },
          "units": {
            "type": "object",
            "description": "When currency in units is provided, it takes precedence for all calculations. When the value of fuelOptions.fuelCost.value is provided, we will extract this value and perform the necessary conversion",
            "properties": {
              "currency": {
                "type": "string",
                "example": "USD",
                "default": "USD",
                "description": "Set currency for calculations",
                "enum": [
                  "USD",
                  "CAD",
                  "MXN",
                  "INR",
                  "AUD",
                  "GBP",
                  "NOK",
                  "SEK",
                  "DKK",
                  "PEN",
                  "COP",
                  "ARS",
                  "CLF",
                  "CLP",
                  "SOL"
                ]
              }
            }
          },
          "truck": {
            "description": "Truck routing only",
            "example": {
              "limitedWeight": 500
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/Truck"
              }
            ]
          },
          "driver": {
            "description": "Specify Driver wage or Value of Time. For example, if you are willing to spend Can$1.45 to save 15 minutes for a particular trip, your value of time is Can$1.45* (60/15) = Can$5.8 per hour",
            "example": {
              "wage": 30,
              "rounding": 15,
              "valueOfTime": 0
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/Driver"
              }
            ]
          },
          "state_mileage": {
            "description": "Specify state mileage as boolean value",
            "type": "boolean",
            "example": true
          },
          "hos": {
            "example": {
              "rule": 60,
              "dutyHoursBeforeEndOfWorkDay": 11,
              "dutyHoursBeforeRestBreak": 7,
              "drivingHoursBeforeEndOfWorkDay": 11,
              "timeRemaining": 60
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/HosReq"
              }
            ]
          }
        }
      },
      "GmapRequestBody": {
        "required": [
          "from",
          "to"
        ],
        "type": "object",
        "properties": {
          "from": {
            "example": {
              "address": "Faro District, Canada"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/Location"
              }
            ]
          },
          "to": {
            "example": {
              "address": "New York ,NY"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/Location"
              }
            ]
          },
          "waypoints": {
            "type": "array",
            "description": "Specify a range of intermediary locations, along your route between your origin and destination points",
            "example": [
              {
                "address": "Bridgewater Township , New Jersey"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Location"
            }
          },
          "vehicleType": {
            "default": "2AxlesAuto",
            "example": "2AxlesTruck",
            "description": "For more information of vehicle types read [**here**](#tag/Vehicle-types-supported-by-TollGuru)",
            "allOf": [
              {
                "$ref": "#/components/schemas/vehicleType"
              }
            ]
          },
          "departure_time": {
            "example": 1609507347,
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTime"
              },
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ]
          },
          "fuelPrice": {
            "type": "number",
            "example": 1.343,
            "default": 3,
            "description": "Secify as numeric up to two decimal places"
          },
          "fuelPriceCurrency": {
            "type": "string",
            "example": "USD",
            "default": "USD",
            "enum": [
              "USD",
              "CAD",
              "MXN",
              "INR",
              "AUD",
              "GBP",
              "NOK",
              "SEK",
              "DKK",
              "PEN",
              "COP",
              "ARS",
              "CLF",
              "CLP",
              "SOL"
            ]
          },
          "fuelEfficiency": {
            "description": "For further accuracy in estimation of fuel expenses, you can specify additional fuel efficiency parameters",
            "example": {
              "city": 28.57,
              "hwy": 22.4,
              "units": "mpg"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/FuelEfficiency"
              }
            ]
          },
          "driver": {
            "description": "Specify Driver wage or Value of Time. For example, if you are willing to spend Can$1.45 to save 15 minutes for a particular trip, your value of time is Can$1.45* (60/15) = Can$5.8 per hour.",
            "example": {
              "wage": 25,
              "rounding": 15,
              "valueOfTime": 0
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/Driver"
              }
            ]
          },
          "hos": {
            "example": {
              "rule": 60,
              "dutyHoursBeforeEndOfWorkDay": 11,
              "dutyHoursBeforeRestBreak": 7,
              "drivingHoursBeforeEndOfWorkDay": 11,
              "timeRemaining": 60
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/HosReq"
              }
            ]
          },
          "enableDurationInTraffic": {
            "type": "boolean",
            "description": "Specifies whether duration in traffic is required"
          }
        }
      },
      "RouteRequestBody": {
        "type": "object",
        "properties": {
          "mapProvider": {
            "type": "string",
            "description": "Specify route source, either <code>here</code> for HERE maps routes based polyline or <code>gmaps</code> for Google Maps polylines",
            "example": "here",
            "default": "here",
            "enum": [
              "google",
              "bing",
              "mapbox",
              "apple map",
              "here",
              "tomtom",
              "waze",
              "esri",
              "mapquest",
              "jawgmaps",
              "trimble",
              "ptv",
              "mapmyindia",
              "yandex",
              "michelin",
              "baidu",
              "gaode"
            ]
          },
          "polyline": {
            "type": "string",
            "description": "Specify route as Google Maps encoded polyline (<b><a href=\"https://developers.google.com/maps/documentation/utilities/polylinealgorithm\" target=\"_blank\">see details</b></a>)",
            "example": "_f`GwjixRSe@MIIEICGAIA_Al@MHIDe@VKFm@f@SLKLCFEHCF?HAF?NTH\\\\N`Ab@x@b@`@TZTPLTPZXDFBFXVZTrB~ARDLF~@ZJDTDPBVFJ@X@P@j@?N?d@ERC`@KhB{Al@i@f@Y~BaCPQJKbA_At@s@RSDEBEBCVU~A{ATW~@{@`@_@v@q@p@o@pA_AVSXSJIv@g@~@m@HEROTO@?rA{@VQ^UZSPMHGDEj@g@h@k@f@m@^g@vAqBTYp@_Ab@m@Va@R[Xg@b@u@^{@R]Pc@Vm@Pe@\\\\cA`@mAn@iB^aAp@aBn@cBt@yAFMP_@pC_GdBsDdAwBRc@fAyB`@y@Ve@pAaCxAqCf@_An@mAjBcE`BoD^w@Vo@P[Xe@JQ`@m@PULQh@o@\\\\_@l@m@r@m@pAeA`CoBxAoA\\\\YbAy@?An@i@~AqA`@a@VY^_@V[PSX_@T]T[f@y@JMHMtAcCd@}@f@_AlBoDb@y@r@sAd@{@R]\\\\o@h@y@Zc@n@_ABENQZc@TY@C\\\\_@RWFKPUPYT]BCDGl@_Af@w@^u@P_@j@sAh@mAVk@^s@^s@n@kA?Ad@u@fAeBl@eAZg@|@yA`BoCd@_AZo@Z}@J]Ng@BQJe@F_@DS@MDk@J{AFiAHmDHgDFwADiBH_D@[?E@]@c@BgALuEBcABkA@]B{AD_BBa@DaCJkCHiALyAPoAN_ALo@R}@Le@ZkAb@oATo@\\\\{@FK`@}@`@w@lA{BxAoC~AwCHOZm@l@eAHO^s@n@kAp@qANYL[L]J[Rs@FWNu@Jq@Fc@JiABw@@aBBaDDaA?m@D]\\\\cCJi@Lg@Pi@Xy@BGDMRg@DIFMHQFMJOr@qAZc@v@mAtAcBz@eANS`BuBtDoEd@m@dBoBj@o@V[LQFGhC{Cp@{@Za@LUJSHOJ[Ne@H]Fc@?AD_@Dg@@e@?I?M?M?aA?{@A}BCwA?oA?YEuB?k@Ag@C{@?A?ECs@AyA?m@ASC{CEmCA}@AYAW?KA}@CcBA{AAcA?WAUGiI?S?QAU?WAc@AgA?_@@a@@y@@e@@UBU@UVaD@MFaABc@@Y@G?i@Ak@Gk@EUI_@IY?AIUKUISQc@s@}AMWk@uAK[GOIa@I_@EYCQGm@Co@A]?M?O@]@UD[Fa@D]FWLk@Pg@N]P_@N[dBaDpBkD@AdCsEbAkBd@_APa@HUHUVaAES?EAE?E?EJ_ADk@@W@UEaAAOIm@M_ABCKa@CMESA?EMK[KWCIACAAKWs@sAq@gAEIEGS[S]GMGKWa@g@mAe@eA]OSIEAG?WAG@OBIBGDGF[b@IJKFk@`Au@pA}@~AMXcC~E_BnCY`@MT"
          },
          "locTimes": {
            "type": "array",
            "description": "Specify the locTimes utilizing a two-dimensional array of floating-point numbers, where each sub-array consists of the path or polyline index and the corresponding time-stamp for that coordinate. If locTimes is not specified we use departure_time as a the timestamp and if departure_time is also not specified we will use current time for toll calculations",
            "items": [
              {
                "type": "array",
                "items": [
                  {
                    "type": "number",
                    "format": "float"
                  },
                  {
                    "type": "number",
                    "format": "float"
                  }
                ]
              }
            ],
            "example": [
              [
                0,
                1660110342
              ],
              [
                30,
                1660110642
              ],
              [
                60,
                1660110942
              ],
              [
                232,
                1660111182
              ]
            ]
          },
          "vehicle": {
            "description": "Parameters related to vehicle",
            "$ref": "#/components/schemas/vehicle"
          },
          "fuelOptions": {
            "type": "object",
            "properties": {
              "fuelCost": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "number",
                    "example": 1.305,
                    "default": 3,
                    "description": "Specify numeric value up to two decimal places"
                  },
                  "units": {
                    "type": "string",
                    "example": "USD/gallon",
                    "default": "USD/gallon"
                  },
                  "currency": {
                    "type": "string",
                    "description": "If currency in units is not provided, the currency in fuel options will be used. If neither is provided, calculations will be based on the region by default.",
                    "example": "USD",
                    "default": "USD",
                    "enum": [
                      "USD",
                      "CAD",
                      "MXN",
                      "INR",
                      "AUD",
                      "GBP",
                      "NOK",
                      "SEK",
                      "DKK",
                      "PEN",
                      "COP",
                      "ARS",
                      "CLF",
                      "CLP",
                      "SOL"
                    ]
                  },
                  "fuelUnit": {
                    "type": "string",
                    "example": "gallon",
                    "default": "gallon",
                    "enum": [
                      "liter",
                      "gallon"
                    ]
                  }
                }
              },
              "fuelEfficiency": {
                "example": {
                  "city": 28.57,
                  "hwy": 22.4,
                  "units": "mpg"
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FuelEfficiency"
                  }
                ]
              }
            }
          },
          "units": {
            "type": "object",
            "description": "When currency in units is provided, it takes precedence for all calculations. When the value of fuelOptions.fuelCost.value is provided, we will extract this value and perform the necessary conversion",
            "properties": {
              "currency": {
                "type": "string",
                "example": "USD",
                "default": "USD",
                "description": "Set currency for calculations",
                "enum": [
                  "USD",
                  "CAD",
                  "MXN",
                  "INR",
                  "AUD",
                  "GBP",
                  "NOK",
                  "SEK",
                  "DKK",
                  "PEN",
                  "COP",
                  "ARS",
                  "CLF",
                  "CLP",
                  "SOL"
                ]
              }
            }
          },
          "departure_time": {
            "example": 1609507347,
            "description": "If departure_time and locTimes both are not specified then we will use the current time for toll calculations",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTime"
              },
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ]
          }
        }
      },
      "HERE_ElectricVehicle": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "OK"
          },
          "summary": {
            "$ref": "#/components/schemas/EV_HereResponse_summary"
          },
          "routes": {
            "type": "array",
            "description": "Route information including distance, time, toll, <b>Charging points</b> near the route.",
            "items": {
              "$ref": "#/components/schemas/EVRouteResponse"
            }
          }
        }
      },
      "HERE_Taxi": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "OK"
          },
          "summary": {
            "$ref": "#/components/schemas/Taxi_HereResponse_summary"
          },
          "routes": {
            "type": "array",
            "description": "Route information including distance, time, toll, taxiCharges (<b>taxiFare, congestionCharges, airportCharges</b>) with <b>taxiSumarry</b>",
            "items": {
              "$ref": "#/components/schemas/TaxiRouteResponse"
            }
          }
        }
      },
      "HERE_OtherVehicleTypes": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "OK"
          },
          "summary": {
            "$ref": "#/components/schemas/OtherVehicleTypes_HereResponse_summary"
          },
          "routes": {
            "type": "array",
            "description": "Route information including distance, time, toll.",
            "items": {
              "$ref": "#/components/schemas/OtherVehicleTypesRouteResponse"
            }
          }
        }
      },
      "HERE_Truck": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "OK"
          },
          "summary": {
            "$ref": "#/components/schemas/HereResponse_summary"
          },
          "routes": {
            "type": "array",
            "description": "Route information including distance, time, toll.",
            "items": {
              "$ref": "#/components/schemas/RouteResponse"
            }
          }
        }
      },
      "GmapResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "OK"
          },
          "summary": {
            "$ref": "#/components/schemas/HereResponse_summary"
          },
          "routes": {
            "type": "array",
            "description": "Route information including distance, time, tol",
            "items": {
              "$ref": "#/components/schemas/GmapRouteResponse"
            }
          }
        }
      },
      "Location": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Address"
          },
          {
            "$ref": "#/components/schemas/Place-Id"
          },
          {
            "$ref": "#/components/schemas/Geo-Coordinates"
          }
        ]
      },
      "Address": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "Specify address as string. Example- New York ,NY",
            "example": "New York ,NY"
          }
        }
      },
      "Place-Id": {
        "type": "object",
        "properties": {
          "place_id": {
            "type": "string",
            "description": "Specify as Google Place ID string. Example-ChIJlTlXssSPxokROy60gaOlloQ",
            "example": "ChIJlTlXssSPxokROy60gaOlloQ"
          }
        }
      },
      "Geo-Coordinates": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "description": "Specify as geo-coordinates in decimals (latitude) Example- location{lat 33.02079}"
          },
          "lng": {
            "type": "number",
            "description": "Specify as geo-coordinates in decimals (longitude) Example- location{lng -96.69925}"
          }
        }
      },
      "epoch": {
        "type": "Number",
        "description": "Timestamp (epoch) in seconds"
      },
      "tx": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "Timestamp in UTC",
            "example": "2023-04-17T12:44:22.060Z"
          },
          "tx": {
            "type": "number",
            "example": 75700
          }
        }
      },
      "transactionCountResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "example": "user@domain.com"
          },
          "plan": {
            "type": "string",
            "description": "Plan subscribed to",
            "example": "Basic"
          },
          "planStatus": {
            "type": "string",
            "example": "Active",
            "enum": [
              "Active"
            ]
          },
          "transactions": {
            "type": "array",
            "description": "daily transaction record",
            "items": {
              "$ref": "#/components/schemas/tx"
            }
          }
        }
      },
      "fuelOptions": {
        "type": "object",
        "properties": {
          "fuelCost": {
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "example": 1.305,
                "default": 3,
                "description": "Specify numeric value up to two decimal places"
              },
              "units": {
                "type": "string",
                "example": "USD/gallon",
                "default": "USD/gallon"
              },
              "currency": {
                "type": "string",
                "example": "USD",
                "default": "USD",
                "description": "If currency in units is not provided, the currency in fuel options will be used. If neither is provided, calculations will be based on the region by default.",
                "enum": [
                  "USD",
                  "CAD",
                  "MXN",
                  "INR",
                  "AUD",
                  "GBP",
                  "NOK",
                  "SEK",
                  "DKK",
                  "PEN",
                  "COP",
                  "ARS",
                  "CLF",
                  "CLP",
                  "SOL"
                ]
              },
              "fuelUnit": {
                "type": "string",
                "example": "gallon",
                "default": "gallon",
                "enum": [
                  "liter",
                  "gallon"
                ]
              }
            }
          },
          "fuelEfficiency": {
            "example": {
              "city": 28.57,
              "hwy": 22.4,
              "units": "mpg"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/FuelEfficiency"
              }
            ]
          }
        }
      },
      "vehicle": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/vehicleType"
          },
          "weight": {
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "example": 20000
              },
              "unit": {
                "type": "string",
                "enum": [
                  "pound",
                  "tonnes"
                ]
              }
            }
          },
          "height": {
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "example": 7.5
              },
              "unit": {
                "type": "string",
                "enum": [
                  "meter",
                  "feet"
                ]
              }
            }
          },
          "length": {
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "example": 7.5
              },
              "unit": {
                "type": "string",
                "enum": [
                  "meter",
                  "feet"
                ]
              }
            }
          },
          "axles": {
            "type": "number",
            "example": 4
          },
          "emissionClass": {
            "type": "string",
            "example": "euro_5"
          }
        }
      },
      "units": {
        "type": "object",
        "description": "When currency in units is provided, it takes precedence for all calculations. When the value of fuelOptions.fuelCost.value is provided, we will extract this value and perform the necessary conversion",
        "properties": {
          "currency": {
            "type": "string",
            "example": "USD",
            "default": "USD",
            "description": "When currency in units is provided, it takes precedence for all calculations. When the value of fuelOptions.fuelCost.value is provided, we will extract this value and perform the necessary conversion",
            "enum": [
              "USD",
              "CAD",
              "MXN",
              "INR",
              "AUD",
              "GBP",
              "NOK",
              "SEK",
              "DKK",
              "PEN",
              "COP",
              "ARS",
              "CLF",
              "CLP",
              "SOL"
            ]
          }
        }
      },
      "vehicleTruck": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/vehicleTypeTruck"
          },
          "weight": {
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "example": 20000
              },
              "unit": {
                "type": "string",
                "enum": [
                  "pound",
                  "tonnes"
                ]
              }
            }
          },
          "height": {
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "example": 7.5
              },
              "unit": {
                "type": "string",
                "enum": [
                  "meter",
                  "feet"
                ]
              }
            }
          },
          "length": {
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "example": 7.5
              },
              "unit": {
                "type": "string",
                "enum": [
                  "meter",
                  "feet"
                ]
              }
            }
          },
          "axles": {
            "type": "number",
            "example": 4
          },
          "emissionClass": {
            "type": "string",
            "example": "euro_5"
          }
        }
      },
      "vehicleEv": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/vehicleTypeEv"
          },
          "weight": {
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "example": 20000
              },
              "unit": {
                "type": "string",
                "enum": [
                  "pound",
                  "tonnes"
                ]
              }
            }
          },
          "height": {
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "example": 7.5
              },
              "unit": {
                "type": "string",
                "enum": [
                  "meter",
                  "feet"
                ]
              }
            }
          },
          "length": {
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "example": 7.5
              },
              "unit": {
                "type": "string",
                "enum": [
                  "meter",
                  "feet"
                ]
              }
            }
          },
          "axles": {
            "type": "number",
            "example": 4
          },
          "emissionClass": {
            "type": "string",
            "example": "euro_5"
          }
        }
      },
      "vehicleType": {
        "type": "string",
        "default": "2AxlesAuto",
        "example": "2AxlesTaxi",
        "description": "For more information of vehicle types read [**here**](#tag/Vehicle-types-supported-by-TollGuru)",
        "enum": [
          "2AxlesAuto",
          "3AxlesAuto",
          "4AxlesAuto",
          "2AxlesDualTire",
          "3AxlesDualTire",
          "4AxlesDualTire",
          "2AxlesTruck",
          "3AxlesTruck",
          "4AxlesTruck",
          "5AxlesTruck",
          "6AxlesTruck",
          "7AxlesTruck",
          "8AxlesTruck",
          "9AxlesTruck",
          "2AxlesBus",
          "3AxlesBus",
          "2AxlesMotorcycle",
          "3AxlesMotorcycle",
          "2AxlesRv",
          "3AxlesRv",
          "4AxlesRv",
          "2AxlesTNC",
          "2AxlesTNCPool",
          "2AxlesTaxi",
          "2AxlesTaxiPool",
          "Carpool2",
          "Carpool3"
        ]
      },
      "vehicleTypeTruck": {
        "type": "string",
        "default": "2AxlesTruck",
        "example": "2AxlesTruck",
        "description": "For more information of vehicle types read [**here**](#tag/Vehicle-types-supported-by-TollGuru)",
        "enum": [
          "2AxlesTruck",
          "3AxlesTruck",
          "4AxlesTruck",
          "5AxlesTruck",
          "6AxlesTruck",
          "7AxlesTruck",
          "8AxlesTruck",
          "9AxlesTruck"
        ]
      },
      "vehicleTypeEv": {
        "type": "string",
        "default": "2AxlesEv",
        "example": "2AxlesEv",
        "description": "For more information of vehicle types read [**here**](#tag/Vehicle-types-supported-by-TollGuru)",
        "enum": [
          "2AxlesTruck",
          "3AxlesTruck",
          "4AxlesTruck",
          "5AxlesTruck",
          "6AxlesTruck",
          "7AxlesTruck",
          "8AxlesTruck",
          "9AxlesTruck"
        ]
      },
      "DateTime": {
        "type": "string",
        "format": "date-time",
        "example": "2021-01-15T13:46:17"
      },
      "Timestamp": {
        "type": "number",
        "example": 1609507347
      },
      "FuelEfficiency": {
        "type": "object",
        "properties": {
          "city": {
            "type": "number",
            "default": 23.4
          },
          "hwy": {
            "type": "number",
            "default": 29.25
          },
          "units": {
            "description": "If the fuel price is in liter, then we expect fuel efficiency to be in kmpl or l100, similarly, if it is in gallons, then we expect, efficiency in mpg.",
            "type": "string",
            "example": "mpg",
            "default": "kmpl",
            "enum": [
              "mpg",
              "kmpl",
              "l100"
            ]
          }
        },
        "description": "If you want an accurate estimate of fuel expenses, you will need to specify parameters specific to fuel price and fuel efficiency as fuelEfficiency object."
      },
      "Truck": {
        "type": "object",
        "properties": {
          "truckType": {
            "type": "string",
            "description": "Specifies the vehicle type<br><strong>Note</strong>: Relevant for restrictions that apply exclusively to tractors with semi-trailers (observed in North America). Such restrictions are taken into account only in case of the <code>truckType</code> set to <code>tractorTruck</code> and the trailers count greater than 0 (for example <code>truckType: \"tractorTruck\", trailersCount: 1</code>). The truck type is irrelevant in case of restrictions common for all types of trucks.",
            "enum": [
              "truck",
              "tractorTruck"
            ]
          },
          "trailersCount": {
            "type": "number",
            "description": "Specifies number of trailers pulled by a vehicle. The provided value must be between 0 and 4.",
            "default": 0
          },
          "shippedHazardousGoods": {
            "type": "string",
            "description": "List of hazardous materials in the vehicle. The names correspond to <b><a href=\"https://www.fmcsa.dot.gov/sites/fmcsa.dot.gov/files/docs/Nine_Classes_of_Hazardous_Materials-4-2013_508CLN.pdf\" target=\"_blank\"><b> HAZMAT classes 1 to 9. <br> For example, explosive is Class 1 and so on. </b></b></a>",
            "enum": [
              "explosive",
              "gas",
              "flammable",
              "combustible",
              "organic",
              "poison",
              "radioActive",
              "corrosive",
              "miscellaneous"
            ]
          },
          "limitedWeight": {
            "type": "number",
            "maximum": 1000,
            "minimum": 0,
            "description": "Vehicle weight including trailers and shipped goods, in pounds. <br> If truck weight is not specified, incorrect tolls may be calculated for trucks on Pennsylvania turnpike and other toll locations where tolls are based on weight."
          },
          "weightPerAxle": {
            "type": "number",
            "maximum": 0,
            "minimum": 0,
            "description": "Vehicle weight per axle in pounds. <br> If truck weight is not specified, incorrect tolls may be calculated for trucks on Pennsylvania turnpike and other toll locations where tolls are based on weight."
          },
          "height": {
            "type": "number",
            "maximum": 50,
            "description": "Vehicle height in feet. The provided value must be between 0 and 50. <br> If vehicle height is not specified, incorrect tolls may be calculated on New York Thruway and other toll roads where tolls are based on axles and weight."
          },
          "width": {
            "type": "number",
            "maximum": 50,
            "minimum": 0,
            "description": "Vehicle width in feet. The provided value must be between 0 and 50."
          },
          "length": {
            "type": "number",
            "maximum": 300,
            "minimum": 0,
            "description": "Vehicle length in feet. The provided value must be between 0 and 300."
          },
          "tunnelCategory": {
            "type": "string",
            "description": "Specifies the tunnel category to restrict certain route links. The route will pass only through tunnels of a less strict category.",
            "enum": [
              "B",
              "C",
              "D",
              "E"
            ]
          },
          "truckRestrictionPenalty": {
            "type": "string",
            "description": "pecifies the penalty type on violated truck restrictions.<br><code>strict</code>: route will not use links with a violated truck restriction at any circumstances<br><strong>Note</strong>: Route computation will fail and return NoRouteFound if not able to avoid the links with a violated truck restriction and the penalty type is strict.<br><code>soft</code>: route will use links with a violated truck restriction if there is no alternative to avoid them<",
            "enum": [
              "strict",
              "soft"
            ]
          }
        }
      },
      "Driver": {
        "type": "object",
        "properties": {
          "wage": {
            "type": "number",
            "description": "Driver wage per hour",
            "default": 30
          },
          "rounding": {
            "type": "number",
            "description": "How is the driver time is rounded (to 30 minutes, an hour, etc.)?",
            "default": 30
          },
          "valueOfTime": {
            "type": "number",
            "description": "If driver wages are specified, do not add value of time. If value of time is specified, it is assumed you are the driver and not being paid for the time. Driver wage calculations will not be returned.",
            "default": 0
          }
        },
        "description": "<p>You need to specify parameters in <code>driver</code> object to estimate driver wages. You can also specify your <b><a href=\"https://en.wikipedia.org/wiki/Value_of_time\">value of time</b></a>. For example, if you are willing to spend $2.00 to save 15 minutes (but not a penny more) for a particular trip, your value of time is $2.00* (60/15) = $8.00 per hour.</p>"
      },
      "Route": {
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/Route_location"
          }
        }
      },
      "EVRouteResponse": {
        "type": "object",
        "properties": {
          "summary": {
            "$ref": "#/components/schemas/RouteResponse_summary"
          },
          "costs": {
            "$ref": "#/components/schemas/Cost"
          },
          "tolls": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Barrier"
                },
                {
                  "$ref": "#/components/schemas/TicketSystem1"
                },
                {
                  "$ref": "#/components/schemas/TicketSystem2"
                },
                {
                  "$ref": "#/components/schemas/TicketSystem3"
                }
              ]
            }
          },
          "chargingPoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChargingPoint"
            }
          },
          "directions": {
            "type": "array",
            "example": [
              {
                "position": {
                  "latitude": 43.6453235,
                  "longitude": -79.3824971
                },
                "maneuver": "lightRight",
                "html_instructions": "Turn <span class=\\\"direction\\\">slightly right</span> onto <span class=\\\"next-street\\\">York St</span> <span class=\\\"number\\\">(HWY-11A)</span>. <span class=\\\"distance-description\\\">Go for <span class=\\\"length\\\">0.3 mi</span>.</span>",
                "distance": 73,
                "duration": 24,
                "note": []
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          "herePath": {
            "type": "array",
            "example": [
              43.64539434,
              -79.3831512,
              43.6418318,
              -79.3824604,
              "..."
            ],
            "items": {
              "type": "number"
            }
          }
        }
      },
      "TaxiRouteResponse": {
        "type": "object",
        "properties": {
          "summary": {
            "$ref": "#/components/schemas/RouteResponse_summary"
          },
          "costs": {
            "$ref": "#/components/schemas/Cost"
          },
          "tolls": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Barrier"
                },
                {
                  "$ref": "#/components/schemas/TicketSystem1"
                },
                {
                  "$ref": "#/components/schemas/TicketSystem2"
                },
                {
                  "$ref": "#/components/schemas/TicketSystem3"
                }
              ]
            }
          },
          "taxiCharges": {
            "type": "object",
            "description": "Specified only when vehicleType is 2AxlesTaxi, 2AxlesTaxiPool",
            "$ref": "#/components/schemas/taxiCharges"
          },
          "directions": {
            "type": "array",
            "example": [
              {
                "position": {
                  "latitude": 43.6453235,
                  "longitude": -79.3824971
                },
                "maneuver": "lightRight",
                "html_instructions": "Turn <span class=\\\"direction\\\">slightly right</span> onto <span class=\\\"next-street\\\">York St</span> <span class=\\\"number\\\">(HWY-11A)</span>. <span class=\\\"distance-description\\\">Go for <span class=\\\"length\\\">0.3 mi</span>.</span>",
                "distance": 73,
                "duration": 24,
                "note": []
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          "herePath": {
            "type": "array",
            "example": [
              43.64539434,
              -79.3831512,
              43.6418318,
              -79.3824604,
              "..."
            ],
            "items": {
              "type": "number"
            }
          }
        }
      },
      "OtherVehicleTypesRouteResponse": {
        "type": "object",
        "properties": {
          "summary": {
            "$ref": "#/components/schemas/RouteResponse_summary"
          },
          "costs": {
            "$ref": "#/components/schemas/Cost"
          },
          "tolls": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Barrier"
                },
                {
                  "$ref": "#/components/schemas/TicketSystem1"
                },
                {
                  "$ref": "#/components/schemas/TicketSystem2"
                },
                {
                  "$ref": "#/components/schemas/TicketSystem3"
                }
              ]
            }
          },
          "directions": {
            "type": "array",
            "example": [
              {
                "position": {
                  "latitude": 43.6453235,
                  "longitude": -79.3824971
                },
                "maneuver": "lightRight",
                "html_instructions": "Turn <span class=\\\"direction\\\">slightly right</span> onto <span class=\\\"next-street\\\">York St</span> <span class=\\\"number\\\">(HWY-11A)</span>. <span class=\\\"distance-description\\\">Go for <span class=\\\"length\\\">0.3 mi</span>.</span>",
                "distance": 73,
                "duration": 24,
                "note": []
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          "herePath": {
            "type": "array",
            "example": [
              43.64539434,
              -79.3831512,
              43.6418318,
              -79.3824604,
              "..."
            ],
            "items": {
              "type": "number"
            }
          }
        }
      },
      "RouteResponse": {
        "type": "object",
        "properties": {
          "summary": {
            "$ref": "#/components/schemas/RouteResponse_summary"
          },
          "costs": {
            "$ref": "#/components/schemas/Cost"
          },
          "tolls": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Barrier"
                },
                {
                  "$ref": "#/components/schemas/TicketSystem1"
                },
                {
                  "$ref": "#/components/schemas/TicketSystem2"
                },
                {
                  "$ref": "#/components/schemas/TicketSystem3"
                }
              ]
            }
          },
          "directions": {
            "type": "array",
            "example": [
              {
                "position": {
                  "latitude": 43.6453235,
                  "longitude": -79.3824971
                },
                "maneuver": "lightRight",
                "html_instructions": "Turn <span class=\\\"direction\\\">slightly right</span> onto <span class=\\\"next-street\\\">York St</span> <span class=\\\"number\\\">(HWY-11A)</span>. <span class=\\\"distance-description\\\">Go for <span class=\\\"length\\\">0.3 mi</span>.</span>",
                "distance": 73,
                "duration": 24,
                "note": []
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          "herePath": {
            "type": "array",
            "example": [
              43.64539434,
              -79.3831512,
              43.6418318,
              -79.3824604,
              "..."
            ],
            "items": {
              "type": "number"
            }
          },
          "hos": {
            "$ref": "#/components/schemas/HosResponse"
          },
          "territoryMileage": {
            "$ref": "#/components/schemas/TeritoryMielageRes"
          }
        }
      },
      "GmapRouteResponse": {
        "type": "object",
        "properties": {
          "summary": {
            "$ref": "#/components/schemas/Gmaps_RouteResponse_summary"
          },
          "costs": {
            "$ref": "#/components/schemas/Cost"
          },
          "tolls": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Barrier"
                },
                {
                  "$ref": "#/components/schemas/TicketSystem1"
                },
                {
                  "$ref": "#/components/schemas/TicketSystem2"
                },
                {
                  "$ref": "#/components/schemas/TicketSystem3"
                }
              ]
            }
          },
          "directions": {
            "type": "array",
            "example": [
              {
                "position": {
                  "latitude": 43.64539434,
                  "longitude": -79.3831512
                },
                "maneuver": "forward",
                "html_instructions": "Head toward <span class=\\\"toward_street\\\">Praça Dom Francisco Gomes</span> on <span class=\\\"street\\\">Rua da Misericórdia</span>. <span class=\\\"distance-description\\\">Go for <span class=\\\"length\\\">200 ft</span>.</span>",
                "distance": 183,
                "duration": 45,
                "note": []
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          "herePath": {
            "type": "array",
            "example": [
              43.64539434,
              -79.3831512,
              43.6418318,
              -79.3824604,
              "..."
            ],
            "items": {
              "type": "number"
            }
          },
          "hos": {
            "$ref": "#/components/schemas/HosResponse"
          }
        }
      },
      "geoJsonPoint": {
        "type": "object",
        "properties": {
          "geometry": {
            "type": "object",
            "properties": {
              "coordinates": {
                "type": "array",
                "example": [
                  -75.360105,
                  40.614533
                ],
                "description": "longitude, latitude"
              }
            }
          }
        }
      },
      "taxiFareObject": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "example": "Texas"
          },
          "start": {
            "$ref": "#/components/schemas/geoJsonPoint"
          },
          "end": {
            "$ref": "#/components/schemas/geoJsonPoint"
          },
          "distanceTravelled": {
            "type": "number",
            "example": 176,
            "description": "(in miles)"
          },
          "costPerUnitMile": {
            "type": "number",
            "example": 0.9
          },
          "taxiFareForDistanceTravelled": {
            "type": "number",
            "example": 159
          }
        }
      },
      "congestionSurchargeObject": {
        "type": "object",
        "properties": {
          "zone": {
            "type": "string",
            "example": "New York Congestion Zone 1"
          },
          "charge": {
            "type": "number",
            "example": 2.5
          }
        }
      },
      "airportChargeObject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Hartsfield–Jackson Atlanta International Airport"
          },
          "pickUpCharge": {
            "type": "number",
            "example": 3.85
          },
          "dropOffCharge": {
            "type": "number",
            "example": 3.85
          }
        }
      },
      "taxiCharges": {
        "type": "object",
        "properties": {
          "taxiFare": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/taxiFareObject"
            }
          },
          "congestionSurcharge": {
            "type": "array",
            "description": "Currently applicable to New York Congestion Zone 1",
            "items": {
              "$ref": "#/components/schemas/congestionSurchargeObject"
            }
          },
          "airportCharges": {
            "description": "Pickup/DropOff (only one cost is added to  taxiSummary)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/airportChargeObject"
            }
          },
          "taxiSummary": {
            "type": "object",
            "properties": {
              "totalTaxiCost": {
                "type": "number",
                "example": 2645
              },
              "totalTaxiFare": {
                "type": "number",
                "example": 2628
              },
              "totalDistanceTravelled": {
                "type": "number",
                "example": 1587
              },
              "totalExtraCharges": {
                "type": "number",
                "example": 2.5
              },
              "tollCost": {
                "type": "number",
                "example": 14.35
              },
              "currency": {
                "type": "string",
                "example": "USD"
              },
              "distanceUnit": {
                "type": "string",
                "default": "miles"
              }
            }
          }
        }
      },
      "powerFeedType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 2
          },
          "name": {
            "type": "string",
            "example": "Level 2"
          },
          "totalNumberOfConnectors": {
            "type": "number",
            "example": 8
          }
        }
      },
      "ChargingPoint": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 123
          },
          "evStation": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "METRO NASHVILLE"
              },
              "address": {
                "type": "string",
                "example": "800 2nd Ave S, Nashville, TN, 37210, US"
              },
              "contact": {
                "type": "object",
                "properties": {
                  "phone": {
                    "type": "string",
                    "example": "888-758-4389"
                  }
                }
              },
              "position": {
                "type": "object",
                "description": "A Geojson object",
                "properties": {
                  "point": {
                    "type": "object",
                    "properties": {
                      "geometry": {
                        "type": "object",
                        "properties": {
                          "coordinates": {
                            "type": "array",
                            "example": [
                              -75.360105,
                              40.614533
                            ],
                            "description": "longitude, latitude"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "brand": {
                "type": "string",
                "example": "ChargePoint Network",
                "enum": [
                  "Non-Networked",
                  "Volta"
                ]
              },
              "connectorType": {
                "type": "string",
                "example": "J1772",
                "enum": [
                  "J1772 NEMA520",
                  "CHADEMO J1772",
                  "CHADEMO J1772 J1772COMBO",
                  "NEMA520",
                  "J1772 TESLA"
                ]
              },
              "powerFeedTypes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/powerFeedType"
                }
              },
              "facilityType": {
                "type": "string",
                "example": "Car_Dealer",
                "enum": [
                  "Utility",
                  "Gas_Station",
                  "Shopping_Mall",
                  "etc"
                ]
              },
              "accessTime": {
                "type": "string",
                "example": "24 hours daily"
              }
            }
          }
        }
      },
      "TicketSystem3": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Toll type: ticketSystem3."
          },
          "tagCost": {
            "type": "number",
            "description": "Transponder toll cost <br>For example, <b><a href=\"https://iave.capufe.gob.mx/#/\" target=\"_blank\">IAVE</b></a>, <b><a href=\"https://www.pase.com.mx/\" target=\"_blank\">Tag PASE</b></a>, <b><a href=\"https://www.televia.com.mx/\" target=\"_blank\">TeleVia</b></a>, <b><a href=\"https://www.viapass.com.mx/viapass/web_home.aspx\" target=\"_blank\">VIAPass</b></a> etc."
          },
          "cashCost": {
            "type": "number",
            "description": "Cash toll cost"
          },
          "licensePlateCost": {
            "type": "number",
            "description": "License plate (video) toll cost."
          },
          "prepaidCardCost": {
            "type": "number",
            "description": "Prepaid card such as Nexpress, Nexus Card, etc. toll cost"
          },
          "creditCardCost": {
            "type": "number",
            "description": "Credit card toll cost"
          },
          "currency": {
            "type": "string",
            "description": "Currency"
          },
          "tagPrimary": {
            "type": "array",
            "description": "A primary transponder that can be used on the facility. Typically primary transponders have discounts for each usage or based on volume.",
            "items": {
              "type": "string"
            }
          },
          "tagSecondary": {
            "type": "array",
            "description": "All other transponders that can be used on the facility. Secondary transponders may not count towards discounts",
            "items": {
              "type": "string"
            }
          },
          "licensePlatePrimary": {
            "type": "string",
            "description": "Name of the primary license plate toll (video toll) collection system. Typically license Plate tolls are not discounted."
          },
          "licensePlateSecondary": {
            "type": "string",
            "description": "Name of the secondary license plate toll (video toll) collection system"
          },
          "discountCarDetails": {
            "type": "string"
          },
          "start": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "description": "TollGuru toll ID. Useful for error checking"
              },
              "lat": {
                "type": "number",
                "description": "Approximate latitude of the toll location"
              },
              "lng": {
                "type": "number",
                "description": "Approximate longitude of the toll location"
              },
              "name": {
                "type": "string",
                "description": "Name of the toll location"
              },
              "road": {
                "type": "string",
                "description": "Name of the toll road"
              },
              "state": {
                "type": "string",
                "description": "State, province of the toll location"
              },
              "country": {
                "type": "string"
              },
              "arrival": {
                "type": "object",
                "properties": {
                  "distance": {
                    "type": "number"
                  },
                  "time": {
                    "type": "string"
                  }
                }
              },
              "point": {
                "type": "object",
                "properties": {
                  "geometry": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "Point"
                      },
                      "coordinates": {
                        "type": "array",
                        "description": "[lng, lat]"
                      }
                    }
                  }
                }
              }
            }
          },
          "end": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "description": "TollGuru toll ID. Useful for error checking"
              },
              "lat": {
                "type": "number",
                "description": "Approximate latitude of the toll location"
              },
              "lng": {
                "type": "number",
                "description": "Approximate longitude of the toll location"
              },
              "name": {
                "type": "string",
                "description": "Name of the toll location"
              },
              "road": {
                "type": "string",
                "description": "Name of the toll road"
              },
              "state": {
                "type": "string",
                "description": "State, province of the toll location"
              },
              "country": {
                "type": "string"
              },
              "arrival": {
                "type": "object",
                "properties": {
                  "distance": {
                    "type": "number"
                  },
                  "time": {
                    "type": "string"
                  }
                }
              },
              "point": {
                "type": "object",
                "properties": {
                  "geometry": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "Point"
                      },
                      "coordinates": {
                        "type": "array",
                        "description": "[lng, lat]"
                      }
                    }
                  }
                }
              }
            },
            "description": "Tolls object contains tolls for all the toll locations on the route. For each toll location"
          }
        },
        "example": [
          {
            "type": "ticketSystem3",
            "tagCost": 2.2,
            "tagPriCost": 2.2,
            "tagSecCost": 2.9,
            "cashCost": 2.9,
            "licensePlateCost": null,
            "prepaidCardCost": 2.2,
            "creditCardCost": null,
            "currency": "USD",
            "tagPrimary": [
              "E-ZPass NJ"
            ],
            "tagSecondary": [
              "E-ZPass",
              "E-ZPass DE",
              "Uni",
              "I-Pass",
              "E-ZPass Skyway",
              "E-ZPass IN",
              "RiverLink",
              "E-ZPass ME",
              "E-ZPass MD",
              "E-ZPass MA",
              "E-ZPass NH",
              "E-ZPass NY",
              "E-ZPass NC",
              "E-ZPass OH",
              "E-ZPass PA",
              "E-ZPass RI",
              "E-ZPass VA",
              "E-ZPass WV",
              "E-Zpass Flex"
            ],
            "licensePlatePrimary": "Tolls by Mail",
            "licensePlateSecondary": null,
            "discountCarDetails": "Other discounts: 65+ Senior citizens receive a 10% discount on the off-peak rate as Senior Citizen Discount. Vehicles with fuel efficiency 45 MPG and meeting California Super Ultra Low Emission Vehicle (SULEV) standard receive a 10% discount on the off-peak rate as Green Pass Discount. Must have NJ E-ZPass.",
            "discountCarType": "Cars",
            "start": {
              "id": 1260004,
              "lat": 39.86145,
              "lng": -75.07475,
              "name": "NJ168, Woodbury, S. Camden",
              "road": "New Jersey Tpke",
              "state": "New Jersey",
              "country": "USA",
              "arrival": {
                "distance": 890,
                "time": "2021-10-25T05:31:06+00:00"
              },
              "point": {
                "type": "Feature",
                "properties": {},
                "geometry": {
                  "type": "Point",
                  "coordinates": [
                    -75.07475,
                    39.86145
                  ]
                }
              }
            },
            "end": {
              "id": 1260000,
              "lat": 39.68685,
              "lng": -75.44825,
              "name": "Delaware Memorial Bridge",
              "road": "New Jersey Tpke",
              "state": "New Jersey",
              "country": "USA",
              "arrival": {
                "distance": 39164,
                "time": "2021-10-25T05:31:06+00:00"
              },
              "point": {
                "type": "Feature",
                "properties": {},
                "geometry": {
                  "type": "Point",
                  "coordinates": [
                    -75.44825,
                    39.68685
                  ]
                }
              }
            },
            "height": null,
            "tagRequested": "prepaidCardCost"
          }
        ]
      },
      "TicketSystem2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Toll type: ticketSystem2."
          },
          "tagCost": {
            "type": "number",
            "description": "Transponder toll cost <br>For example, <b><a href=\"https://iave.capufe.gob.mx/#/\" target=\"_blank\">IAVE</b></a>, <b><a href=\"https://www.pase.com.mx/\" target=\"_blank\">Tag PASE</b></a>, <b><a href=\"https://www.televia.com.mx/\" target=\"_blank\">TeleVia</b></a>, <b><a href=\"https://www.viapass.com.mx/viapass/web_home.aspx\" target=\"_blank\">VIAPass</b></a> etc."
          },
          "cashCost": {
            "type": "number",
            "description": "Cash toll cost"
          },
          "licensePlateCost": {
            "type": "number",
            "description": "License plate (video) toll cost."
          },
          "prepaidCardCost": {
            "type": "number",
            "description": "Prepaid card such as Nexpress, Nexus Card, etc. toll cost"
          },
          "creditCardCost": {
            "type": "number",
            "description": "Credit card toll cost"
          },
          "currency": {
            "type": "string",
            "description": "Currency"
          },
          "tagPrimary": {
            "type": "array",
            "description": "A primary transponder that can be used on the facility. Typically primary transponders have discounts for each usage or based on volume.",
            "items": {
              "type": "string"
            }
          },
          "tagSecondary": {
            "type": "array",
            "description": "All other transponders that can be used on the facility. Secondary transponders may not count towards discounts",
            "items": {
              "type": "string"
            }
          },
          "licensePlatePrimary": {
            "type": "string",
            "description": "Name of the primary license plate toll (video toll) collection system. Typically license Plate tolls are not discounted."
          },
          "licensePlateSecondary": {
            "type": "string",
            "description": "Name of the secondary license plate toll (video toll) collection system"
          },
          "discountCarDetails": {
            "type": "string"
          },
          "start": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "description": "TollGuru toll ID. Useful for error checking"
              },
              "lat": {
                "type": "number",
                "description": "Approximate latitude of the toll location"
              },
              "lng": {
                "type": "number",
                "description": "Approximate longitude of the toll location"
              },
              "name": {
                "type": "string",
                "description": "Name of the toll location"
              },
              "road": {
                "type": "string",
                "description": "Name of the toll road"
              },
              "state": {
                "type": "string",
                "description": "State, province of the toll location"
              },
              "country": {
                "type": "string"
              },
              "arrival": {
                "type": "object",
                "properties": {
                  "distance": {
                    "type": "number"
                  },
                  "time": {
                    "type": "string"
                  }
                }
              },
              "point": {
                "type": "object",
                "properties": {
                  "geometry": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "Point"
                      },
                      "coordinates": {
                        "type": "array",
                        "description": "[lng, lat]"
                      }
                    }
                  }
                }
              }
            }
          },
          "end": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "description": "TollGuru toll ID. Useful for error checking"
              },
              "lat": {
                "type": "number",
                "description": "Approximate latitude of the toll location"
              },
              "lng": {
                "type": "number",
                "description": "Approximate longitude of the toll location"
              },
              "name": {
                "type": "string",
                "description": "Name of the toll location"
              },
              "road": {
                "type": "string",
                "description": "Name of the toll road"
              },
              "state": {
                "type": "string",
                "description": "State, province of the toll location"
              },
              "country": {
                "type": "string"
              },
              "arrival": {
                "type": "object",
                "properties": {
                  "distance": {
                    "type": "number"
                  },
                  "time": {
                    "type": "string"
                  }
                }
              },
              "point": {
                "type": "object",
                "properties": {
                  "geometry": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "Point"
                      },
                      "coordinates": {
                        "type": "array",
                        "description": "[lng, lat]"
                      }
                    }
                  }
                }
              }
            },
            "description": "Tolls object contains tolls for all the toll locations on the route. For each toll location"
          }
        },
        "example": [
          {
            "type": "ticketSystem2",
            "tagCost": 0.9,
            "tagPriCost": 0.9,
            "tagSecCost": 3,
            "cashCost": 3,
            "licensePlateCost": null,
            "prepaidCardCost": 0.9,
            "creditCardCost": null,
            "currency": "USD",
            "tagPrimary": [
              "E-ZPass ME"
            ],
            "tagSecondary": [
              "E-ZPass",
              "E-ZPass DE",
              "Uni",
              "I-Pass",
              "E-ZPass Skyway",
              "E-ZPass IN",
              "RiverLink",
              "E-ZPass MD",
              "E-ZPass MA",
              "E-ZPass NH",
              "E-ZPass NJ",
              "E-ZPass NY",
              "E-ZPass NC",
              "E-ZPass OH",
              "E-ZPass PA",
              "E-ZPass RI",
              "E-ZPass VA",
              "E-ZPass WV",
              "E-Zpass Flex"
            ],
            "licensePlatePrimary": null,
            "licensePlateSecondary": null,
            "discountCarDetails": "Monthly Volume discounts: 30-39 trips per month using Maine E-ZPass account equals a 25% discount to all trips. 40+ account trips per month equals a 50% discount applied to all trips.",
            "discountCarType": "Personal cars",
            "start": {
              "id": 1250000,
              "lat": 43.16005,
              "lng": -70.65945,
              "name": "York North",
              "road": "Maine Tpke",
              "state": "Maine",
              "country": "USA",
              "arrival": {
                "distance": 2032,
                "time": "2021-10-25T05:31:06+00:00"
              },
              "point": {
                "type": "Feature",
                "properties": {},
                "geometry": {
                  "type": "Point",
                  "coordinates": [
                    -70.65945,
                    43.16005
                  ]
                }
              }
            },
            "end": {
              "id": 1250002,
              "lat": 43.32455,
              "lng": -70.61015,
              "name": "Wells South",
              "road": "Maine Tpke",
              "state": "Maine",
              "country": "USA",
              "arrival": {
                "distance": 21919,
                "time": "2021-10-25T05:31:06+00:00"
              },
              "point": {
                "type": "Feature",
                "properties": {},
                "geometry": {
                  "type": "Point",
                  "coordinates": [
                    -70.61015,
                    43.32455
                  ]
                }
              }
            },
            "height": null
          }
        ]
      },
      "TicketSystem1": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Toll type: ticketSystem1."
          },
          "tagCost": {
            "type": "number",
            "description": "Transponder toll cost <br>For example, <b><a href=\"https://iave.capufe.gob.mx/#/\" target=\"_blank\">IAVE</b></a>, <b><a href=\"https://www.pase.com.mx/\" target=\"_blank\">Tag PASE</b></a>, <b><a href=\"https://www.televia.com.mx/\" target=\"_blank\">TeleVia</b></a>, <b><a href=\"https://www.viapass.com.mx/viapass/web_home.aspx\" target=\"_blank\">VIAPass</b></a> etc."
          },
          "cashCost": {
            "type": "number",
            "description": "Cash toll cost"
          },
          "licensePlateCost": {
            "type": "number",
            "description": "License plate (video) toll cost."
          },
          "prepaidCardCost": {
            "type": "number",
            "description": "Prepaid card such as Nexpress, Nexus Card, etc. toll cost"
          },
          "creditCardCost": {
            "type": "number",
            "description": "Credit card toll cost"
          },
          "currency": {
            "type": "string",
            "description": "Currency"
          },
          "tagPrimary": {
            "type": "array",
            "description": "A primary transponder that can be used on the facility. Typically primary transponders have discounts for each usage or based on volume.",
            "items": {
              "type": "string"
            }
          },
          "tagSecondary": {
            "type": "array",
            "description": "All other transponders that can be used on the facility. Secondary transponders may not count towards discounts",
            "items": {
              "type": "string"
            }
          },
          "licensePlatePrimary": {
            "type": "string",
            "description": "Name of the primary license plate toll (video toll) collection system. Typically license Plate tolls are not discounted."
          },
          "licensePlateSecondary": {
            "type": "string",
            "description": "Name of the secondary license plate toll (video toll) collection system"
          },
          "discountCarDetails": {
            "type": "string"
          },
          "start": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "description": "TollGuru toll ID. Useful for error checking"
              },
              "lat": {
                "type": "number",
                "description": "Approximate latitude of the toll location"
              },
              "lng": {
                "type": "number",
                "description": "Approximate longitude of the toll location"
              },
              "name": {
                "type": "string",
                "description": "Name of the toll location"
              },
              "road": {
                "type": "string",
                "description": "Name of the toll road"
              },
              "state": {
                "type": "string",
                "description": "State, province of the toll location"
              },
              "country": {
                "type": "string"
              },
              "arrival": {
                "type": "object",
                "properties": {
                  "distance": {
                    "type": "number"
                  },
                  "time": {
                    "type": "string"
                  }
                }
              },
              "point": {
                "type": "object",
                "properties": {
                  "geometry": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "Point"
                      },
                      "coordinates": {
                        "type": "array",
                        "description": "[lng, lat]"
                      }
                    }
                  }
                }
              }
            }
          },
          "end": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "description": "TollGuru toll ID. Useful for error checking"
              },
              "lat": {
                "type": "number",
                "description": "Approximate latitude of the toll location"
              },
              "lng": {
                "type": "number",
                "description": "Approximate longitude of the toll location"
              },
              "name": {
                "type": "string",
                "description": "Name of the toll location"
              },
              "road": {
                "type": "string",
                "description": "Name of the toll road"
              },
              "state": {
                "type": "string",
                "description": "State, province of the toll location"
              },
              "country": {
                "type": "string"
              },
              "arrival": {
                "type": "object",
                "properties": {
                  "distance": {
                    "type": "number"
                  },
                  "time": {
                    "type": "string"
                  }
                }
              },
              "point": {
                "type": "object",
                "properties": {
                  "geometry": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "Point"
                      },
                      "coordinates": {
                        "type": "array",
                        "description": "[lng, lat]"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Tolls object contains tolls for all the toll locations on the route. For each toll location",
        "example": [
          {
            "type": "ticketSystem1",
            "tagCost": 0.45,
            "tagPriCost": 0.45,
            "tagSecCost": null,
            "cashCost": 0.5,
            "licensePlateCost": null,
            "prepaidCardCost": 0.45,
            "creditCardCost": 0.5,
            "currency": "USD",
            "tagPrimary": [
              "K-Tag",
              "BancPass",
              "PikePass",
              "EZ TAG",
              "TxTAG",
              "TollTag"
            ],
            "tagSecondary": [],
            "licensePlatePrimary": null,
            "licensePlateSecondary": null,
            "discountCarDetails": null,
            "discountCarType": null,
            "start": {
              "id": 1240004,
              "lat": 37.47515,
              "lng": -97.32035,
              "name": "33 Mulvane",
              "road": "Kansas Tpke",
              "state": "Kansas",
              "country": "USA",
              "arrival": {
                "distance": 2358,
                "time": "2021-10-25T05:31:06+00:00"
              },
              "point": {
                "type": "Feature",
                "properties": {},
                "geometry": {
                  "type": "Point",
                  "coordinates": [
                    -97.32035,
                    37.47515
                  ]
                }
              }
            },
            "end": {
              "id": 1240008,
              "lat": 37.60545,
              "lng": -97.32505,
              "name": "42 Wichita",
              "road": "Kansas Tpke",
              "state": "Kansas",
              "country": "USA",
              "arrival": {
                "distance": 17690,
                "time": "2021-10-25T05:31:06+00:00"
              },
              "point": {
                "type": "Feature",
                "properties": {},
                "geometry": {
                  "type": "Point",
                  "coordinates": [
                    -97.32505,
                    37.60545
                  ]
                }
              }
            },
            "height": null
          }
        ]
      },
      "Barrier": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "TollGuru toll ID. Useful for error checking"
          },
          "lat": {
            "type": "number",
            "description": "Approximate latitude of the toll location"
          },
          "lng": {
            "type": "number",
            "description": "Approximate longitude of the toll location"
          },
          "name": {
            "type": "string",
            "description": "Name of the toll location"
          },
          "road": {
            "type": "string",
            "description": "Name of the toll road"
          },
          "state": {
            "type": "string",
            "description": "State, province of the toll location"
          },
          "country": {
            "type": "string"
          },
          "tagCost": {
            "type": "number",
            "description": "Transponder toll cost <br>For example, <b><a href=\"https://iave.capufe.gob.mx/#/\" target=\"_blank\">IAVE</b></a>, <b><a href=\"https://www.pase.com.mx/\" target=\"_blank\">Tag PASE</b></a>, <b><a href=\"https://www.televia.com.mx/\" target=\"_blank\">TeleVia</b></a>, <b><a href=\"https://www.viapass.com.mx/viapass/web_home.aspx\" target=\"_blank\">VIAPass</b></a> etc."
          },
          "cashCost": {
            "type": "number",
            "description": "Cash toll cost"
          },
          "licensePlateCost": {
            "type": "number",
            "description": "License plate (video) toll cost."
          },
          "prepaidCardCost": {
            "type": "number",
            "description": "Prepaid card such as Nexpress, Nexus Card, etc. toll cost"
          },
          "creditCardCost": {
            "type": "number",
            "description": "Credit card toll cost"
          },
          "currency": {
            "type": "string",
            "description": "Currency"
          },
          "tagPrimary": {
            "type": "array",
            "description": "A primary transponder that can be used on the facility. Typically primary transponders have discounts for each usage or based on volume.",
            "items": {
              "type": "string"
            }
          },
          "tagSecondary": {
            "type": "array",
            "description": "All other transponders that can be used on the facility. Secondary transponders may not count towards discounts",
            "items": {
              "type": "string"
            }
          },
          "licensePlatePrimary": {
            "type": "string",
            "description": "Name of the primary license plate toll (video toll) collection system. Typically license Plate tolls are not discounted."
          },
          "licensePlateSecondary": {
            "type": "string",
            "description": "Name of the secondary license plate toll (video toll) collection system"
          }
        },
        "description": "Tolls object contains tolls for all the toll locations on the route. For each toll location",
        "example": [
          {
            "id": 1139007,
            "lat": 29.52775,
            "lng": -95.52265,
            "name": "Sienna Pkwy",
            "road": "Fort Bend Pkwy",
            "state": "Texas",
            "country": "USA",
            "type": "barrier",
            "tagCost": 0.45,
            "tagPriCost": 0.45,
            "tagSecCost": null,
            "cashCost": null,
            "licensePlateCost": 0.7,
            "prepaidCardCost": 0.45,
            "creditCardCost": null,
            "currency": "USD",
            "tagPrimary": [
              "TxTAG",
              "EZ TAG",
              "TollTag",
              "K-Tag",
              "PikePass"
            ],
            "tagSecondary": [],
            "licensePlatePrimary": null,
            "licensePlateSecondary": null,
            "discountCarDetails": null,
            "discountCarType": null,
            "height": null,
            "tagRequested": "prepaidCardCost",
            "arrival": {
              "distance": 1441,
              "time": "2021-10-25T05:31:06+00:00"
            },
            "point": {
              "type": "Feature",
              "properties": {},
              "geometry": {
                "type": "Point",
                "coordinates": [
                  -95.52265,
                  29.52775
                ]
              }
            }
          },
          {
            "type": "ticketSystem1",
            "tagCost": 0.45,
            "tagPriCost": 0.45,
            "tagSecCost": null,
            "cashCost": 0.5,
            "licensePlateCost": null,
            "prepaidCardCost": 0.45,
            "creditCardCost": 0.5,
            "currency": "USD",
            "tagPrimary": [
              "K-Tag",
              "BancPass",
              "PikePass",
              "EZ TAG",
              "TxTAG",
              "TollTag"
            ],
            "tagSecondary": [],
            "licensePlatePrimary": null,
            "licensePlateSecondary": null,
            "discountCarDetails": null,
            "discountCarType": null,
            "start": {
              "id": 1240004,
              "lat": 37.47515,
              "lng": -97.32035,
              "name": "33 Mulvane",
              "road": "Kansas Tpke",
              "state": "Kansas",
              "country": "USA",
              "arrival": {
                "distance": 2358,
                "time": "2021-10-25T05:31:06+00:00"
              },
              "point": {
                "type": "Feature",
                "properties": {},
                "geometry": {
                  "type": "Point",
                  "coordinates": [
                    -97.32035,
                    37.47515
                  ]
                }
              }
            },
            "end": {
              "id": 1240008,
              "lat": 37.60545,
              "lng": -97.32505,
              "name": "42 Wichita",
              "road": "Kansas Tpke",
              "state": "Kansas",
              "country": "USA",
              "arrival": {
                "distance": 17690,
                "time": "2021-10-25T05:31:06+00:00"
              },
              "point": {
                "type": "Feature",
                "properties": {},
                "geometry": {
                  "type": "Point",
                  "coordinates": [
                    -97.32505,
                    37.60545
                  ]
                }
              }
            },
            "height": null
          },
          {
            "type": "ticketSystem2",
            "tagCost": 0.9,
            "tagPriCost": 0.9,
            "tagSecCost": 3,
            "cashCost": 3,
            "licensePlateCost": null,
            "prepaidCardCost": 0.9,
            "creditCardCost": null,
            "currency": "USD",
            "tagPrimary": [
              "E-ZPass ME"
            ],
            "tagSecondary": [
              "E-ZPass",
              "E-ZPass DE",
              "Uni",
              "I-Pass",
              "E-ZPass Skyway",
              "E-ZPass IN",
              "RiverLink",
              "E-ZPass MD",
              "E-ZPass MA",
              "E-ZPass NH",
              "E-ZPass NJ",
              "E-ZPass NY",
              "E-ZPass NC",
              "E-ZPass OH",
              "E-ZPass PA",
              "E-ZPass RI",
              "E-ZPass VA",
              "E-ZPass WV",
              "E-Zpass Flex"
            ],
            "licensePlatePrimary": null,
            "licensePlateSecondary": null,
            "discountCarDetails": "Monthly Volume discounts: 30-39 trips per month using Maine E-ZPass account equals a 25% discount to all trips. 40+ account trips per month equals a 50% discount applied to all trips.",
            "discountCarType": "Personal cars",
            "start": {
              "id": 1250000,
              "lat": 43.16005,
              "lng": -70.65945,
              "name": "York North",
              "road": "Maine Tpke",
              "state": "Maine",
              "country": "USA",
              "arrival": {
                "distance": 2032,
                "time": "2021-10-25T05:31:06+00:00"
              },
              "point": {
                "type": "Feature",
                "properties": {},
                "geometry": {
                  "type": "Point",
                  "coordinates": [
                    -70.65945,
                    43.16005
                  ]
                }
              }
            },
            "end": {
              "id": 1250002,
              "lat": 43.32455,
              "lng": -70.61015,
              "name": "Wells South",
              "road": "Maine Tpke",
              "state": "Maine",
              "country": "USA",
              "arrival": {
                "distance": 21919,
                "time": "2021-10-25T05:31:06+00:00"
              },
              "point": {
                "type": "Feature",
                "properties": {},
                "geometry": {
                  "type": "Point",
                  "coordinates": [
                    -70.61015,
                    43.32455
                  ]
                }
              }
            },
            "height": null
          },
          {
            "type": "ticketSystem3",
            "tagCost": 2.2,
            "tagPriCost": 2.2,
            "tagSecCost": 2.9,
            "cashCost": 2.9,
            "licensePlateCost": null,
            "prepaidCardCost": 2.2,
            "creditCardCost": null,
            "currency": "USD",
            "tagPrimary": [
              "E-ZPass NJ"
            ],
            "tagSecondary": [
              "E-ZPass",
              "E-ZPass DE",
              "Uni",
              "I-Pass",
              "E-ZPass Skyway",
              "E-ZPass IN",
              "RiverLink",
              "E-ZPass ME",
              "E-ZPass MD",
              "E-ZPass MA",
              "E-ZPass NH",
              "E-ZPass NY",
              "E-ZPass NC",
              "E-ZPass OH",
              "E-ZPass PA",
              "E-ZPass RI",
              "E-ZPass VA",
              "E-ZPass WV",
              "E-Zpass Flex"
            ],
            "licensePlatePrimary": "Tolls by Mail",
            "licensePlateSecondary": null,
            "discountCarDetails": "Other discounts: 65+ Senior citizens receive a 10% discount on the off-peak rate as Senior Citizen Discount. Vehicles with fuel efficiency 45 MPG and meeting California Super Ultra Low Emission Vehicle (SULEV) standard receive a 10% discount on the off-peak rate as Green Pass Discount. Must have NJ E-ZPass.",
            "discountCarType": "Cars",
            "start": {
              "id": 1260004,
              "lat": 39.86145,
              "lng": -75.07475,
              "name": "NJ168, Woodbury, S. Camden",
              "road": "New Jersey Tpke",
              "state": "New Jersey",
              "country": "USA",
              "arrival": {
                "distance": 890,
                "time": "2021-10-25T05:31:06+00:00"
              },
              "point": {
                "type": "Feature",
                "properties": {},
                "geometry": {
                  "type": "Point",
                  "coordinates": [
                    -75.07475,
                    39.86145
                  ]
                }
              }
            },
            "end": {
              "id": 1260000,
              "lat": 39.68685,
              "lng": -75.44825,
              "name": "Delaware Memorial Bridge",
              "road": "New Jersey Tpke",
              "state": "New Jersey",
              "country": "USA",
              "arrival": {
                "distance": 39164,
                "time": "2021-10-25T05:31:06+00:00"
              },
              "point": {
                "type": "Feature",
                "properties": {},
                "geometry": {
                  "type": "Point",
                  "coordinates": [
                    -75.44825,
                    39.68685
                  ]
                }
              }
            },
            "height": null,
            "tagRequested": "prepaidCardCost"
          }
        ]
      },
      "Toll": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Toll type: <br><code>barrier</code> (for example <b><a href=\"https://www.tollguru.com/toll-info/hidalgo/hidalgo-cuota-paeje-caseta-de-cobro/\" target=\"_blank\"> toll roads in Hidalgo </b></a>), <br><code>ticketSystem</code> - ticket system (for example <b><a href=\"https://www.tollguru.com///toll-info/sinaloa/\" target=\"_blank\"> toll roads in Sinalo</b></a>), <br><code>distBased</code> -  distance based ."
          },
          "tagCost": {
            "type": "number",
            "description": "Transponder toll cost <br>For example, <b><a href=\"https://iave.capufe.gob.mx/#/\" target=\"_blank\">IAVE</b></a>, <b><a href=\"https://www.pase.com.mx/\" target=\"_blank\">Tag PASE</b></a>, <b><a href=\"https://www.televia.com.mx/\" target=\"_blank\">TeleVia</b></a>, <b><a href=\"https://www.viapass.com.mx/viapass/web_home.aspx\" target=\"_blank\">VIAPass</b></a> etc."
          },
          "cashCost": {
            "type": "number",
            "description": "Cash toll cost"
          },
          "licensePlateCost": {
            "type": "number",
            "description": "License plate (video) toll cost."
          },
          "prepaidCardCost": {
            "type": "number",
            "description": "Prepaid card such as Nexpress, Nexus Card, etc. toll cost"
          },
          "creditCardCost": {
            "type": "number",
            "description": "Credit card toll cost"
          },
          "currency": {
            "type": "string",
            "description": "Currency"
          },
          "tagPrimary": {
            "type": "array",
            "description": "A primary transponder that can be used on the facility. Typically primary transponders have discounts for each usage or based on volume.",
            "items": {
              "type": "string"
            }
          },
          "tagSecondary": {
            "type": "array",
            "description": "All other transponders that can be used on the facility. Secondary transponders may not count towards discounts",
            "items": {
              "type": "string"
            }
          },
          "licensePlatePrimary": {
            "type": "string",
            "description": "Name of the primary license plate toll (video toll) collection system. Typically license Plate tolls are not discounted."
          },
          "licensePlateSecondary": {
            "type": "string",
            "description": "Name of the secondary license plate toll (video toll) collection system"
          },
          "id": {
            "type": "number",
            "description": "TollGuru toll ID. Useful for error checking"
          },
          "lat": {
            "type": "number",
            "description": "Approximate latitude of the toll location"
          },
          "lng": {
            "type": "number",
            "description": "Approximate longitude of the toll location"
          },
          "name": {
            "type": "string",
            "description": "Name of the toll location"
          },
          "road": {
            "type": "string",
            "description": "Name of the toll road"
          },
          "state": {
            "type": "string",
            "description": "State, province of the toll location"
          }
        },
        "description": "Tolls object contains tolls for all the toll locations on the route. For each toll location",
        "example": {
          "id": 1030052,
          "lat": 43.82105,
          "lng": -79.47425,
          "name": "Pennsylvania Tpke",
          "road": "New Jersey Tpke",
          "state": "New Jersey",
          "country": "USA",
          "type": "ticketSystem2",
          "tagCost": 6.66,
          "tagPriCost": 6.66,
          "tagSecCost": 0,
          "cashCost": 0,
          "licensePlateCost": 45.6,
          "prepaidCardCost": 6.66,
          "creditCardCost": 6.66,
          "currency": "USD",
          "tagPrimary": [
            "E-ZPass"
          ],
          "tagSecondary": [
            "E-ZPass MA",
            "E-ZPass NH",
            "E-ZPass NY",
            "E-ZPass NC",
            "E-ZPass OH",
            "E-ZPass PA",
            "E-ZPass RI",
            "E-ZPass VA",
            "E-ZPass WV",
            "E-ZPass",
            "Uni",
            "I-Pass",
            "E-ZPass Skyway",
            "E-ZPass IN",
            "RiverLink",
            "E-ZPass ME",
            "E-ZPass MD"
          ],
          "licensePlatePrimary": "Tolls by Mail",
          "licensePlateSecondary": null,
          "discountCarDetails": null,
          "discountCarType": null,
          "discountTruckDetails": null,
          "discountTrucks": null,
          "height": null
        }
      },
      "Direction": {
        "type": "object",
        "properties": {
          "position": {
            "$ref": "#/components/schemas/Direction_position"
          },
          "maneuver": {
            "type": "string"
          },
          "html_instructions": {
            "type": "string"
          },
          "distance": {
            "type": "number"
          },
          "duration": {
            "type": "number"
          },
          "note": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "HosResponse": {
        "type": "object",
        "properties": {
          "summary": {
            "$ref": "#/components/schemas/HosResponse_summary"
          },
          "break_points": {
            "type": "array",
            "example": [
              43.78465,
              -79.52755
            ],
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "stops": {
            "type": "array",
            "example": [
              []
            ],
            "items": {
              "$ref": "#/components/schemas/Stop"
            }
          },
          "data": {
            "type": "array",
            "example": [
              {
                "instruction": "Start from Philadelphia , Pennsylvania"
              },
              {
                "instruction": "Drive",
                "duration": {
                  "text": "1 h 41 m",
                  "value": 6106
                },
                "distance": {
                  "text": 19,
                  "metric": 30,
                  "value": 29836
                }
              },
              {
                "instruction": "Break",
                "duration": {
                  "text": "30 m",
                  "value": 1800
                }
              }
            ],
            "items": {
              "$ref": "#/components/schemas/HosData"
            }
          }
        }
      },
      "HosData": {
        "type": "object",
        "properties": {
          "instruction": {
            "type": "string"
          },
          "duration": {
            "$ref": "#/components/schemas/HosResponse_summary_total_drive_duration"
          },
          "distance": {
            "$ref": "#/components/schemas/HosResponse_summary_total_distance"
          }
        }
      },
      "Stop": {
        "type": "object",
        "properties": {
          "additionalServices": {
            "type": "string"
          },
          "amenities": {
            "type": "string"
          },
          "businessesName": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "contactName": {
            "type": "string"
          },
          "fax": {
            "type": "string"
          },
          "fuelLanes": {
            "type": "number"
          },
          "highway": {
            "type": "string"
          },
          "latitude": {
            "type": "number"
          },
          "longitude": {
            "type": "number"
          },
          "parkingSpots": {
            "type": "string"
          },
          "paymentMethods": {
            "type": "string"
          },
          "phone1": {
            "type": "string"
          },
          "phone2": {
            "type": "string"
          },
          "phone3": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "restIndex": {
            "type": "string"
          },
          "showers": {
            "type": "number"
          },
          "state": {
            "type": "string"
          },
          "stopId": {
            "type": "number"
          },
          "streetAddress": {
            "type": "string"
          },
          "truckServiceBays": {
            "type": "number"
          },
          "type": {
            "type": "string"
          },
          "webAddress": {
            "type": "string"
          }
        }
      },
      "HosReq": {
        "type": "object",
        "properties": {
          "rule": {
            "type": "string",
            "enum": [
              "60",
              "70"
            ]
          },
          "dutyHoursBeforeEndOfWorkDay": {
            "type": "number"
          },
          "dutyHoursBeforeRestBreak": {
            "type": "number"
          },
          "drivingHoursBeforeEndOfWorkDay": {
            "type": "number"
          },
          "timeRemaining": {
            "type": "number"
          }
        }
      },
      "TeritoryMielageRes": {
        "type": "array",
        "example": [
          {
            "territory": {
              "name": "New York",
              "code": "New York",
              "type": "state"
            },
            "distance": {
              "text": 228,
              "metric": 367.1,
              "value": 367050
            },
            "trafficTime": "9 h 6 m"
          }
        ],
        "items": {
          "$ref": "#/components/schemas/TeritoryMielageRes_inner"
        }
      },
      "SyncResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "OK"
          },
          "summary": {
            "$ref": "#/components/schemas/SyncResponse_summary"
          },
          "route": {
            "$ref": "#/components/schemas/SyncResponse_route"
          }
        }
      },
      "AsyncResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "OK"
          },
          "requestId": {
            "type": "string",
            "example": "72ca5cba-b732-47ea-aec6-c7716bb37458"
          },
          "requestedTimestamp": {
            "type": "string",
            "example": "2020-06-15T04:27:08.838Z"
          }
        }
      },
      "Cost": {
        "type": "object",
        "properties": {
          "fuel": {
            "type": "number"
          },
          "otherCost": {
            "type": "number"
          },
          "tag": {
            "type": "number"
          },
          "cash": {
            "type": "number"
          },
          "licensePlate": {
            "type": "number"
          },
          "creditCard": {
            "type": "number"
          },
          "prepaidCard": {
            "type": "number"
          }
        },
        "description": "<p>Costs object summarizes the toll cost and the fuel cost for the route.The fuel costs calculated from fuel efficiency (city fuel effiency and highway fuel efficiency) and the speeds on each leg of the route.</p><p>The tolls are added for all the tolls on the route for each payment type. If a payment type cannot be using on all the toll points on the route, the toll cost is returned as false. Else, the sum of tolls for the payment type is returned.</p><p>The tolls are returned for the following payment types:</p><ul> <li>Cash</li><li>Transponder</li><li>License Plate</li><li>Credit card</li><li>Prepaid pass</li></ul>",
        "example": {
          "fuel": 81.5,
          "tag": 8.32,
          "cash": null,
          "licensePlate": 47.26,
          "creditCard": null,
          "prepaidCard": 8.32
        }
      },
      "Rates": {
        "type": "object",
        "description": "Rates object that specifies conversion factors between currencies with US Dollar as base. It is useful when you are looking for tolls between countries. Say you are looking for tolls between Toronto, Canada, and Monterrey, Mexico. Some of the tolls are in Canadian dollars, some in MXN and others in Mexican Pesos. The total costs are specified in one currency using the conversion factors. The conversion factors are based on dynamic exchange rates.",
        "example": {
          "USD": 1,
          "CAD": 1.282985,
          "MXN": 20.281435,
          "INR": 73.069503,
          "AUD": 1.30701,
          "GBP": 0.730355,
          "EUR": 0.827435,
          "NOK": 8.55952,
          "SEK": 8.40025,
          "DKK": 6.15375,
          "PEN": 6.15375,
          "COP": 6.15375,
          "ARS": 6.15375,
          "CLF": 6.15375,
          "CLP": 6.15375,
          "SOL": 6.15375
        }
      },
      "body": {
        "type": "object",
        "properties": {
          "mapProvider": {
            "type": "string",
            "description": "Specify route source, either <code>here</code> for HERE maps routes based polyline or <code>gmaps</code> for Google Maps polylines",
            "example": "here",
            "default": "here",
            "enum": [
              "google",
              "bing",
              "mapbox",
              "apple map",
              "here",
              "tomtom",
              "waze",
              "esri",
              "mapquest",
              "jawgmaps",
              "trimble",
              "ptv",
              "mapmyindia",
              "yandex",
              "michelin",
              "baidu",
              "gaode"
            ]
          },
          "path": {
            "type": "string",
            "description": "Specify route as a set of comma-separated <strong><code>lat,lng</code></strong> coordinates delimited by a pipe character (|)",
            "example": "43.64183,-79.38246|...|18.63085,-100.12845"
          },
          "locTimes": {
            "type": "array",
            "description": "Specify the locTimes utilizing a two-dimensional array of floating-point numbers, where each sub-array consists of the path or polyline index and the corresponding time-stamp for that coordinate. If locTimes is not specified we use departure_time as a the timestamp and if departure_time is also not specified we will use current time for toll calculations",
            "items": [
              {
                "type": "array",
                "items": [
                  {
                    "type": "number",
                    "format": "float"
                  },
                  {
                    "type": "number",
                    "format": "float"
                  }
                ]
              }
            ],
            "example": [
              [
                0,
                1660110342
              ],
              [
                30,
                1660110642
              ],
              [
                60,
                1660110942
              ],
              [
                232,
                1660111182
              ]
            ]
          },
          "vehicle": {
            "description": "Parameters related to vehicle",
            "$ref": "#/components/schemas/vehicle"
          },
          "departure_time": {
            "description": "If departure_time and locTimes both are not specified then we will use the current time for toll calculations",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTime"
              },
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ]
          },
          "fuelOptions": {
            "type": "object",
            "properties": {
              "fuelCost": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "number",
                    "example": 1.305,
                    "default": 3,
                    "description": "Specify numeric value up to two decimal places"
                  },
                  "units": {
                    "type": "string",
                    "example": "USD/gallon",
                    "default": "USD/gallon"
                  },
                  "currency": {
                    "type": "string",
                    "description": "If currency in units is not provided, the currency in fuel options will be used. If neither is provided, calculations will be based on the region by default.",
                    "example": "USD",
                    "default": "USD",
                    "enum": [
                      "USD",
                      "CAD",
                      "MXN",
                      "INR",
                      "AUD",
                      "GBP",
                      "NOK",
                      "SEK",
                      "DKK",
                      "PEN",
                      "COP",
                      "ARS",
                      "CLF",
                      "CLP",
                      "SOL"
                    ]
                  },
                  "fuelUnit": {
                    "type": "string",
                    "example": "gallon",
                    "default": "gallon",
                    "enum": [
                      "liter",
                      "gallon"
                    ]
                  }
                }
              },
              "fuelEfficiency": {
                "example": {
                  "city": 28.57,
                  "hwy": 22.4,
                  "units": "mpg"
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FuelEfficiency"
                  }
                ]
              }
            }
          },
          "units": {
            "type": "object",
            "description": "When currency in units is provided, it takes precedence for all calculations. When the value of fuelOptions.fuelCost.value is provided, we will extract this value and perform the necessary conversion",
            "properties": {
              "currency": {
                "type": "string",
                "example": "USD",
                "default": "USD",
                "description": "Set currency for calculations",
                "enum": [
                  "USD",
                  "CAD",
                  "MXN",
                  "INR",
                  "AUD",
                  "GBP",
                  "NOK",
                  "SEK",
                  "DKK",
                  "PEN",
                  "COP",
                  "ARS",
                  "CLF",
                  "CLP",
                  "SOL"
                ]
              }
            }
          }
        }
      },
      "inline_response_200": {
        "type": "object",
        "properties": {
          "summary": {
            "$ref": "#/components/schemas/SyncResponse_summary"
          },
          "route": {
            "$ref": "#/components/schemas/inline_response_200_route"
          }
        }
      },
      "inline_response_200_1": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SyncResponse"
          },
          {
            "$ref": "#/components/schemas/AsyncResponse"
          }
        ]
      },
      "body_1": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "example": "72ca5cba-b732-47ea-aec6-c7716bb37458"
          },
          "requestedTimestamp": {
            "type": "string",
            "example": "2020-06-15T04:27:08.838Z"
          }
        }
      },
      "HereResponse_summary_fuelPrice": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          }
        },
        "description": "Fuel price from request or the default fuel price (including currency)",
        "example": "{\"value\":2.79,\"currency\":\"USD\"}"
      },
      "Taxi_HereResponse_summary": {
        "type": "object",
        "properties": {
          "route": {
            "type": "array",
            "example": [
              {
                "location": {
                  "lat": 37.01487,
                  "lng": -7.93424
                },
                "address": "Philadelphia , Pennsylvania"
              },
              {
                "location": {
                  "lat": 38.01874,
                  "lng": -7.86654
                },
                "address": "Bridgewater Township , New Jersey"
              },
              {
                "location": {
                  "lat": 38.72639,
                  "lng": -9.14949
                },
                "address": "New York ,NY"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Route"
            }
          },
          "rates": {
            "$ref": "#/components/schemas/Rates"
          },
          "departure_time": {
            "type": "number",
            "example": 1609507347
          },
          "fuelPrice": {
            "$ref": "#/components/schemas/HereResponse_summary_fuelPrice"
          },
          "fuelEfficiency": {
            "description": "City fuel efficiency and highway fuel efficiency from request or the default values. Returns fuel efficiency units",
            "example": {
              "city": 28.57,
              "hwy": 22.4,
              "units": "mpg"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/FuelEfficiency"
              }
            ]
          },
          "vehicleType": {
            "example": "2AxlesTaxi",
            "allOf": [
              {
                "$ref": "#/components/schemas/vehicleType"
              }
            ],
            "enum": [
              "2AxlesTaxi",
              "2AxlesTaxiPool"
            ]
          },
          "share": {
            "type": "object"
          }
        }
      },
      "OtherVehicleTypes_HereResponse_summary": {
        "type": "object",
        "properties": {
          "route": {
            "type": "array",
            "example": [
              {
                "location": {
                  "lat": 37.01487,
                  "lng": -7.93424
                },
                "address": "Philadelphia , Pennsylvania"
              },
              {
                "location": {
                  "lat": 38.01874,
                  "lng": -7.86654
                },
                "address": "Bridgewater Township , New Jersey"
              },
              {
                "location": {
                  "lat": 38.72639,
                  "lng": -9.14949
                },
                "address": "New York ,NY"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Route"
            }
          },
          "rates": {
            "$ref": "#/components/schemas/Rates"
          },
          "departure_time": {
            "type": "number",
            "example": 1609507347
          },
          "fuelPrice": {
            "$ref": "#/components/schemas/HereResponse_summary_fuelPrice"
          },
          "fuelEfficiency": {
            "description": "City fuel efficiency and highway fuel efficiency from request or the default values. Returns fuel efficiency units",
            "example": {
              "city": 28.57,
              "hwy": 22.4,
              "units": "mpg"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/FuelEfficiency"
              }
            ]
          },
          "vehicleType": {
            "example": "2AxlesTaxi",
            "allOf": [
              {
                "$ref": "#/components/schemas/vehicleType"
              }
            ],
            "enum": [
              "2AxlesAuto",
              "3AxlesAuto",
              "4AxlesAuto",
              "2AxlesDualTire",
              "3AxlesDualTire",
              "4AxlesDualTire",
              "2AxlesBus",
              "3AxlesBus",
              "2AxlesMotorcycle",
              "3AxlesMotorcycle",
              "2AxlesRv",
              "3AxlesRv",
              "4AxlesRv",
              "2AxlesTNC",
              "2AxlesTNCPool",
              "Carpool2",
              "Carpool3"
            ]
          },
          "share": {
            "type": "object"
          }
        }
      },
      "EV_HereResponse_summary": {
        "type": "object",
        "properties": {
          "route": {
            "type": "array",
            "example": [
              {
                "location": {
                  "lat": 37.01487,
                  "lng": -7.93424
                },
                "address": "Philadelphia , Pennsylvania"
              },
              {
                "location": {
                  "lat": 38.01874,
                  "lng": -7.86654
                },
                "address": "Bridgewater Township , New Jersey"
              },
              {
                "location": {
                  "lat": 38.72639,
                  "lng": -9.14949
                },
                "address": "New York ,NY"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Route"
            }
          },
          "rates": {
            "$ref": "#/components/schemas/Rates"
          },
          "departure_time": {
            "type": "number",
            "example": 1609507347
          },
          "fuelPrice": {
            "$ref": "#/components/schemas/HereResponse_summary_fuelPrice"
          },
          "fuelEfficiency": {
            "description": "City fuel efficiency and highway fuel efficiency from request or the default values. Returns fuel efficiency units",
            "example": {
              "city": 28.57,
              "hwy": 22.4,
              "units": "mpg"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/FuelEfficiency"
              }
            ]
          },
          "vehicleType": {
            "example": "2AxlesEV",
            "allOf": [
              {
                "$ref": "#/components/schemas/vehicleType"
              }
            ],
            "enum": [
              "2AxlesEV",
              "3AxlesEV",
              "4AxlesEV"
            ]
          },
          "share": {
            "type": "object"
          }
        }
      },
      "HereResponse_summary": {
        "type": "object",
        "properties": {
          "route": {
            "type": "array",
            "example": [
              {
                "location": {
                  "lat": 37.01487,
                  "lng": -7.93424
                },
                "address": "Philadelphia , Pennsylvania"
              },
              {
                "location": {
                  "lat": 38.01874,
                  "lng": -7.86654
                },
                "address": "Bridgewater Township , New Jersey"
              },
              {
                "location": {
                  "lat": 38.72639,
                  "lng": -9.14949
                },
                "address": "New York ,NY"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Route"
            }
          },
          "rates": {
            "$ref": "#/components/schemas/Rates"
          },
          "departure_time": {
            "type": "number",
            "example": 1609507347
          },
          "fuelPrice": {
            "$ref": "#/components/schemas/HereResponse_summary_fuelPrice"
          },
          "fuelEfficiency": {
            "description": "City fuel efficiency and highway fuel efficiency from request or the default values. Returns fuel efficiency units",
            "example": {
              "city": 28.57,
              "hwy": 22.4,
              "units": "mpg"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/FuelEfficiency"
              }
            ]
          },
          "vehicleType": {
            "default": "2AxlesAuto",
            "example": "2AxlesTruck",
            "allOf": [
              {
                "$ref": "#/components/schemas/vehicleType"
              }
            ]
          },
          "share": {
            "type": "object"
          }
        }
      },
      "Route_location": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number"
          },
          "lng": {
            "type": "number"
          }
        }
      },
      "RouteResponse_summary_diffs": {
        "type": "object",
        "properties": {
          "cheapest": {
            "type": "number"
          },
          "fastest": {
            "type": "number"
          }
        },
        "example": "{\"cheapest\":\"0\",\"fastest\":\"7\"}"
      },
      "RouteResponse_summary_duration": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "value": {
            "type": "number"
          }
        },
        "example": "{\"text\":\"22 hr\",\"value\":79200}"
      },
      "Gmaps_RouteResponse_summary_duration_in_traffic": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "value": {
            "type": "number"
          }
        },
        "example": "{\"text\":\"23 hr 10 min\",\"value\":82810}"
      },
      "RouteResponse_summary_distance": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "metric": {
            "type": "number"
          },
          "value": {
            "type": "number"
          }
        },
        "example": "{\"text\":\"9 h 6 min\",\"value\":32774}"
      },
      "Gmaps_RouteResponse_summary": {
        "type": "object",
        "properties": {
          "hasTolls": {
            "type": "boolean",
            "example": true
          },
          "diffs": {
            "$ref": "#/components/schemas/RouteResponse_summary_diffs"
          },
          "url": {
            "type": "string",
            "example": "https://www.google.com/maps/?saddr=43.6419434,-79.3831512&daddr=19.3299977,-98.9424832+to:19.4684923,-99.007287+to:19.996351,-99.4836581+to:19.9945164,-99.4928634+to:19.8391736,-99.871366+to:19.7029493,-101.1936502&via=1,2,3,4,5"
          },
          "duration": {
            "$ref": "#/components/schemas/RouteResponse_summary_duration"
          },
          "durationInTraffic": {
            "$ref": "#/components/schemas/Gmaps_RouteResponse_summary_duration_in_traffic"
          },
          "distance": {
            "$ref": "#/components/schemas/RouteResponse_summary_distance"
          },
          "name": {
            "type": "string",
            "example": "I-95"
          },
          "note": {
            "type": "array",
            "example": [],
            "items": {
              "type": "string"
            }
          }
        },
        "description": "summary including distance, time (duration), name, whether the route has tolls (hasTolls), diffs object that shows the difference between the cost between the cheapest route and current route and difference in duration between the current route and the fastest route"
      },
      "RouteResponse_summary": {
        "type": "object",
        "properties": {
          "hasTolls": {
            "type": "boolean",
            "example": true
          },
          "diffs": {
            "$ref": "#/components/schemas/RouteResponse_summary_diffs"
          },
          "url": {
            "type": "string",
            "example": "https://www.google.com/maps/?saddr=43.6419434,-79.3831512&daddr=19.3299977,-98.9424832+to:19.4684923,-99.007287+to:19.996351,-99.4836581+to:19.9945164,-99.4928634+to:19.8391736,-99.871366+to:19.7029493,-101.1936502&via=1,2,3,4,5"
          },
          "duration": {
            "$ref": "#/components/schemas/RouteResponse_summary_duration"
          },
          "distance": {
            "$ref": "#/components/schemas/RouteResponse_summary_distance"
          },
          "name": {
            "type": "string",
            "example": "I-95"
          },
          "note": {
            "type": "array",
            "example": [],
            "items": {
              "type": "string"
            }
          }
        },
        "description": "summary including distance, time (duration), name, whether the route has tolls (hasTolls), diffs object that shows the difference between the cost between the cheapest route and current route and difference in duration between the current route and the fastest route"
      },
      "Direction_position": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number"
          },
          "longitude": {
            "type": "number"
          }
        }
      },
      "HosResponse_summary_total_drive_duration": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "value": {
            "type": "number"
          }
        }
      },
      "HosResponse_summary_total_distance": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "metric": {
            "type": "number"
          },
          "value": {
            "type": "number"
          }
        }
      },
      "HosResponse_summary": {
        "type": "object",
        "properties": {
          "total_drive_duration": {
            "$ref": "#/components/schemas/HosResponse_summary_total_drive_duration"
          },
          "total_break_duration": {
            "$ref": "#/components/schemas/HosResponse_summary_total_drive_duration"
          },
          "total_duration": {
            "$ref": "#/components/schemas/HosResponse_summary_total_drive_duration"
          },
          "total_distance": {
            "$ref": "#/components/schemas/HosResponse_summary_total_distance"
          }
        },
        "example": "{\"total_drive_duration\":{\"text\":\"9 h 4 m\",\"value\":32679},\"total_break_duration\":{\"text\":30 m,\"value\":1800},\"total_duration\":{\"text\":9 h 34 m\",\"value\":34479},\"total_distance\":{\"text\":228,\"metric\":367,\"value\":367050},\"rulesParam\":{\"rule\":60,\"dutyHoursBeforeEndOfWorkDay\":11,\"dutyHoursBeforeRestBreak\":7,\"drivingHoursBeforeEndOfWorkDay\":11,\"timeRemaining\":60}}"
      },
      "TeritoryMielageRes_inner": {
        "type": "object",
        "properties": {
          "territory": {
            "$ref": "#/components/schemas/TeritoryMielageRes_inner_territory"
          },
          "distance": {
            "$ref": "#/components/schemas/TeritoryMielageRes_inner_distance"
          },
          "trafficTime": {
            "type": "string"
          }
        }
      },
      "SyncResponse_summary": {
        "type": "object",
        "properties": {
          "countries": {
            "type": "array",
            "example": [
              "SGP"
            ]
          },
          "currency": {
            "type": "string",
            "example": "SGD"
          },
          "vehicleType": {
            "type": "string",
            "example": "2AxlesAuto"
          },
          "vehicleDescription": {
            "type": "string",
            "example": "Cars/SUV without trailers which are not commercial vehicles"
          },
          "fuelEfficiency": {
            "$ref": "#/components/schemas/FuelEfficiency"
          },
          "fuelPrice": {
            "description": "Fuel price from request or the default fuel price (including currency",
            "$ref": "#/components/schemas/fuelPrice"
          },
          "rates": {
            "$ref": "#/components/schemas/Rates"
          },
          "departureTime": {
            "type": "number",
            "example": 1609507347
          },
          "share": {
            "$ref": "#/components/schemas/share"
          }
        }
      },
      "fuelPrice": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "example": 3.72
          },
          "currency": {
            "type": "string",
            "example": "SGD"
          },
          "units": {
            "type": "string",
            "example": "$/gallon"
          },
          "fuelUnit": {
            "type": "string",
            "example": "gallon"
          }
        }
      },
      "share": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Tollguru Polyline with Timestamps"
          },
          "prefix": {
            "type": "string",
            "example": "Tollguru+Polyline+with+Timestamps"
          },
          "uuid": {
            "type": "string",
            "example": "be7ba066-7fa7-4742-8ecd-de63109b6d1e"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2023-08-21T08:32:12.437467487Z"
          },
          "client": {
            "type": "string",
            "example": "polylineAPITimestamps"
          }
        }
      },
      "SyncResponse_route": {
        "type": "object",
        "properties": {
          "hasTolls": {
            "type": "boolean",
            "example": true
          },
          "costs": {
            "$ref": "#/components/schemas/Cost"
          },
          "tolls": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Barrier"
                },
                {
                  "$ref": "#/components/schemas/TicketSystem1"
                },
                {
                  "$ref": "#/components/schemas/TicketSystem2"
                },
                {
                  "$ref": "#/components/schemas/TicketSystem3"
                }
              ]
            }
          }
        }
      },
      "inline_response_200_route": {
        "type": "object",
        "properties": {
          "hasTolls": {
            "type": "boolean",
            "example": true
          },
          "costs": {
            "$ref": "#/components/schemas/Cost"
          },
          "tolls": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Barrier"
                },
                {
                  "$ref": "#/components/schemas/TicketSystem1"
                },
                {
                  "$ref": "#/components/schemas/TicketSystem2"
                },
                {
                  "$ref": "#/components/schemas/TicketSystem3"
                }
              ]
            }
          }
        },
        "description": "Route information including tolls"
      },
      "TeritoryMielageRes_inner_territory": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "TeritoryMielageRes_inner_distance": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "metric": {
            "type": "number"
          },
          "value": {
            "type": "number"
          }
        }
      }
    },
    "securitySchemes": {
      "authorizer": {
        "type": "apiKey",
        "description": "TollGuru uses developer specific API keys to authenticate requests. The authentication to the API is done through HTTP Basic Auth. Your API key serves as the basic auth username value. You do not need to provide a password. The TollGuru API key comes with privileges. Do not share API keys in publicly accessible areas such as GitHub or on client-side code in a browser. To get a TollGuru Toll API key <ul> <li>Registering for a new TollGuru developer API key at <a href='https://dashboard.tollguru.com/dashboard/home' target='_blank'>TollGuru developer portal</a>.</li> <li>Sign up for a trial account using your business email. Your trial access caps at 50 requests daily. For a higher daily limit, please reach out to us at <a href = 'mailto: api@TollGuru.com'>api@TollGuru.com</a>, providing details about your business and how you plan to use the API.</li> </ul> <h2>Adding the API key to your request</h2> The API key should be included in all API requests to the server in the header. In the following example, replace developer_key with your API key. It should look like <br> <b>x-api-key- developer_key</b></br>",
        "name": "x-api-key",
        "in": "header"
      }
    }
  }
}